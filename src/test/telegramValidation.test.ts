/**
 * Test b√°sico para verificar la funcionalidad de validaci√≥n de Telegram
 */

import { TelegramValidationService, TelegramQuestionData } from '../services/telegramValidationService';

// Test data
const validTelegramQuestion: TelegramQuestionData = {
  question: "¬øQu√© establece el Art. 65.1 Ley 40/2015 sobre Secretarios generales t√©cnicos?", // 82 chars
  options: [
    "Competencias sobre servicios comunes", // 35 chars
    "Dependencia directa del Ministro", // 32 chars
    "Funciones de coordinaci√≥n", // 25 chars
    "Gesti√≥n presupuestaria exclusiva" // 32 chars
  ],
  feedback: "Art. 65.1: Los Secretarios generales t√©cnicos tienen competencias sobre servicios comunes seg√∫n RD de estructura." // 118 chars
};

const invalidTelegramQuestion: TelegramQuestionData = {
  question: "Seg√∫n el Art√≠culo 65.1 de la Ley 40/2015, de 1 de octubre, de R√©gimen Jur√≠dico del Sector P√∫blico, en relaci√≥n con las competencias de los Secretarios generales t√©cnicos, bajo la inmediata dependencia del Subsecretario, ¬øcu√°l de las siguientes afirmaciones sobre sus competencias es correcta?", // 320+ chars
  options: [
    "Tendr√°n las competencias sobre servicios comunes que les atribuya el Real Decreto de estructura del Departamento ministerial correspondiente", // 140+ chars
    "Dependencia directa del Ministro sin intermediarios organizativos", // 67 chars
    "Exclusivamente funciones de coordinaci√≥n administrativa", // 55 chars
    "Competencias limitadas √∫nicamente a la gesti√≥n presupuestaria" // 62 chars
  ],
  feedback: "El Art√≠culo 65.1 de la Ley 40/2015 establece que los Secretarios generales t√©cnicos, bajo la inmediata dependencia del Subsecretario, tendr√°n las competencias sobre servicios comunes que les atribuya el Real Decreto de estructura del Departamento y, en todo caso, respecto a la gesti√≥n econ√≥mica y presupuestaria." // 300+ chars
};

// Test functions
export function testTelegramValidation() {
  console.log('üß™ Iniciando tests de validaci√≥n de Telegram...');
  
  // Test 1: Pregunta v√°lida
  console.log('\nüìù Test 1: Pregunta v√°lida');
  const validResult = TelegramValidationService.validateQuestion(validTelegramQuestion);
  console.log('Resultado:', validResult);
  console.log('‚úÖ V√°lida:', validResult.isValid);
  console.log('üìä Longitudes:', {
    pregunta: validResult.questionLength,
    opciones: validResult.optionLengths,
    feedback: validResult.feedbackLength
  });
  
  // Test 2: Pregunta inv√°lida
  console.log('\nüìù Test 2: Pregunta inv√°lida');
  const invalidResult = TelegramValidationService.validateQuestion(invalidTelegramQuestion);
  console.log('Resultado:', invalidResult);
  console.log('‚ùå V√°lida:', invalidResult.isValid);
  console.log('üö® Errores:', invalidResult.errors);
  console.log('üìä Longitudes:', {
    pregunta: invalidResult.questionLength,
    opciones: invalidResult.optionLengths,
    feedback: invalidResult.feedbackLength
  });
  
  // Test 3: Truncamiento de feedback
  console.log('\nüìù Test 3: Truncamiento de feedback');
  const longFeedback = "Este es un feedback muy largo que excede los 200 caracteres permitidos por Telegram. Necesitamos verificar que el sistema puede truncar autom√°ticamente este texto manteniendo palabras completas cuando sea posible y a√±adiendo puntos suspensivos al final.";
  const truncated = TelegramValidationService.truncateFeedback(longFeedback);
  console.log('Original:', longFeedback.length, 'chars');
  console.log('Truncado:', truncated.length, 'chars');
  console.log('Texto truncado:', truncated);
  
  // Test 4: Reporte de validaci√≥n
  console.log('\nüìù Test 4: Reporte de validaci√≥n m√∫ltiple');
  const questions = [validTelegramQuestion, invalidTelegramQuestion];
  const report = TelegramValidationService.getValidationReport(questions);
  console.log('Reporte:', report);
  
  console.log('\n‚úÖ Tests de validaci√≥n de Telegram completados');
}

// Test de l√≠mites espec√≠ficos
export function testTelegramLimits() {
  console.log('\nüîç Verificando l√≠mites de Telegram...');
  const limits = TelegramValidationService.getLimits();
  console.log('L√≠mites configurados:', limits);
  
  // Verificar que los l√≠mites son correctos
  const expectedLimits = {
    question: 300,
    option: 150,
    feedback: 200
  };
  
  const limitsMatch = JSON.stringify(limits) === JSON.stringify(expectedLimits);
  console.log('‚úÖ L√≠mites correctos:', limitsMatch);
  
  if (!limitsMatch) {
    console.error('‚ùå Los l√≠mites no coinciden con los esperados');
    console.error('Esperados:', expectedLimits);
    console.error('Actuales:', limits);
  }
}

// Ejecutar tests si se ejecuta directamente
if (typeof window === 'undefined' && require.main === module) {
  testTelegramValidation();
  testTelegramLimits();
} 