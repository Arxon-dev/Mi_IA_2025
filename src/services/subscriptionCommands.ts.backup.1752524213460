import { SubscriptionService } from './subscriptionService';
import { PaymentService } from './paymentService';
import { prisma } from '@/lib/prisma';

export interface TelegramMessage {
  chat: { id: number };
  from?: { id: number; first_name?: string; last_name?: string; username?: string };
  text?: string;
}

export interface TelegramBot {
  sendMessage: (chatId: number, text: string, options?: any) => Promise<any>;
  sendInvoice: (chatId: number, invoiceData: any) => Promise<any>;
}

export class SubscriptionCommands {

  /**
   * Comando /planes - Mostrar planes disponibles
   */
  static async handlePlanesCommand(message: TelegramMessage, bot: TelegramBot): Promise<void> {
    try {
      const plans = await SubscriptionService.getAvailablePlans();
      
      let responseText = `💰 <b>PLANES DE SUSCRIPCIÓN OPOMELILLA</b>\n\n`;
      responseText += `📍 <b>Diseñado específicamente para oposiciones para la Permanencia en la FAS</b>\n\n`;

      plans.forEach((plan, index) => {
        const emoji = plan.name === 'basic' ? '🥉' : plan.name === 'premium' ? '🥈' : '⭐';
        
        responseText += `${emoji} <b>${plan.displayName.toUpperCase()}</b>\n`;
        responseText += `💶 <b>€${plan.price}/mes</b> (IVA incluido)\n`;
        responseText += `📝 ${plan.description}\n\n`;
        
        responseText += `🎯 <b>Funcionalidades:</b>\n`;
        responseText += `${plan.canUseFailedQuestions ? '✅' : '❌'} Sistema de preguntas falladas\n`;
        responseText += `${plan.canUseAdvancedStats ? '✅' : '❌'} Estadísticas avanzadas\n`;
        responseText += `${plan.canUseSimulations ? '✅' : '❌'} Simulacros personalizados\n`;
        responseText += `${plan.canUseAIAnalysis ? '✅' : '❌'} Análisis con IA\n`;
        responseText += `${plan.canUseMoodleIntegration ? '✅' : '❌'} Integración con Moodle\n`;
        
        if (plan.dailyQuestionsLimit) {
          responseText += `📊 Límite: ${plan.dailyQuestionsLimit} preguntas/día\n`;
        } else {
          responseText += `📊 Preguntas: <b>ILIMITADAS</b>\n`;
        }
        
        responseText += `\n`;
      });

      responseText += `🚀 <b>¡Empieza ahora!</b>\n`;
      responseText += `• /basico - Suscribirse al plan Básico\n`;
      responseText += `• /premium - Suscribirse al plan Premium\n`;
      responseText += `• /mi_plan - Ver tu suscripción actual\n\n`;
      
      responseText += `💳 <b>Métodos de pago seguros:</b>\n`;
      responseText += `🔹 Telegram Payments (Visa, Mastercard)\n`;
      responseText += `🔹 Transferencia bancaria española\n`;
      responseText += `🔹 Próximamente: Bizum + Redsys\n\n`;
      
      responseText += `📞 <b>Soporte:</b> @Carlos_esp`;

      await bot.sendMessage(message.chat.id, responseText, {
        parse_mode: 'HTML',
        disable_web_page_preview: true
      });

    } catch (error) {
      console.error('Error en comando /planes:', error);
      await bot.sendMessage(
        message.chat.id, 
        '❌ Error obteniendo información de planes. Inténtalo más tarde.',
        { parse_mode: 'HTML' }
      );
    }
  }

  /**
   * Comando /basico - Suscribirse al plan básico
   */
  static async handleBasicoCommand(message: TelegramMessage, bot: TelegramBot): Promise<void> {
    try {
      await this.handleSubscriptionCommand(message, bot, 'basic');
    } catch (error) {
      console.error('Error en comando /basico:', error);
      await bot.sendMessage(
        message.chat.id, 
        '❌ Error procesando suscripción. Inténtalo más tarde.',
        { parse_mode: 'HTML' }
      );
    }
  }

  /**
   * Comando /premium - Suscribirse al plan premium
   */
  static async handlePremiumCommand(message: TelegramMessage, bot: TelegramBot): Promise<void> {
    try {
      await this.handleSubscriptionCommand(message, bot, 'premium');
    } catch (error) {
      console.error('Error en comando /premium:', error);
      await bot.sendMessage(
        message.chat.id, 
        '❌ Error procesando suscripción. Inténtalo más tarde.',
        { parse_mode: 'HTML' }
      );
    }
  }

  /**
   * Lógica común para comandos de suscripción
   */
  private static async handleSubscriptionCommand(
    message: TelegramMessage, 
    bot: TelegramBot, 
    planName: 'basic' | 'premium'
  ): Promise<void> {
    if (!message.from) {
      await bot.sendMessage(
        message.chat.id,
        '❌ No se pudo identificar el usuario.',
        { parse_mode: 'HTML' }
      );
      return;
    }

    // Obtener o crear usuario
    const userId = await this.ensureUserExists(message.from);
    
    // Buscar el plan
    const plan = await prisma.subscriptionPlan.findFirst({
      where: { name: planName, isActive: true }
    });

    if (!plan) {
      await bot.sendMessage(
        message.chat.id,
        '❌ Plan no disponible actualmente.',
        { parse_mode: 'HTML' }
      );
      return;
    }

    // Verificar suscripción actual
    const currentSubscription = await SubscriptionService.getCurrentSubscription(userId);
    if (currentSubscription?.status === 'active') {
      if (currentSubscription.planId === plan.id) {
        await bot.sendMessage(
          message.chat.id,
          `✅ Ya tienes una suscripción activa al plan <b>${plan.displayName}</b>.\n\n` +
          `Usa /mi_plan para ver los detalles.`,
          { parse_mode: 'HTML' }
        );
        return;
      } else {
        // Usuario tiene plan diferente, permitir upgrade/downgrade
        const actionText = plan.price > currentSubscription.plan.price ? 'actualizar' : 'cambiar';
        await bot.sendMessage(
          message.chat.id,
          `🔄 Tienes una suscripción activa al plan <b>${currentSubscription.plan.displayName}</b>.\n\n` +
          `¿Quieres ${actionText} al plan <b>${plan.displayName}</b>?\n\n` +
          `Responde "SÍ" para continuar o usa /mi_plan para ver tu plan actual.`,
          { parse_mode: 'HTML' }
        );
        return;
      }
    }

    // Crear invoice para el pago
    const invoiceResult = await PaymentService.createTelegramInvoice(userId, plan.id);
    
    if (!invoiceResult.success) {
      await bot.sendMessage(
        message.chat.id,
        `❌ Error creando la factura: ${invoiceResult.error}`,
        { parse_mode: 'HTML' }
      );
      return;
    }

    // Preparar y enviar invoice
    const invoiceData = JSON.parse(invoiceResult.invoiceUrl || '{}');
    
    try {
      await bot.sendInvoice(message.chat.id, invoiceData);
      
      // Enviar mensaje explicativo
      const explanationText = `💳 <b>Invoice enviada para plan ${plan.displayName}</b>\n\n` +
        `💰 Precio: <b>€${plan.price}/mes</b> (IVA incluido)\n` +
        `🔒 Pago 100% seguro con Telegram Payments\n` +
        `⚡ Activación inmediata tras el pago\n\n` +
        `📱 <b>Toca en la invoice arriba</b> para completar el pago.\n\n` +
        `❓ <b>¿Problemas?</b> Contacta @Carlos_esp`;

      await bot.sendMessage(message.chat.id, explanationText, {
        parse_mode: 'HTML'
      });

    } catch (error) {
      console.error('Error enviando invoice:', error);
      await bot.sendMessage(
        message.chat.id,
        '❌ Error enviando la factura. Por favor, contacta con soporte.',
        { parse_mode: 'HTML' }
      );
    }
  }

  /**
   * Comando /mi_plan - Ver estado de suscripción actual
   */
  static async handleMiPlanCommand(message: TelegramMessage, bot: TelegramBot): Promise<void> {
    try {
      if (!message.from) {
        await bot.sendMessage(
          message.chat.id,
          '❌ No se pudo identificar el usuario.',
          { parse_mode: 'HTML' }
        );
        return;
      }

      const userId = await this.ensureUserExists(message.from);
      const subscription = await SubscriptionService.getCurrentSubscription(userId);
      const quotaInfo = await SubscriptionService.getRemainingQuota(userId);

      let responseText = `👤 <b>MI SUSCRIPCIÓN</b>\n\n`;

      if (!subscription || subscription.status !== 'active') {
        responseText += `📋 <b>Estado:</b> Sin suscripción activa\n`;
        responseText += `💡 <b>Plan actual:</b> Gratuito (solo canal público)\n\n`;
        responseText += `🚀 <b>¡Únete a un plan premium!</b>\n`;
        responseText += `• /basico - €4.99/mes\n`;
        responseText += `• /premium - €9.99/mes\n`;
        responseText += `• /planes - Ver todos los planes\n`;
      } else {
        const plan = subscription.plan;
        const endDate = subscription.endDate ? new Date(subscription.endDate) : null;
        const daysRemaining = endDate ? Math.ceil((endDate.getTime() - Date.now()) / (1000 * 60 * 60 * 24)) : null;

        responseText += `📋 <b>Estado:</b> ✅ Activa\n`;
        responseText += `💎 <b>Plan:</b> ${plan.displayName}\n`;
        responseText += `💰 <b>Precio:</b> €${plan.price}/mes\n`;
        
        if (daysRemaining !== null) {
          responseText += `📅 <b>Renovación:</b> ${daysRemaining} días\n`;
        }
        
        responseText += `\n🎯 <b>LÍMITES DE USO HOY:</b>\n`;
        
        if (quotaInfo.questions === null) {
          responseText += `📚 Preguntas: <b>ILIMITADAS</b>\n`;
        } else {
          responseText += `📚 Preguntas: <b>${quotaInfo.questions}</b> restantes\n`;
        }
        
        if (quotaInfo.simulations === null) {
          responseText += `🎯 Simulacros: <b>ILIMITADOS</b>\n`;
        } else {
          responseText += `🎯 Simulacros: <b>${quotaInfo.simulations}</b> restantes\n`;
        }

        responseText += `\n🎮 <b>FUNCIONALIDADES ACTIVAS:</b>\n`;
        responseText += `${plan.canUseFailedQuestions ? '✅' : '❌'} Preguntas falladas\n`;
        responseText += `${plan.canUseAdvancedStats ? '✅' : '❌'} Estadísticas avanzadas\n`;
        responseText += `${plan.canUseSimulations ? '✅' : '❌'} Simulacros personalizados\n`;
        responseText += `${plan.canUseAIAnalysis ? '✅' : '❌'} Análisis con IA\n`;
        responseText += `${plan.canUseMoodleIntegration ? '✅' : '❌'} Integración Moodle\n`;

        if (plan.name === 'basic') {
          responseText += `\n🚀 <b>¿Quieres más?</b>\n`;
          responseText += `• /premium - Actualizar a Premium\n`;
        }

        responseText += `\n📞 <b>Gestionar suscripción:</b>\n`;
        responseText += `• /cancelar - Cancelar suscripción\n`;
        responseText += `• /facturas - Ver historial de pagos\n`;
      }

      await bot.sendMessage(message.chat.id, responseText, {
        parse_mode: 'HTML'
      });

    } catch (error) {
      console.error('Error en comando /mi_plan:', error);
      await bot.sendMessage(
        message.chat.id,
        '❌ Error obteniendo información de tu plan.',
        { parse_mode: 'HTML' }
      );
    }
  }

  /**
   * Comando /cancelar - Cancelar suscripción
   */
  static async handleCancelarCommand(message: TelegramMessage, bot: TelegramBot): Promise<void> {
    try {
      if (!message.from) {
        await bot.sendMessage(
          message.chat.id,
          '❌ No se pudo identificar el usuario.',
          { parse_mode: 'HTML' }
        );
        return;
      }

      const userId = await this.ensureUserExists(message.from);
      const subscription = await SubscriptionService.getCurrentSubscription(userId);

      if (!subscription || subscription.status !== 'active') {
        await bot.sendMessage(
          message.chat.id,
          '❌ No tienes una suscripción activa que cancelar.',
          { parse_mode: 'HTML' }
        );
        return;
      }

      const responseText = `⚠️ <b>CANCELAR SUSCRIPCIÓN</b>\n\n` +
        `📋 <b>Plan actual:</b> ${subscription.plan.displayName}\n` +
        `💰 <b>Precio:</b> €${subscription.plan.price}/mes\n\n` +
        `❗ <b>¿Estás seguro?</b>\n` +
        `• Perderás acceso a todas las funcionalidades premium\n` +
        `• Solo tendrás acceso al canal público\n` +
        `• La cancelación es inmediata\n\n` +
        `📝 <b>Para confirmar, responde:</b>\n` +
        `"CANCELAR SUSCRIPCION"\n\n` +
        `💡 <b>Alternativas:</b>\n` +
        `• /basico - Downgrade a plan básico\n` +
        `• @Carlos_esp - Hablar con soporte`;

      await bot.sendMessage(message.chat.id, responseText, {
        parse_mode: 'HTML'
      });

    } catch (error) {
      console.error('Error en comando /cancelar:', error);
      await bot.sendMessage(
        message.chat.id,
        '❌ Error procesando cancelación.',
        { parse_mode: 'HTML' }
      );
    }
  }

  /**
   * Comando /facturas - Ver historial de pagos
   */
  static async handleFacturasCommand(message: TelegramMessage, bot: TelegramBot): Promise<void> {
    try {
      if (!message.from) {
        await bot.sendMessage(
          message.chat.id,
          '❌ No se pudo identificar el usuario.',
          { parse_mode: 'HTML' }
        );
        return;
      }

      const userId = await this.ensureUserExists(message.from);
      const transactions = await PaymentService.getUserTransactions(userId);

      if (transactions.length === 0) {
        await bot.sendMessage(
          message.chat.id,
          '📄 No tienes transacciones registradas aún.',
          { parse_mode: 'HTML' }
        );
        return;
      }

      let responseText = `🧾 <b>HISTORIAL DE PAGOS</b>\n\n`;

      transactions.slice(0, 10).forEach((transaction, index) => {
        const statusEmoji = {
          'completed': '✅',
          'pending': '⏳',
          'failed': '❌',
          'refunded': '🔄',
          'cancelled': '🚫'
        }[transaction.status] || '❓';

        const date = new Date(transaction.createdAt).toLocaleDateString('es-ES');
        
        responseText += `${statusEmoji} <b>€${transaction.amount.toFixed(2)}</b> - ${date}\n`;
        responseText += `   ${transaction.description || 'Suscripción'}\n`;
        responseText += `   Estado: ${transaction.status}\n`;
        
        if (transaction.invoiceNumber) {
          responseText += `   Factura: ${transaction.invoiceNumber}\n`;
        }
        
        responseText += `\n`;
      });

      if (transactions.length > 10) {
        responseText += `... y ${transactions.length - 10} transacciones más\n\n`;
      }

      responseText += `📞 <b>¿Necesitas una factura?</b>\n`;
      responseText += `Contacta @Carlos_esp con el ID de transacción.`;

      await bot.sendMessage(message.chat.id, responseText, {
        parse_mode: 'HTML'
      });

    } catch (error) {
      console.error('Error en comando /facturas:', error);
      await bot.sendMessage(
        message.chat.id,
        '❌ Error obteniendo historial de pagos.',
        { parse_mode: 'HTML' }
      );
    }
  }

  /**
   * Asegurar que el usuario existe en la base de datos
   */
  private static async ensureUserExists(from: NonNullable<TelegramMessage['from']>): Promise<string> {
    const telegramUserId = from.id.toString();
    
    let user = await prisma.telegramUser.findUnique({
      where: { telegramUserId }
    });

    if (!user) {
      user = await prisma.telegramUser.create({
        data: {
          telegramUserId,
          telegramId: telegramUserId,
          username: from.username,
          firstName: from.first_name,
          lastName: from.last_name
        }
      });
    }

    return user.id;
  }
} 