'use client';

import { useState, useEffect } from 'react';
import { Card, CardContent, CardDescription, CardHeader, CardTitle } from '@/components/ui/Card';
import { Badge } from '@/components/ui/Badge';
import { Button } from '@/components/ui/Button';
import { Trophy, Users, TrendingUp, Award, Flame, Target, Clock, Star, Sparkles, Medal, Zap } from 'lucide-react';

interface LeaderboardEntry {
  rank: number;
  user: {
    telegramUserId: string;
    username?: string;
    firstName?: string;
    lastName?: string;
  };
  points: number;
  level: number;
  streak: number;
}

interface Achievement {
  id: string;
  name: string;
  description: string;
  icon: string;
  category: string;
  points: number;
  rarity: string;
  unlockedCount: number;
}

interface GamificationStats {
  totalUsers: number;
  totalResponses: number;
  averageAccuracy: number;
  activeStreaks: number;
  topStreak: number;
  totalPointsAwarded: number;
}

interface GamificationData {
  leaderboard: LeaderboardEntry[];
  weeklyLeaderboard: LeaderboardEntry[];
  achievements: Achievement[];
  stats: GamificationStats;
  lastUpdate: string;
}

export default function GamificationDashboard() {
  const [data, setData] = useState<GamificationData | null>(null);
  const [loading, setLoading] = useState(true);
  const [error, setError] = useState<string | null>(null);

  useEffect(() => {
    loadDashboardData();
    // Actualizar autom√°ticamente cada 30 segundos
    const interval = setInterval(loadDashboardData, 30000);
    return () => clearInterval(interval);
  }, []);

  const loadDashboardData = async () => {
    try {
      setLoading(true);
      setError(null);
      
      console.log('üéÆ Cargando datos reales de gamificaci√≥n...');
      
      const response = await fetch('/api/dashboard/gamification');
      
      if (!response.ok) {
        throw new Error(`Error ${response.status}: ${response.statusText}`);
      }
      
      const result = await response.json();
      
      if (result.error) {
        throw new Error(result.error);
      }
      
      console.log('‚úÖ Datos de gamificaci√≥n cargados:', result);
      setData(result);
      
    } catch (error) {
      console.error('‚ùå Error cargando datos del dashboard de gamificaci√≥n:', error);
      setError(error instanceof Error ? error.message : 'Error desconocido');
    } finally {
      setLoading(false);
    }
  };

  const getRarityColor = (rarity: string) => {
    switch (rarity) {
      case 'common': return 'bg-gray-100 text-gray-800';
      case 'rare': return 'bg-blue-100 text-blue-800';
      case 'epic': return 'bg-purple-100 text-purple-800';
      case 'legendary': return 'bg-yellow-100 text-yellow-800';
      default: return 'bg-gray-100 text-gray-800';
    }
  };

  const getLevelEmoji = (level: number) => {
    if (level <= 2) return 'ü•â';
    if (level <= 5) return 'ü•à';
    if (level <= 10) return 'ü•á';
    return 'üíé';
  };

  const formatUserName = (user: LeaderboardEntry['user']) => {
    if (user.firstName && user.lastName) {
      return `${user.firstName} ${user.lastName}`;
    }
    if (user.firstName) {
      return user.firstName;
    }
    if (user.username) {
      return `@${user.username}`;
    }
    return 'Usuario';
  };

  if (loading) {
    return (
      <div className="min-h-screen bg-gradient-to-br from-slate-50 via-blue-50 to-indigo-50">
        <div className="container mx-auto p-6">
          <div className="flex items-center justify-center h-64">
            <div className="text-center">
              <div className="relative">
                <div className="animate-spin rounded-full h-16 w-16 border-4 border-blue-200 border-t-blue-600 mx-auto"></div>
                <div className="absolute inset-0 rounded-full h-16 w-16 border-4 border-purple-200 border-t-purple-600 mx-auto animate-spin" style={{ animationDirection: 'reverse', animationDuration: '1.5s' }}></div>
              </div>
              <p className="mt-6 text-gray-700 font-medium">Cargando datos reales de gamificaci√≥n...</p>
              <p className="text-sm text-gray-600 mt-2">Conectando con la base de datos</p>
            </div>
          </div>
        </div>
      </div>
    );
  }

  if (error) {
    return (
      <div className="min-h-screen bg-gradient-to-br from-slate-50 via-blue-50 to-indigo-50">
        <div className="container mx-auto p-6">
          <Card className="border-red-200 bg-gradient-to-r from-red-50 to-rose-50 shadow-lg">
            <CardHeader>
              <CardTitle className="text-red-800 flex items-center gap-2">
                <span className="text-2xl">‚ö†Ô∏è</span>
                Error al cargar datos
              </CardTitle>
            </CardHeader>
            <CardContent>
              <p className="text-red-600 mb-4">{error}</p>
              <Button onClick={loadDashboardData} variant="outline" className="bg-white hover:bg-red-50">
                <TrendingUp className="w-4 h-4 mr-2" />
                Reintentar
              </Button>
            </CardContent>
          </Card>
        </div>
      </div>
    );
  }

  if (!data) {
    return (
      <div className="min-h-screen bg-gradient-to-br from-slate-50 via-blue-50 to-indigo-50">
        <div className="container mx-auto p-6">
          <div className="text-center py-16">
            <div className="text-6xl mb-4">üìä</div>
            <p className="text-gray-700 text-lg">No hay datos disponibles</p>
          </div>
        </div>
      </div>
    );
  }

  // At this point, TypeScript knows data is not null
  const stats = data.stats;
  const leaderboard = data.leaderboard;
  const weeklyLeaderboard = data.weeklyLeaderboard;
  const achievements = data.achievements;
  const lastUpdate = data.lastUpdate;

  return (
    <div className="min-h-screen bg-gradient-to-br from-slate-50 via-blue-50 to-indigo-50">
      <div className="container mx-auto p-6 space-y-8">
        {/* Enhanced Header */}
        <div className="relative overflow-hidden rounded-2xl bg-gradient-to-r from-blue-600 via-purple-600 to-indigo-600 p-8 text-white shadow-2xl">
          <div className="absolute inset-0 bg-black/10"></div>
          <div className="absolute -top-4 -right-4 w-24 h-24 bg-white/10 rounded-full blur-xl"></div>
          <div className="absolute -bottom-4 -left-4 w-32 h-32 bg-white/5 rounded-full blur-2xl"></div>
          
          <div className="relative z-10 flex items-center justify-between">
            <div>
              <div className="flex items-center gap-3 mb-2">
                <div className="p-2 bg-white/20 rounded-lg backdrop-blur-sm">
                  <Trophy className="w-8 h-8" />
                </div>
                <h1 className="text-4xl font-bold">Dashboard de Gamificaci√≥n</h1>
              </div>
              <p className="text-blue-100 text-lg mb-2">Sistema de motivaci√≥n para Telegram - Datos en tiempo real</p>
              <div className="flex items-center gap-2 text-sm text-blue-200">
                <Clock className="w-4 h-4" />
                <span>√öltima actualizaci√≥n: {new Date(lastUpdate).toLocaleString('es-ES')}</span>
              </div>
            </div>
            <Button 
              onClick={loadDashboardData} 
              variant="outline" 
              className="bg-white/10 border-white/20 text-white hover:bg-white/20 backdrop-blur-sm"
            >
              <TrendingUp className="w-4 h-4 mr-2" />
              Actualizar
            </Button>
          </div>
        </div>

        {/* Enhanced Stats Overview */}
        <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-6">
          <Card className="relative overflow-hidden border-0 shadow-lg bg-gradient-to-br from-blue-50 to-blue-100 hover:shadow-xl transition-all duration-300 group">
            <div className="absolute top-0 right-0 w-20 h-20 bg-blue-200/30 rounded-full -translate-y-10 translate-x-10 group-hover:scale-110 transition-transform duration-300"></div>
            <CardHeader className="flex flex-row items-center justify-between space-y-0 pb-2 relative z-10">
              <CardTitle className="text-sm font-medium text-blue-700">Usuarios Totales</CardTitle>
              <div className="p-2 bg-blue-600 rounded-lg">
                <Users className="h-5 w-5 text-white" />
              </div>
            </CardHeader>
            <CardContent className="relative z-10">
              <div className="text-3xl font-bold text-blue-900">{stats.totalUsers}</div>
              <div className="flex items-center gap-1 text-sm text-blue-600 mt-1">
                <Sparkles className="w-3 h-3" />
                <span>Participantes activos</span>
              </div>
            </CardContent>
          </Card>

          <Card className="relative overflow-hidden border-0 shadow-lg bg-gradient-to-br from-emerald-50 to-emerald-100 hover:shadow-xl transition-all duration-300 group">
            <div className="absolute top-0 right-0 w-20 h-20 bg-emerald-200/30 rounded-full -translate-y-10 translate-x-10 group-hover:scale-110 transition-transform duration-300"></div>
            <CardHeader className="flex flex-row items-center justify-between space-y-0 pb-2 relative z-10">
              <CardTitle className="text-sm font-medium text-emerald-700">Respuestas Totales</CardTitle>
              <div className="p-2 bg-emerald-600 rounded-lg">
                <Target className="h-5 w-5 text-white" />
              </div>
            </CardHeader>
            <CardContent className="relative z-10">
              <div className="text-3xl font-bold text-emerald-900">{stats.totalResponses.toLocaleString()}</div>
              <div className="flex items-center gap-1 text-sm text-emerald-600 mt-1">
                <Medal className="w-3 h-3" />
                <span>Preguntas respondidas</span>
              </div>
            </CardContent>
          </Card>

          <Card className="relative overflow-hidden border-0 shadow-lg bg-gradient-to-br from-amber-50 to-amber-100 hover:shadow-xl transition-all duration-300 group">
            <div className="absolute top-0 right-0 w-20 h-20 bg-amber-200/30 rounded-full -translate-y-10 translate-x-10 group-hover:scale-110 transition-transform duration-300"></div>
            <CardHeader className="flex flex-row items-center justify-between space-y-0 pb-2 relative z-10">
              <CardTitle className="text-sm font-medium text-amber-700">Precisi√≥n Promedio</CardTitle>
              <div className="p-2 bg-amber-600 rounded-lg">
                <Star className="h-5 w-5 text-white" />
              </div>
            </CardHeader>
            <CardContent className="relative z-10">
              <div className="text-3xl font-bold text-amber-900">{stats.averageAccuracy}%</div>
              <div className="flex items-center gap-1 text-sm text-amber-600 mt-1">
                <Zap className="w-3 h-3" />
                <span>Respuestas correctas</span>
              </div>
            </CardContent>
          </Card>

          <Card className="relative overflow-hidden border-0 shadow-lg bg-gradient-to-br from-rose-50 to-rose-100 hover:shadow-xl transition-all duration-300 group">
            <div className="absolute top-0 right-0 w-20 h-20 bg-rose-200/30 rounded-full -translate-y-10 translate-x-10 group-hover:scale-110 transition-transform duration-300"></div>
            <CardHeader className="flex flex-row items-center justify-between space-y-0 pb-2 relative z-10">
              <CardTitle className="text-sm font-medium text-rose-700">Racha M√°xima</CardTitle>
              <div className="p-2 bg-rose-600 rounded-lg">
                <Flame className="h-5 w-5 text-white" />
              </div>
            </CardHeader>
            <CardContent className="relative z-10">
              <div className="text-3xl font-bold text-rose-900">{stats.topStreak} d√≠as</div>
              <div className="flex items-center gap-1 text-sm text-rose-600 mt-1">
                <Flame className="w-3 h-3" />
                <span>{stats.activeStreaks} rachas activas</span>
              </div>
            </CardContent>
          </Card>
        </div>

        {/* Enhanced Rankings */}
        <div className="grid grid-cols-1 lg:grid-cols-2 gap-8">
          {/* Ranking General */}
          <Card className="border-0 shadow-lg bg-gradient-to-br from-amber-50/90 to-orange-50/90 backdrop-blur-sm hover:shadow-xl transition-all duration-300">
            <CardHeader className="bg-gradient-to-r from-yellow-400 to-orange-500 text-white rounded-t-lg">
              <CardTitle className="flex items-center gap-3">
                <div className="p-2 bg-white/20 rounded-lg backdrop-blur-sm">
                  <Trophy className="w-6 h-6" />
                </div>
                <div>
                  <div className="text-xl font-bold">Ranking General</div>
                  <CardDescription className="text-yellow-100">Top usuarios por puntos totales</CardDescription>
                </div>
              </CardTitle>
            </CardHeader>
            <CardContent className="p-6">
              <div className="space-y-4">
                {leaderboard.length === 0 ? (
                  <div className="text-center py-8">
                    <div className="text-4xl mb-3">üèÜ</div>
                    <p className="text-gray-500">No hay usuarios registrados a√∫n</p>
                  </div>
                ) : (
                  leaderboard.map((entry, index) => (
                    <div key={entry.user.telegramUserId} className={`flex items-center justify-between p-4 rounded-xl transition-all duration-200 hover:shadow-md ${
                      index === 0 ? 'bg-gradient-to-r from-yellow-50 to-amber-50 border-2 border-yellow-200' :
                      index === 1 ? 'bg-gradient-to-r from-gray-50 to-slate-50 border-2 border-gray-200' :
                      index === 2 ? 'bg-gradient-to-r from-orange-50 to-amber-50 border-2 border-orange-200' :
                      'bg-gradient-to-r from-blue-50 to-indigo-50 hover:from-blue-100 hover:to-indigo-100'
                    }`}>
                      <div className="flex items-center gap-4">
                        <div className={`text-3xl ${index < 3 ? 'animate-pulse' : ''}`}>
                          {index === 0 ? 'ü•á' : index === 1 ? 'ü•à' : index === 2 ? 'ü•â' : 'üî∏'}
                        </div>
                        <div>
                          <p className="font-semibold text-lg">
                            {formatUserName(entry.user)}
                          </p>
                          <div className="flex items-center gap-3 text-sm text-gray-600">
                            <span className="flex items-center gap-1">
                              {getLevelEmoji(entry.level)} Nivel {entry.level}
                            </span>
                            <span className="flex items-center gap-1">
                              üî• {entry.streak} d√≠as
                            </span>
                          </div>
                        </div>
                      </div>
                      <div className="text-right">
                        <p className="font-bold text-2xl text-gray-900">{entry.points}</p>
                        <p className="text-sm text-gray-600">puntos</p>
                      </div>
                    </div>
                  ))
                )}
              </div>
            </CardContent>
          </Card>

          {/* Ranking Semanal */}
          <Card className="border-0 shadow-lg bg-gradient-to-br from-blue-50/90 to-indigo-50/90 backdrop-blur-sm hover:shadow-xl transition-all duration-300">
            <CardHeader className="bg-gradient-to-r from-blue-500 to-indigo-600 text-white rounded-t-lg">
              <CardTitle className="flex items-center gap-3">
                <div className="p-2 bg-white/20 rounded-lg backdrop-blur-sm">
                  <Clock className="w-6 h-6" />
                </div>
                <div>
                  <div className="text-xl font-bold">Ranking Semanal</div>
                  <CardDescription className="text-blue-100">Top usuarios de esta semana</CardDescription>
                </div>
              </CardTitle>
            </CardHeader>
            <CardContent className="p-6">
              <div className="space-y-4">
                {weeklyLeaderboard.length === 0 ? (
                  <div className="text-center py-8">
                    <div className="text-4xl mb-3">üìÖ</div>
                    <p className="text-gray-500">No hay actividad esta semana</p>
                  </div>
                ) : (
                  weeklyLeaderboard.map((entry, index) => (
                    <div key={entry.user.telegramUserId} className="flex items-center justify-between p-4 rounded-xl bg-gradient-to-r from-blue-50 to-indigo-50 hover:from-blue-100 hover:to-indigo-100 transition-all duration-200 hover:shadow-md">
                      <div className="flex items-center gap-4">
                        <div className="text-3xl">
                          {index === 0 ? 'ü•á' : index === 1 ? 'ü•à' : index === 2 ? 'ü•â' : 'üî∏'}
                        </div>
                        <div>
                          <p className="font-semibold text-lg">
                            {formatUserName(entry.user)}
                          </p>
                          <p className="text-sm text-gray-600 flex items-center gap-1">
                            {getLevelEmoji(entry.level)} Nivel {entry.level}
                          </p>
                        </div>
                      </div>
                      <div className="text-right">
                        <p className="font-bold text-2xl text-blue-600">{entry.points}</p>
                        <p className="text-sm text-gray-600">pts esta semana</p>
                      </div>
                    </div>
                  ))
                )}
              </div>
            </CardContent>
          </Card>
        </div>

        {/* Enhanced Logros */}
        <Card className="border-0 shadow-lg bg-gradient-to-br from-purple-50/90 to-violet-50/90 backdrop-blur-sm">
          <CardHeader className="bg-gradient-to-r from-purple-500 to-violet-600 text-white rounded-t-lg">
            <CardTitle className="flex items-center gap-3">
              <div className="p-2 bg-white/20 rounded-lg backdrop-blur-sm">
                <Award className="w-6 h-6" />
              </div>
              <div>
                <div className="text-xl font-bold">Logros del Sistema</div>
                <CardDescription className="text-purple-100">Estad√≠sticas de logros desbloqueados</CardDescription>
              </div>
            </CardTitle>
          </CardHeader>
          <CardContent className="p-6">
            <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6">
              {achievements.map((achievement) => (
                <div key={achievement.id} className="group relative overflow-hidden p-6 border-2 border-gray-100 rounded-xl hover:border-purple-200 transition-all duration-300 hover:shadow-lg bg-gradient-to-br from-white to-gray-50 hover:from-purple-50 hover:to-violet-50">
                  <div className="absolute top-0 right-0 w-16 h-16 bg-purple-100 rounded-full -translate-y-8 translate-x-8 group-hover:scale-125 transition-transform duration-300 opacity-50"></div>
                  
                  <div className="relative z-10 space-y-4">
                    <div className="flex items-center justify-between">
                      <div className="text-4xl group-hover:scale-110 transition-transform duration-200">{achievement.icon}</div>
                      <Badge className={`${getRarityColor(achievement.rarity)} font-medium`}>
                        {achievement.rarity}
                      </Badge>
                    </div>
                    <div>
                      <h3 className="font-bold text-lg text-gray-900 group-hover:text-purple-700 transition-colors duration-200">{achievement.name}</h3>
                      <p className="text-sm text-gray-600 mt-1">{achievement.description}</p>
                    </div>
                    <div className="flex items-center justify-between pt-2 border-t border-gray-100">
                      <span className="text-green-600 font-bold flex items-center gap-1">
                        <span className="text-lg">üí∞</span>
                        +{achievement.points} pts
                      </span>
                      <span className="text-gray-500 text-sm flex items-center gap-1">
                        <Users className="w-3 h-3" />
                        {achievement.unlockedCount} usuarios
                      </span>
                    </div>
                  </div>
                </div>
              ))}
            </div>
          </CardContent>
        </Card>

        {/* Enhanced Analysis Section */}
        <div className="grid grid-cols-1 lg:grid-cols-2 gap-8">
          <Card className="border-0 shadow-lg bg-gradient-to-br from-indigo-50/90 to-blue-50/90 backdrop-blur-sm">
            <CardHeader>
              <CardTitle className="flex items-center gap-2 text-xl text-gray-900">
                <div className="p-2 bg-indigo-100 rounded-lg">
                  <TrendingUp className="w-5 h-5 text-indigo-600" />
                </div>
                Distribuci√≥n de Niveles
              </CardTitle>
              <CardDescription className="text-gray-700">Usuarios por nivel alcanzado</CardDescription>
            </CardHeader>
            <CardContent>
              <div className="space-y-4">
                {leaderboard.length > 0 ? (
                  (() => {
                    // Calcular distribuci√≥n real basada en los datos
                    const levelCounts = { '1-2': 0, '3-5': 0, '6-10': 0, '10+': 0 };
                    leaderboard.forEach(user => {
                      if (user.level <= 2) levelCounts['1-2']++;
                      else if (user.level <= 5) levelCounts['3-5']++;
                      else if (user.level <= 10) levelCounts['6-10']++;
                      else levelCounts['10+']++;
                    });

                    return Object.entries(levelCounts).map(([level, count]) => {
                      const percentage = leaderboard.length > 0 ? Math.round((count / leaderboard.length) * 100) : 0;
                      const emoji = level === '1-2' ? 'ü•â' : level === '3-5' ? 'ü•à' : level === '6-10' ? 'ü•á' : 'üíé';
                      
                      return (
                        <div key={level} className="flex items-center justify-between p-3 rounded-lg bg-gradient-to-r from-gray-50 to-indigo-50 hover:from-gray-100 hover:to-indigo-100 transition-all duration-200">
                          <div className="flex items-center gap-3">
                            <span className="text-2xl">{emoji}</span>
                            <span className="font-semibold">Nivel {level}</span>
                          </div>
                          <div className="flex items-center gap-3">
                            <div className="w-32 bg-gray-200 rounded-full h-3 overflow-hidden">
                              <div 
                                className="bg-gradient-to-r from-indigo-500 to-purple-600 h-3 rounded-full transition-all duration-1000 ease-out" 
                                style={{ width: `${percentage}%` }}
                              ></div>
                            </div>
                            <span className="text-sm font-bold text-gray-700 w-12">{count}</span>
                          </div>
                        </div>
                      );
                    })
                  })()
                ) : (
                  <div className="text-center py-8">
                    <div className="text-4xl mb-3">üìä</div>
                    <p className="text-gray-500">No hay suficientes datos para mostrar distribuci√≥n</p>
                  </div>
                )}
              </div>
            </CardContent>
          </Card>

          <Card className="border-0 shadow-lg bg-gradient-to-br from-emerald-50/90 to-green-50/90 backdrop-blur-sm">
            <CardHeader>
              <CardTitle className="flex items-center gap-2 text-xl text-gray-900">
                <div className="p-2 bg-green-100 rounded-lg">
                  <Sparkles className="w-5 h-5 text-green-600" />
                </div>
                Estad√≠sticas del Sistema
              </CardTitle>
              <CardDescription className="text-gray-700">Puntos y actividad</CardDescription>
            </CardHeader>
            <CardContent>
              <div className="space-y-4">
                <div className="flex items-center justify-between p-4 bg-gradient-to-r from-green-50 to-emerald-50 rounded-xl border border-green-100 hover:shadow-md transition-all duration-200">
                  <div className="flex items-center gap-3">
                    <div className="p-2 bg-green-500 rounded-lg">
                      <span className="text-xl text-white">üí∞</span>
                    </div>
                    <span className="font-semibold text-gray-800">Puntos Totales</span>
                  </div>
                  <span className="font-bold text-2xl text-green-600">{stats.totalPointsAwarded.toLocaleString()}</span>
                </div>

                <div className="flex items-center justify-between p-4 bg-gradient-to-r from-blue-50 to-indigo-50 rounded-xl border border-blue-100 hover:shadow-md transition-all duration-200">
                  <div className="flex items-center gap-3">
                    <div className="p-2 bg-blue-500 rounded-lg">
                      <span className="text-xl text-white">üìä</span>
                    </div>
                    <span className="font-semibold text-gray-800">Promedio por Usuario</span>
                  </div>
                  <span className="font-bold text-2xl text-blue-600">
                    {stats.totalUsers > 0 ? Math.round(stats.totalPointsAwarded / stats.totalUsers) : 0} pts
                  </span>
                </div>

                <div className="flex items-center justify-between p-4 bg-gradient-to-r from-purple-50 to-violet-50 rounded-xl border border-purple-100 hover:shadow-md transition-all duration-200">
                  <div className="flex items-center gap-3">
                    <div className="p-2 bg-purple-500 rounded-lg">
                      <span className="text-xl text-white">üéØ</span>
                    </div>
                    <span className="font-semibold text-gray-800">Respuestas por Usuario</span>
                  </div>
                  <span className="font-bold text-2xl text-purple-600">
                    {stats.totalUsers > 0 ? Math.round(stats.totalResponses / stats.totalUsers) : 0}
                  </span>
                </div>

                <div className="flex items-center justify-between p-4 bg-gradient-to-r from-orange-50 to-red-50 rounded-xl border border-orange-100 hover:shadow-md transition-all duration-200">
                  <div className="flex items-center gap-3">
                    <div className="p-2 bg-orange-500 rounded-lg">
                      <span className="text-xl text-white">üî•</span>
                    </div>
                    <span className="font-semibold text-gray-800">Usuarios con Racha</span>
                  </div>
                  <span className="font-bold text-2xl text-orange-600">
                    {stats.activeStreaks} / {stats.totalUsers}
                  </span>
                </div>
              </div>
            </CardContent>
          </Card>
        </div>
      </div>
    </div>
  );
} 