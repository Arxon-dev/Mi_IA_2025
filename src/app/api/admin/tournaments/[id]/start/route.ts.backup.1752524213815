import { NextRequest, NextResponse } from 'next/server';
import { PrismaClient } from '@prisma/client';
import { tournamentService } from '@/services/tournamentService';

const prisma = new PrismaClient();

// POST /api/admin/tournaments/[id]/start - Iniciar un torneo
export async function POST(
  request: NextRequest,
  { params }: { params: { id: string } }
) {
  try {
    const { id } = params;
    
    console.log(`üöÄ Iniciando torneo con ID: ${id}`);
    
    // Verificar que el torneo existe y est√° en estado correcto
    const tournament = await prisma.tournament.findUnique({
      where: { id },
      include: {
        participants: true,
        questions: true,
      }
    });
    
    if (!tournament) {
      return NextResponse.json(
        { error: 'Torneo no encontrado' },
        { status: 404 }
      );
    }
    
    if (tournament.status !== 'SCHEDULED') {
      return NextResponse.json(
        { error: 'El torneo no est√° en estado programado' },
        { status: 400 }
      );
    }
    
    if (tournament.participants.length === 0) {
      return NextResponse.json(
        { error: 'No hay participantes registrados en el torneo' },
        { status: 400 }
      );
    }
    
    console.log(`üìä Iniciando torneo: ${tournament.name}`);
    console.log(`üë• Participantes registrados: ${tournament.participants.length}`);
    console.log(`‚ùì Preguntas disponibles: ${tournament.questions.length}`);
    
    // Actualizar el estado del torneo a IN_PROGRESS
    const updatedTournament = await prisma.tournament.update({
      where: { id },
      data: {
        status: 'IN_PROGRESS',
        actualStartTime: new Date(),
        startTime: new Date()
      }
    });
    
    // Actualizar participantes a estado IN_PROGRESS
    await prisma.tournamentParticipant.updateMany({
      where: {
        tournamentId: id,
        status: 'REGISTERED'
      },
      data: {
        status: 'IN_PROGRESS',
        startedAt: new Date()
      }
    });
    
    console.log(`‚úÖ Torneo "${tournament.name}" iniciado correctamente`);
    console.log(`‚è∞ Duraci√≥n: ${tournament.timeLimit / 60} minutos`);
    
    // *** CLAVE: Activar el sistema de preguntas autom√°tico ***
    try {
      console.log(`üéØ Activando sistema de preguntas autom√°tico para torneo ${id}...`);
      const tournamentManager = await tournamentService.ensureTournamentManagerRunning();
      
      if (tournamentManager) {
        console.log(`‚úÖ Sistema de preguntas autom√°tico activado`);
        console.log(`üöÄ El torneo enviar√° preguntas autom√°ticamente a los participantes`);
      } else {
        console.warn(`‚ö†Ô∏è Sistema de preguntas no disponible - modo manual requerido`);
      }
    } catch (error) {
      console.error('‚ùå Error activando sistema de preguntas:', error);
      // No fallar si el sistema de preguntas falla, pero registrar el error
    }
    
    return NextResponse.json({ 
      success: true, 
      message: `Torneo "${tournament.name}" iniciado correctamente`,
      tournamentId: id,
      status: 'IN_PROGRESS',
      participants: tournament.participants.length,
      questions: tournament.questions.length,
      startTime: updatedTournament.actualStartTime,
      duration: tournament.timeLimit,
      automaticQuestions: true
    });
  } catch (error) {
    console.error('‚ùå Error iniciando torneo:', error);
    return NextResponse.json(
      { error: 'Error interno del servidor al iniciar el torneo' },
      { status: 500 }
    );
  }
} 