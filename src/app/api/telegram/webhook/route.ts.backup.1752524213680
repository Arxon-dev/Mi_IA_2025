import { NextRequest, NextResponse } from 'next/server';
import { prisma } from '@/lib/prisma';
import { GamificationService } from '@/services/gamificationService';
import { ExamRankingService } from '@/services/examRankingService';
import { DuelService } from '@/services/duelService';
import { NotificationService } from '@/services/notificationService';
import { Examen2024Service } from '@/services/examen2024Service';
import { SimulacroService } from '@/services/simulacroService';
import { Simulacro2024Service } from '@/services/simulacro2024Service';
import { DuelManager } from '@/services/duelManager';
import { TournamentService } from '@/services/tournamentService';
import { StudySessionService } from '@/services/studySessionService';
import { PaymentService } from '@/services/paymentServiceRedsys';
import { SubscriptionCommands } from '@/services/subscriptionCommandsSimple';
import { SubscriptionService } from '@/services/subscriptionService';

const BOT_TOKEN = process.env.TELEGRAM_BOT_TOKEN || '8039179482:AAG6bugxwgsmWLVHGoWpE5nih_PQpD3KPBs';

// Funci√≥n para generar IDs √∫nicos
function generateId(): string {
  return Date.now().toString() + Math.random().toString(36).substr(2, 9);
}

// Usando instancia centralizada de prisma

// Instancia del servicio de sesiones de estudio
const studySessionService = new StudySessionService();

// üèÜ SISTEMA DE TORNEOS INTEGRADO - Paso 3 completado
// Using TypeScript tournament service to avoid webpack issues

// Inicializar sistema de torneos autom√°ticamente
let tournamentSystemInitialized = false;

async function initializeTournamentSystem() {
  if (!tournamentSystemInitialized) {
    console.log('üèÜ Inicializando sistema de torneos integrado...');
    await TournamentService.getInstance().ensureTournamentManagerRunning();
    tournamentSystemInitialized = true;
    console.log('‚úÖ Sistema de torneos integrado iniciado');
  }
}

// ü™ñ NOTA: Los sistemas militares se probar√°n con script independiente
// Para integraci√≥n completa, se requiere configuraci√≥n adicional de TypeScript

interface TelegramUpdate {
  update_id: number;
  message?: {
    message_id: number;
    from: {
      id: number;
      is_bot: boolean;
      first_name: string;
      last_name?: string;
      username?: string;
    };
    chat: {
      id: number;
      type: string;
    };
    date: number;
    text?: string;
    reply_to_message?: {
      message_id: number;
      date?: number;
      text?: string;
    };
    // üÜï NUEVO: Agregar detecci√≥n de nuevos miembros
    new_chat_members?: Array<{
      id: number;
      is_bot: boolean;
      first_name: string;
      last_name?: string;
      username?: string;
    }>;
    // üí∞ NUEVO: Agregar soporte para pagos exitosos
    successful_payment?: {
      currency: string;
      total_amount: number;
      invoice_payload: string;
      shipping_option_id?: string;
      order_info?: any;
      telegram_payment_charge_id: string;
      provider_payment_charge_id: string;
    };
  };
  poll_answer?: {
    poll_id: string;
    user: {
      id: number;
      is_bot: boolean;
      first_name: string;
      last_name?: string;
      username?: string;
    };
    option_ids: number[];
  };
  // üí≥ NUEVO: Agregar soporte para pre-checkout queries
  pre_checkout_query?: {
    id: string;
    from: {
      id: number;
      is_bot: boolean;
      first_name: string;
      last_name?: string;
      username?: string;
    };
    currency: string;
    total_amount: number;
    invoice_payload: string;
    shipping_option_id?: string;
    order_info?: any;
  };
}

// Funci√≥n para extraer el ID de la pregunta del mensaje original
function extractQuestionId(text: string): string | null {
  // Buscar patrones como "ID: 123" o "#123" en el texto
  const patterns = [
    /ID:\s*([a-zA-Z0-9-]+)/i,
    /#([a-zA-Z0-9-]+)/,
    /Pregunta\s+([a-zA-Z0-9-]+)/i
  ];

  for (const pattern of patterns) {
    const match = text.match(pattern);
    if (match) {
      return match[1];
    }
  }

  return null;
}

function extractRankingType(text: string): 'general' | 'semanal' | 'mensual' {
  const lowerText = text.toLowerCase();
  
  if (lowerText.includes('semanal') || lowerText.includes('semana')) {
    return 'semanal';
  } else if (lowerText.includes('mensual') || lowerText.includes('mes')) {
    return 'mensual';
  } else {
    return 'general';
  }
}

// Funci√≥n para verificar si la respuesta es correcta
function checkAnswer(userAnswer: string, correctAnswers: string[]): boolean {
  const normalizedUserAnswer = userAnswer.toLowerCase().trim();
  
  return correctAnswers.some(answer => 
    answer.toLowerCase().trim() === normalizedUserAnswer
  );
}

// Funci√≥n para calcular el tiempo de respuesta
function calculateResponseTime(questionTime: number, responseTime: number): number {
  return Math.max(0, responseTime - questionTime);
}

// Funci√≥n para enviar mensajes a Telegram
async function sendTelegramMessage(chatid: number | string, message: string): Promise<boolean> {
  try {
    console.log('Enviando mensaje a Telegram:', { chatid, messageLength: message.length });
    
    const response = await fetch(`https://api.telegram.org/bot${BOT_TOKEN}/sendMessage`, {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json',
      },
      body: JSON.stringify({
        chat_id: chatid,
        text: message,
        parse_mode: 'HTML'  // Cambiado de Markdown a HTML
      }),
    });

    const result = await response.json();
    
    console.log('Respuesta de Telegram API:', result);
    
    if (!result.ok) {
      console.error('Error enviando mensaje a Telegram:', result.description);
      
      // Intentar enviar sin formato si falla
      const fallbackResponse = await fetch(`https://api.telegram.org/bot${BOT_TOKEN}/sendMessage`, {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
        },
        body: JSON.stringify({
          chat_id: chatid,
          text: message.replace(/<[^>]*>/g, '') // Quitar HTML tags
        }),
      });
      
      const fallbackResult = await fallbackResponse.json();
      console.log('Respuesta fallback:', fallbackResult);
      
      return fallbackResult.ok;
    }

    console.log('‚úÖ Mensaje enviado exitosamente a Telegram');
    return true;
  } catch (error) {
    console.error('‚ùå Error en sendTelegramMessage:', error);
    return false;
  }
}

// GET endpoint for testing
export async function GET() {
  return NextResponse.json({ 
    status: 'ok', 
    message: 'Telegram webhook endpoint is working!',
    timestamp: new Date().toISOString()
  });
}

// ============ FUNCIONES AUXILIARES PARA FEEDBACK INMEDIATO ============

/**
 * Calcula los puntos ganados por una respuesta
 * NOTA: Esta funci√≥n es solo para feedback inmediato.
 * El c√°lculo real se hace en gamificationService.ts con el sistema h√≠brido completo.
 */
function calculatePointsEarned(iscorrect: boolean, responseTime?: number): number {
  // Esta funci√≥n es solo para mostrar feedback inmediato aproximado
  // El c√°lculo real con protecciones se hace en gamificationService.ts
  
  const basePoints = iscorrect ? 10 : -2; // Aproximaci√≥n para feedback inmediato
  
  let bonusPoints = 0;

  // Bonus por velocidad (respuesta r√°pida < 30 segundos)
  if (responseTime && responseTime < 30) {
    bonusPoints += 5;
  }

  // Bonus extra por respuesta muy r√°pida (< 10 segundos)
  if (responseTime && responseTime < 10) {
    bonusPoints += 5;
  }

  return basePoints + bonusPoints;
}

/**
 * Genera mensaje de feedback inmediato para el usuario
 */
function generateImmediateFeedback(
  userStats: any, 
  iscorrect: boolean, 
  pointsEarned: number, 
  responseTime?: number
): string {
  const timestamp = new Date().toLocaleTimeString('es-ES');
  const correctIcon = iscorrect ? '‚úÖ' : '‚ùå';
  const resultText = iscorrect ? '¬°Correcto!' : 'Incorrecto';
  
  let message = `${correctIcon} <b>${resultText}</b>\n`;
  
  // Mostrar puntos ganados/perdidos
  if (pointsEarned >= 0) {
    message += `üéØ <b>+${pointsEarned} puntos</b> ganados\n`;
  } else {
    message += `üìâ <b>${pointsEarned} puntos</b> (puntos reales calculados con protecciones)\n`;
  }
  
  if (responseTime) {
    message += `‚è±Ô∏è Tiempo: ${responseTime}s`;
    if (responseTime < 10) {
      message += ' ‚ö° ¬°S√∫per r√°pido!';
    } else if (responseTime < 30) {
      message += ' üöÄ ¬°R√°pido!';
    }
    message += '\n';
  }
  
  message += `\nüìä <b>Estado actual:</b>\n`;
  message += `‚Ä¢ Total: <b>${userStats.totalpoints}</b> puntos\n`;
  message += `‚Ä¢ Nivel: <b>${userStats.level}</b>\n`;
  message += `‚Ä¢ Ranking: <b>#${userStats.rank}</b>\n`;
  message += `‚Ä¢ Racha: <b>${userStats.streak}</b> d√≠as\n`;
  message += `‚Ä¢ Precisi√≥n: <b>${userStats.accuracy}%</b>\n`;
  message += `\nüïê Actualizado: ${timestamp}`;
  
  return message;
}

// ============ INTERFAZ BOT PARA SUSCRIPCIONES ============

/**
 * Crear interfaz del bot para comandos de suscripci√≥n
 */
function createBotInterface(chatid: number) {
  return {
    async sendMessage(targetchatid: number, text: string, options?: any): Promise<any> {
      return await sendTelegramMessage(targetchatid, text);
    },
    async sendInvoice(targetchatid: number, invoiceData: any): Promise<any> {
      try {
        const response = await fetch(`https://api.telegram.org/bot${BOT_TOKEN}/sendInvoice`, {
          method: 'POST',
          headers: { 'Content-Type': 'application/json' },
          body: JSON.stringify({
            chat_id: targetchatid,
            ...invoiceData
          })
        });
        
        const result = await response.json();
        console.log('üìß Invoice enviada:', result.ok ? '‚úÖ Exitoso' : '‚ùå Fall√≥');
        return result;
      } catch (error) {
        console.error('‚ùå Error enviando invoice:', error);
        throw error;
      }
    }
  };
}

// ============ FUNCI√ìN PRINCIPAL ============

export async function POST(request: NextRequest) {
  try {
    const update: TelegramUpdate = await request.json();
    
    // üèÜ Inicializar sistema de torneos autom√°ticamente al recibir cualquier update
    initializeTournamentSystem();
    
    // FILTRAR HEALTH CHECKS ANTES DE LOGGING COMPLETO
    if (update && typeof update === 'object' && 'test' in update && update.test === 'health_check') {
      // Log m√≠nimo para health checks
      console.log(`üíì Health check: ${new Date().toLocaleTimeString()}`);
      return NextResponse.json({ status: 'ok', type: 'health_check' });
    }
    
    // LOGGING COMPLETO SOLO PARA UPDATES IMPORTANTES
    console.log('üîî ============ WEBHOOK UPDATE RECIBIDO ============');
    console.log('üìÖ Timestamp:', new Date().toISOString());
    console.log('üÜî Update ID:', update.update_id);
    console.log('üìä UPDATE COMPLETO (RAW JSON):', JSON.stringify(update, null, 2));
    console.log('üìã Tipo de update:', {
      hasMessage: !!update.message,
      hasPollAnswer: !!update.poll_answer,
      hasOther: !update.message && !update.poll_answer
    });
    
    // üí≥ MANEJAR PAGOS DE TELEGRAM PRIMERO (PRE-CHECKOUT Y PAGOS EXITOSOS)
    if (update.pre_checkout_query) {
      console.log('üí≥ ======== PRE-CHECKOUT QUERY DETECTADO ========');
      const preCheckout = update.pre_checkout_query;
      
      const isValid = await PaymentService.validatePreCheckout({
        id: preCheckout.id,
        from: preCheckout.from,
        currency: preCheckout.currency,
        total_amount: preCheckout.total_amount,
        invoice_payload: preCheckout.invoice_payload,
        shipping_option_id: preCheckout.shipping_option_id,
        order_info: preCheckout.order_info
      });

      // Responder a Telegram
      try {
        const response = await fetch(`https://api.telegram.org/bot${BOT_TOKEN}/answerPreCheckoutQuery`, {
          method: 'POST',
          headers: { 'Content-Type': 'application/json' },
          body: JSON.stringify({
            pre_checkout_query_id: preCheckout.id,
            ok: isValid,
            error_message: isValid ? undefined : 'Error validando el pago. Int√©ntalo de nuevo.'
          })
        });
        
        console.log('üì§ Pre-checkout query respondido:', isValid ? '‚úÖ Aprobado' : '‚ùå Rechazado');
      } catch (error) {
        console.error('‚ùå Error respondiendo pre-checkout query:', error);
      }

      return NextResponse.json({ ok: true, preCheckoutHandled: isValid });
    }

    // Si NO es poll_answer, mensaje, ni pre_checkout_query, mostrar debugging limitado
    if (!update.poll_answer && !update.message && !update.pre_checkout_query) {
      console.log('üîç DEBUGGING - Propiedades del update:');
      console.log('   - Object.keys(update):', Object.keys(update));
      console.log('   - Todas las propiedades:', update);
      console.log('‚ÑπÔ∏è  Update ignorado: sin mensaje, poll_answer ni pre_checkout_query');
      return NextResponse.json({ ok: true });
    }
    


    // Manejar respuestas de polls (SISTEMA PRINCIPAL + TORNEOS)
    if (update.poll_answer) {
      console.log('üó≥Ô∏è  ======== POLL ANSWER DETECTADO ========');
      console.log('üë§ Usuario que responde:', {
        telegramId: update.poll_answer.user.id,
        username: `@${update.poll_answer.user.username || 'SIN_USERNAME'}`,
        firstName: update.poll_answer.user.first_name,
        lastName: update.poll_answer.user.last_name || '',
        isBot: update.poll_answer.user.is_bot
      });
      console.log('üó≥Ô∏è  Poll details:', {
        pollid: update.poll_answer.poll_id,
        selectedOptions: update.poll_answer.option_ids,
        optionCount: update.poll_answer.option_ids.length
      });
      
      // üèÜ PASO 3: Intentar manejar con sistema de torneos primero
      const tournamentPollAnswer = {
        poll_id: update.poll_answer.poll_id,
        user: update.poll_answer.user,
        option_ids: update.poll_answer.option_ids
      };
      const handledByTournament = await TournamentService.getInstance().handleTournamentPollAnswer(tournamentPollAnswer);
      
      if (handledByTournament) {
        console.log('üèÜ Poll answer manejado por sistema de torneos');
        return NextResponse.json({ ok: true, handledBy: 'tournament' });
      }
      
      // Si no fue manejado por torneos, usar sistema normal
      console.log('üìã Poll answer manejado por sistema normal');
      return await handlePollAnswer(update.poll_answer);
    }

    // üÜï NUEVO: Manejar nuevos miembros del grupo
    if (update.message?.new_chat_members && update.message.new_chat_members.length > 0) {
      console.log('üëã ======== NUEVOS MIEMBROS DETECTADOS ========');
      return await handleNewChatMembers(update.message);
    }

    // üí∞ MANEJAR PAGOS EXITOSOS
    if (update.message?.successful_payment) {
      console.log('üí∞ ======== PAGO EXITOSO DETECTADO ========');
      const payment = update.message.successful_payment;
      const userid = update.message.from.id.toString();
      
      console.log('üí≥ Detalles del pago:', {
        userid,
        currency: payment.currency,
        totalAmount: payment.total_amount,
        payloadInfo: payment.invoice_payload?.substring(0, 50) + '...'
      });
      
      const success = await PaymentService.processSuccessfulPayment(userid, {
        currency: payment.currency,
        total_amount: payment.total_amount,
        invoice_payload: payment.invoice_payload,
        shipping_option_id: payment.shipping_option_id,
        order_info: payment.order_info,
        telegram_payment_charge_id: payment.telegram_payment_charge_id,
        provider_payment_charge_id: payment.provider_payment_charge_id
      });

      if (success) {
        console.log('‚úÖ Pago procesado exitosamente, suscripci√≥n activada');
        
        // Generar mensaje de confirmaci√≥n usando PaymentService
        const payloadParts = payment.invoice_payload.split('_');
        const planName = payloadParts[1] || 'premium';
        const confirmationMessage = PaymentService.generatePaymentConfirmation(planName, payment.total_amount);

        await sendTelegramMessage(update.message.chat.id, confirmationMessage);
      } else {
        console.log('‚ùå Error procesando pago exitoso');
        await sendTelegramMessage(update.message.chat.id, 
          '‚ùå Hubo un problema procesando tu pago. Contacta con soporte: @Carlos_esp'
        );
      }

      return NextResponse.json({ ok: true, paymentProcessed: success });
    }

    const message = update.message;
    
    if (!message) {
      console.log('‚ÑπÔ∏è  Update ignorado: sin mensaje');
      return NextResponse.json({ ok: true });
    }
    
    const user = message.from;
    
    // FILTRAR MENSAJES DEL BOT - No procesar sus propios mensajes
    if (user.is_bot) {
      console.log('ü§ñ Ignorando mensaje del bot:', user.first_name);
      return NextResponse.json({ ok: true, message: 'Mensaje del bot ignorado' });
    }
    
    console.log('üí¨ ======== MENSAJE RECIBIDO ========');
    console.log('üìù Detalles del mensaje:', {
      messageId: message.message_id,
      from: `${user.first_name} (@${user.username || 'sin_username'})`,
      text: message.text ? (message.text.length > 100 ? message.text.substring(0, 100) + '...' : message.text) : 'Sin texto',
      chat: message.chat.id,
      isBot: user.is_bot,
      isCommand: message.text?.startsWith('/') || false
    });

    // Manejar comandos del bot con sistema inteligente
    const commandResponse = await handleBotCommands(message);
    
    if (commandResponse === 'INTELLIGENT_SYSTEM_HANDLED') {
      // El sistema inteligente ya manej√≥ el env√≠o
      return NextResponse.json({ 
        ok: true, 
        type: 'command_handled',
        command: message.text,
        responseSent: true,
        intelligentSystem: true
      });
    }
    
    if (commandResponse) {
      // Comando tradicional (sin sistema inteligente)
      const sent = await sendTelegramMessage(message.chat.id, commandResponse);
      console.log(' Mensaje enviado:', sent ? '‚úÖ Exitoso' : '‚ùå Fall√≥');
      
      return NextResponse.json({ 
        ok: true, 
        type: 'command_handled',
        command: message.text,
        responseSent: sent,
        intelligentSystem: false
      });
    }

    // SISTEMA LEGACY: Verificar si es una respuesta a una pregunta (mantenemos para compatibilidad)
    if (!message.reply_to_message?.text) {
      console.log('‚ÑπÔ∏è  Mensaje ignorado: no es comando ni respuesta a pregunta');
      return NextResponse.json({ ok: true, message: 'No es una respuesta a pregunta' });
    }

    // Extraer informaci√≥n de la pregunta original
    const originalMessage = message.reply_to_message.text || '';
    const questionId = extractQuestionId(originalMessage);

    if (!questionId) {
      console.log('‚ö†Ô∏è  No se pudo extraer ID de pregunta del mensaje original');
      return NextResponse.json({ ok: true });
    }

    // Obtener la pregunta de la base de datos para verificar la respuesta
    // Aqu√≠ necesitar√≠as implementar la l√≥gica para obtener la pregunta
    // Por ahora, simularemos que todas las respuestas son correctas para testing
    const isCorrect = true; // TODO: Implementar verificaci√≥n real

    // Calcular tiempo de respuesta (en segundos)
    const responseTime = calculateResponseTime(
      message.reply_to_message?.date || message.date,
      message.date
    );

    console.log('üéÆ Procesando respuesta legacy:', {
      questionId,
      iscorrect: isCorrect,
      responsetime: responseTime,
      telegramuser: `${user.first_name} (@${user.username || 'sin_username'})`
    });

    // Procesar la respuesta con el sistema de gamificaci√≥n
    const userStats = await GamificationService.processUserResponse({
      telegramUserId: user.id.toString(),
      username: user.username,
      firstName: user.first_name,
      lastName: user.last_name,
      questionId: questionId,
      telegramMsgId: message.message_id.toString(),
      isCorrect: isCorrect,
      responseTime: responseTime
    });

    // Enviar respuesta de confirmaci√≥n al usuario
    const responseMessage = formatResponseMessage(userStats, isCorrect);
    
    // Generar mensaje de respuesta personalizado  
    console.log('üí¨ Sistema inteligente: procesando respuesta de quiz...');
    
    // Datos temporales para la respuesta legacy (sistema principal est√° en poll answers)
    const tempQuestionData = {
      questionid: questionId,
      correctanswerindex: 0,
      createdat: new Date(message.reply_to_message?.date || message.date),
      chatid: message.chat.id
    };
    
    // Usar sistema inteligente para enviar respuesta de quiz
    const quizResult = await NotificationService.sendIntelligentQuizResponse(
      userStats,
      isCorrect,
      tempQuestionData,
      {
        telegramUserId: user.id.toString(),
        firstName: user.first_name,
        username: user.username
      },
      message.chat.id.toString()
    );
    
    console.log('üì§ Resultado sistema inteligente quiz:', quizResult.method, '|', quizResult.message);

    console.log('‚úÖ Respuesta legacy procesada:', {
      telegramuser: user.username || user.first_name,
      questionId,
      iscorrect: isCorrect,
      responsetime: responseTime,
      newStats: userStats
    });

    return NextResponse.json({ 
      ok: true, 
      processed: true,
      userStats 
    });

  } catch (error) {
    console.error('‚ùå ============ ERROR EN WEBHOOK ============');
    console.error('üí• Error completo:', error);
    console.error('üìä Stack trace:', error instanceof Error ? error.stack : 'No stack trace');
    
    return NextResponse.json({ 
      ok: false, 
      error: 'Error interno del servidor' 
    }, { status: 500 });
  }
}

function formatResponseMessage(stats: any, iscorrect: boolean): string {
  const correctEmoji = iscorrect ? '‚úÖ' : '‚ùå';
  const levelEmoji = getLevelEmoji(stats.level);
  
  return `${correctEmoji} ${iscorrect ? 'Correcto' : 'Incorrecto'}!

üèÜ <b>Tus estad√≠sticas:</b>
üìä Puntos: ${stats.totalpoints}
${levelEmoji} Nivel: ${stats.level}
üî• Racha: ${stats.streak} d√≠as
üéØ Precisi√≥n: ${stats.accuracy}%
üìà Ranking: #${stats.rank}

${getMotivationalMessage(stats, iscorrect)}`;
}

function getLevelEmoji(level: number): string {
  if (level <= 2) return 'ü•â';
  if (level <= 5) return 'ü•à';
  if (level <= 10) return 'ü•á';
  return 'üíé';
}

function getMotivationalMessage(stats: any, iscorrect: boolean): string {
  const messages = {
    correct: [
      '¬°Excelente trabajo! üéâ',
      '¬°Sigue as√≠! üí™',
      '¬°Imparable! ‚ö°',
      '¬°Genial! üåü'
    ],
    incorrect: [
      '¬°No te rindas! La pr√≥xima ser√° mejor üí™',
      '¬°Cada error es una oportunidad de aprender! üìö',
      '¬°Sigue intentando! üéØ',
      '¬°La pr√°ctica hace al maestro! ‚≠ê'
    ]
  };

  const messageArray = iscorrect ? messages.correct : messages.incorrect;
  return messageArray[Math.floor(Math.random() * messageArray.length)];
}

// Funci√≥n para manejar comandos del bot con sistema inteligente
export async function handleBotCommands(message: any): Promise<string | null> {
  const text = message.text?.toLowerCase().trim();
  
  if (!text || !text.startsWith('/')) {
    return null;
  }

  const userid = message.from.id.toString();
  const isGroupChat = message.chat.type === 'group' || message.chat.type === 'supergroup';
  const originalCommand = message.text.trim();
  
  // Buscar el usuario en la base de datos para el sistema inteligente
  let telegramuser: { telegramUserId: string; firstname?: string } | null = null;
  try {
    const prismaUser = await prisma.telegramuser.findUnique({
      where: { telegramUserId: userid }
    });
    
    if (prismaUser) {
      telegramuser = {
        telegramUserId: prismaUser.telegramuserid,
        firstname: prismaUser.firstName || undefined
      };
    }
  } catch (error) {
    console.log('‚ö†Ô∏è Error buscando usuario para sistema inteligente:', error);
  }
  
  // Si no hay usuario, crear registro b√°sico
  if (!telegramuser) {
    telegramuser = {
      telegramUserId: userid,
      firstname: message.from.first_name || message.from.username || 'Usuario'
    };
  }
  
  // Extraer el comando base (primera palabra)
  const commandBase = text.split(' ')[0];
  
  let commandResponse: string | null = null;

  switch (commandBase) {
    case '/start':
      // Registrar usuario en la base de datos si no existe
      try {
        const existingUser = await prisma.telegramuser.findUnique({
          where: { telegramUserId: userid }
        });

        if (!existingUser) {
          // Crear nuevo usuario en la base de datos con puntos iniciales para duelos
          await prisma.telegramuser.create({
                          data: {
                id: generateId(),
                telegramUserId: userid,
                username: message.from.username,
                firstname: message.from.first_name,
              lastname: message.from.last_name,
              totalpoints: 25, // üéÅ Puntos iniciales para poder participar en duelos
              lastactivity: new Date()
            }
          });
          
          console.log('‚úÖ Nuevo usuario registrado en BD con puntos iniciales:', {
            telegramUserId: userid,
            username: message.from.username,
            firstname: message.from.first_name,
            initialPoints: 25
          });
        } else {
          console.log('‚ÑπÔ∏è Usuario ya existe en BD:', existingUser.username || existingUser.firstName);
        }
      } catch (error) {
        console.error('‚ùå Error registrando usuario en /start:', error);
      }

      return `üéâ <b>¬°BIENVENIDO A OPOMELILLA!</b> üéâ

¬°Hola! Te has registrado exitosamente.

üéÅ <b>REGALO DE BIENVENIDA:</b>
‚úÖ Has recibido 25 puntos iniciales
‚úÖ ¬°Ya puedes participar en duelos!

üéØ <b>¬øQU√â PUEDES HACER AHORA?</b>
üìä Responder preguntas para ganar puntos
üèÜ Competir en el ranking general
üî• Mantener rachas diarias de estudio
üó°Ô∏è Retar a duelos contra otros usuarios (¬°YA DISPONIBLE!)
üèÖ Desbloquear logros √∫nicos

‚ö° <b>CONFIGURACI√ìN COMPLETADA:</b>
‚úÖ Perfil creado y listo
‚úÖ Notificaciones privadas activadas
‚úÖ Sistema de puntos inicializado (25 pts)
‚úÖ ¬°Listo para participar en duelos!

üöÄ <b>PRIMEROS PASOS:</b>
‚Ä¢ Ve al grupo y responde algunas preguntas
‚Ä¢ Usa <code>/stats</code> para ver tu progreso
‚Ä¢ Usa <code>/ranking</code> para ver la competencia
‚Ä¢ Usa <code>/duelo @usuario</code> para retar a alguien (¬°ya puedes!)

üí° <b>TIP:</b> A partir de ahora recibir√°s notificaciones privadas detalladas en lugar de mensajes breves en el grupo.

¬°Buena suerte en tu preparaci√≥n para obtener tu plaza de PERMANENTE! üçÄ`;

    case '/ranking':
    case '/leaderboard':
      console.log('üèÜ RANKING COMMAND - Usuario solicit√≥ ranking:', {
        userid,
        username: message.from.username,
        firstName: message.from.first_name,
        timestamp: new Date().toISOString()
      });
      
      const leaderboard = await GamificationService.getLeaderboard(10);
      console.log('üèÜ RANKING RESULT - Datos obtenidos:', {
        totalUsers: leaderboard.length,
        toptelegramuser: leaderboard[0] ? {
          name: leaderboard[0].user.firstName || leaderboard[0].user.username,
          points: leaderboard[0].points
        } : 'No hay usuarios'
      });
      
      commandResponse = formatLeaderboard(leaderboard);
      break;

    case '/ranking_semanal':
      console.log('üìÖ RANKING_SEMANAL COMMAND - Usuario solicit√≥ ranking semanal:', {
        userid,
        username: message.from.username,
        firstName: message.from.first_name,
        timestamp: new Date().toISOString()
      });
      
      const weeklyLeaderboard = await GamificationService.getWeeklyLeaderboard(10);
      console.log('üìÖ RANKING_SEMANAL RESULT - Datos obtenidos:', {
        totalUsers: weeklyLeaderboard.length,
        toptelegramuser: weeklyLeaderboard[0] ? {
          name: weeklyLeaderboard[0].user.firstName || weeklyLeaderboard[0].user.username,
          points: weeklyLeaderboard[0].points
        } : 'No hay usuarios'
      });
      
      commandResponse = formatLeaderboard(weeklyLeaderboard, 'RANKING SEMANAL', 'semanal');
      break;

    case '/ranking_mensual':
      console.log('üìÖ RANKING_MENSUAL COMMAND - Usuario solicit√≥ ranking mensual:', {
        userid,
        username: message.from.username,
        firstName: message.from.first_name,
        timestamp: new Date().toISOString()
      });
      
      const monthlyLeaderboard = await GamificationService.getMonthlyLeaderboard(10);
      console.log('üìÖ RANKING_MENSUAL RESULT - Datos obtenidos:', {
        totalUsers: monthlyLeaderboard.length,
        toptelegramuser: monthlyLeaderboard[0] ? {
          name: monthlyLeaderboard[0].user.firstName || monthlyLeaderboard[0].user.username,
          points: monthlyLeaderboard[0].points
        } : 'No hay usuarios'
      });
      
      commandResponse = formatLeaderboard(monthlyLeaderboard, 'RANKING MENSUAL', 'mensual');
      break;

    case '/stats':
    case '/mi_stats':
      const userStats = await GamificationService.getUserStats(userid);
      if (!userStats) {
        commandResponse = '‚ùå No tienes estad√≠sticas a√∫n. ¬°Responde algunas preguntas para empezar!';
      } else {
        commandResponse = formatUserStats(userStats);
      }
      break;

    case '/miprogreso':
      console.log('üìä MIPROGRESO COMMAND - Ver progreso personal de graduaciones');
      return await handleMiProgresoCommand(userid, message.from);

    case '/estadisticas':
      console.log('üìà ESTADISTICAS COMMAND - Ver estad√≠sticas por materia');
      return await handleEstadisticasCommand(userid, message.from);

    case '/graduadas':
      console.log('üéì GRADUADAS COMMAND - Ver preguntas graduadas');
      return await handleGraduadasCommand(userid, message.from);

    case '/reiniciar_graduacion':
      console.log('üîÑ REINICIAR_GRADUACION COMMAND - Reset de graduaciones');
      return await handleReiniciarGraduacionCommand(userid, message.from);

    case '/reiniciar_graduacion_confirmar':
      console.log('‚úÖ REINICIAR_GRADUACION_CONFIRMAR COMMAND - Confirmar reset');
      return await handleReiniciarGraduacionConfirmarCommand(userid, message.from);

    case '/configurar_notificaciones':
      console.log('‚öôÔ∏è CONFIGURAR_NOTIFICACIONES COMMAND - Configurar sistema de notificaciones');
      return await handleConfigurarNotificacionesCommand(userid, message.from);

    // ==========================================
    // üîî COMANDOS ESPEC√çFICOS DE NOTIFICACIONES
    // ==========================================
    
    case '/notificaciones_graduacion':
      console.log('üéì NOTIFICACIONES_GRADUACION COMMAND - Configurar notificaciones de graduaci√≥n');
      return await handleNotificacionesGraduacionCommand(userid, message.from, message.text);

    case '/notificaciones_logros':
      console.log('üèÜ NOTIFICACIONES_LOGROS COMMAND - Configurar notificaciones de logros');
      return await handleNotificacionesLogrosCommand(userid, message.from, message.text);

    case '/notificaciones_recordatorios':
      console.log('‚è∞ NOTIFICACIONES_RECORDATORIOS COMMAND - Configurar recordatorios');
      return await handleNotificacionesRecordatoriosCommand(userid, message.from, message.text);

    case '/notificaciones_semanales':
      console.log('üìä NOTIFICACIONES_SEMANALES COMMAND - Configurar reportes semanales');
      return await handleNotificacionesSemanalesCommand(userid, message.from, message.text);

    case '/horario_notificaciones':
      console.log('üïê HORARIO_NOTIFICACIONES COMMAND - Configurar horario');
      return await handleHorarioNotificacionesCommand(userid, message.from, message.text);

    // ==========================================
    // üìä COMANDOS DE QUOTAS Y L√çMITES
    // ==========================================
    
    case '/mi_quota':
    case '/cuantas_me_quedan':
    case '/limite_diario':
      console.log('üìä MI_QUOTA COMMAND - Ver l√≠mites y uso actual');
      return await handleMiQuotaCommand(userid, message.from);

    case '/racha':
      const streakStats = await GamificationService.getUserStats(userid);
      if (!streakStats) {
        commandResponse = '‚ùå No tienes estad√≠sticas a√∫n. ¬°Responde algunas preguntas para empezar!';
      } else {
        commandResponse = formatStreakInfo(streakStats);
      }
      break;

    case '/logros':
    case '/achievements':
      const achievements = await getUserAchievements(userid);
      commandResponse = formatUserAchievements(achievements, userid);
      break;

    case '/prediccion':
    case '/prediction':
      const predictionStats = await GamificationService.getUserStats(userid);
      if (!predictionStats) {
        commandResponse = '‚ùå No tienes estad√≠sticas a√∫n. ¬°Responde algunas preguntas para empezar!';
      } else {
        commandResponse = formatLevelPrediction(predictionStats);
      }
      break;

    case '/metas':
    case '/goals':
      const userGoals = await getUserGoals(userid);
      commandResponse = formatUserGoals(userGoals, userid);
      break;

    case '/duelo':
    case '/duel':
      return await handleDuelCommand(message.text, userid, message.from, message.chat.id);

    case '/duelos':
    case '/duels':
      const userDuels = await DuelService.getUserDuels(userid);
      commandResponse = formatUserDuels(userDuels, userid);
      break;

    case '/aceptar':
    case '/accept':
      return await handleAcceptDuel(message.text, userid);

    case '/rechazar':
    case '/reject':
      return await handleRejectDuel(message.text, userid);

    case '/notificaciones':
    case '/notifications':
      commandResponse = formatNotificationHelp();
      break;

    case '/privadas':
    case '/private':
      commandResponse = formatPrivateMessageHelp();
      break;

    case '/test':
    case '/prueba':
      return await handleTestCommand(userid, message.from);

    case '/help':
      commandResponse = formatHelpMessage();
      break;

    case '/duelos':
      console.log('üìä DUELOS COMMAND - Ver duelos del usuario');
      commandResponse = await handleUserDuels(userid);
      break;

    case '/examen2018':
      console.log('üéØ EXAMEN2018 COMMAND - Pregunta espec√≠fica del examen oficial 2018');
      return await handleExamen2018Command(userid, message.from);

    case '/examen2018stats':
      console.log('üìä EXAMEN2018STATS COMMAND - Estad√≠sticas del examen oficial');
      return await handleExamen2018StatsCommand(userid, message.from);

    case '/examen2024':
      console.log('üéØ EXAMEN2024 COMMAND - Pregunta espec√≠fica del examen oficial 2024');
      return await handleExamen2024Command(userid, message.from);

    case '/examen2024stats':
      console.log('üìä EXAMEN2024STATS COMMAND - Estad√≠sticas del examen oficial 2024');
      return await handleExamen2024StatsCommand(userid, message.from);

    case '/simulacro':
      console.log('üéØ SIMULACRO COMMAND - Iniciar simulacro del examen oficial');
      return await handleSimulacroCommand(userid, message.from);

    case '/simulacro_continuar':
      console.log('‚ñ∂Ô∏è SIMULACRO_CONTINUAR COMMAND - Continuar simulacro en progreso');
      return await handleSimulacroResumeCommand(userid, message.from);

    case '/simulacro_abandonar':
      console.log('üö™ SIMULACRO_ABANDONAR COMMAND - Abandonar simulacro actual');
      return await handleSimulacroAbandonCommand(userid, message.from);

    case '/simulacro_historial':
      console.log('üìã SIMULACRO_HISTORIAL COMMAND - Ver historial de simulacros');
      return await handleSimulacroHistoryCommand(userid, message.from);

    case '/simulacro2024':
      console.log('üéØ SIMULACRO2024 COMMAND - Iniciar simulacro del examen oficial 2024');
      return await handleSimulacro2024Command(userid, message.from);

    case '/ranking_oficial2018':
      console.log('üèÜ RANKING_OFICIAL2018 COMMAND - Ranking espec√≠fico del examen 2018');
      return await handleRankingOficial2018Command(userid, message.from);

    case '/ranking_oficial2024':
      console.log('üèÜ RANKING_OFICIAL2024 COMMAND - Ranking espec√≠fico del examen 2024');
      return await handleRankingOficial2024Command(userid, message.from);

    case '/comparativa_examenes':
      console.log('üìä COMPARATIVA_EXAMENES COMMAND - Comparativa personal entre ex√°menes');
      return await handleComparativaExamenesCommand(userid, message.from);

    case '/simulacro_oficial':
      console.log('üéØ SIMULACRO_OFICIAL COMMAND - Selector de simulacro oficial');
      return await handleSimulacroOficialCommand(userid, message.from);

    case '/torneo':
    case '/tournament':
      console.log('üèÜ TORNEO COMMAND - Gesti√≥n de torneos');
      return await handleTorneoCommand(userid, message.from, message.text);

    case '/torneos':
    case '/tournaments':
      console.log('üèÜ TORNEOS COMMAND - Ver torneos disponibles');
      return await handleTorneosListCommand(userid, message.from);

    case '/torneo_unirse':
      console.log('‚úÖ TORNEO_UNIRSE COMMAND - Unirse a torneo');
      return await handleTorneoJoinCommand(userid, message.from, message.text);

    case '/torneo_salir':
      console.log('‚ùå TORNEO_SALIR COMMAND - Salir de torneo');
      return await handleTorneoLeaveCommand(userid, message.from, message.text);

    case '/torneo_historial':
      console.log('üìä TORNEO_HISTORIAL COMMAND - Historial de torneos');
      return await handleTorneoHistoryCommand(userid, message.from);

    // ==========================================
    // üí∞ COMANDOS DE SUSCRIPCIONES Y PAGOS - ESPA√ëA
    // ==========================================
    
    case '/planes':
      console.log('üí∞ PLANES COMMAND - Ver planes de suscripci√≥n disponibles');
      await SubscriptionCommands.handlePlanesCommand(message, createBotInterface(message.chat.id));
      return 'INTELLIGENT_SYSTEM_HANDLED';

    case '/basico':
      console.log('ü•â BASICO COMMAND - Suscribirse al plan B√°sico');
      await SubscriptionCommands.handleBasicoCommand(message, createBotInterface(message.chat.id));
      return 'INTELLIGENT_SYSTEM_HANDLED';

    case '/premium':
      console.log('ü•à PREMIUM COMMAND - Suscribirse al plan Premium');
      await SubscriptionCommands.handlePremiumCommand(message, createBotInterface(message.chat.id));
      return 'INTELLIGENT_SYSTEM_HANDLED';

    case '/mi_plan':
      console.log('üë§ MI_PLAN COMMAND - Ver estado de suscripci√≥n actual');
      await SubscriptionCommands.handleMiPlanCommand(message, createBotInterface(message.chat.id));
      return 'INTELLIGENT_SYSTEM_HANDLED';

    case '/cancelar':
      console.log('üö´ CANCELAR COMMAND - Proceso de cancelaci√≥n de suscripci√≥n');
      await SubscriptionCommands.handleCancelarCommand(message, createBotInterface(message.chat.id));
      return 'INTELLIGENT_SYSTEM_HANDLED';

    case '/facturas':
      console.log('üìÑ FACTURAS COMMAND - Ver historial de transacciones');
      await SubscriptionCommands.handleFacturasCommand(message, createBotInterface(message.chat.id));
      return 'INTELLIGENT_SYSTEM_HANDLED';

    // ==========================================
    // üíé COMANDOS AVANZADOS DE SUSCRIPCI√ìN (FASE 2)
    // ==========================================
    
    case '/renovar':
      console.log('üîÑ RENOVAR COMMAND - Renovaci√≥n manual de suscripci√≥n');
      const { handleRenovarCommand } = await import('@/services/advancedSubscriptionCommands');
      return await handleRenovarCommand(userid, message.from);

    case '/cambiar_plan':
      console.log('üîÑ CAMBIAR_PLAN COMMAND - Upgrade/downgrade entre planes');
      const { handleCambiarPlanCommand } = await import('@/services/advancedSubscriptionCommands');
      return await handleCambiarPlanCommand(userid, message.from);

    // ==========================================
    // üéñÔ∏è COMANDOS DE SIMULACROS MILITARES PREMIUM (FASE 3)
    // ==========================================
    
    case '/simulacro_premium_et':
      console.log('üéñÔ∏è SIMULACRO_PREMIUM_ET COMMAND - Simulacro Ej√©rcito de Tierra Premium');
      const { handleSimulacroEjercitoTierraCommand } = await import('@/services/militarySimulationCommands');
      return await handleSimulacroEjercitoTierraCommand(userid, message.from);

    case '/simulacro_premium_aire':
      console.log('‚úàÔ∏è SIMULACRO_PREMIUM_AIRE COMMAND - Simulacro Ej√©rcito del Aire Premium');
      const { handleSimulacroEjercitoAireCommand } = await import('@/services/militarySimulationCommands');
      return await handleSimulacroEjercitoAireCommand(userid, message.from);

    case '/simulacro_premium_armada':
      console.log('‚öì SIMULACRO_PREMIUM_ARMADA COMMAND - Simulacro Armada Premium');
      const { handleSimulacroArmadaCommand } = await import('@/services/militarySimulationCommands');
      return await handleSimulacroArmadaCommand(userid, message.from);

    case '/simulacros_premium':
      console.log('üéñÔ∏è SIMULACROS_PREMIUM COMMAND - Informaci√≥n de simulacros militares');
      const { handleSimulacrosPremiumInfoCommand } = await import('@/services/militarySimulationCommands');
      return await handleSimulacrosPremiumInfoCommand(userid, message.from);

    // ==========================================
    // üéì COMANDOS DE INTEGRACI√ìN MOODLE (FASE 4)
    // ==========================================
    
    case '/vincular_moodle':
      console.log('üîó VINCULAR_MOODLE COMMAND - Generar c√≥digo de verificaci√≥n');
      const { handleVincularMoodleCommand } = await import('@/services/moodleGamificationCommands');
      return await handleVincularMoodleCommand(userid, message.from);

    case '/estado_moodle':
      console.log('üìä ESTADO_MOODLE COMMAND - Ver estado de vinculaci√≥n');
      const { handleEstadoMoodleCommand } = await import('@/services/moodleGamificationCommands');
      return await handleEstadoMoodleCommand(userid, message.from);

    case '/estadisticas_unificadas':
      console.log('üìà ESTADISTICAS_UNIFICADAS COMMAND - Ver estad√≠sticas Premium unificadas');
      const { handleEstadisticasUnificadasCommand } = await import('@/services/moodleGamificationCommands');
      return await handleEstadisticasUnificadasCommand(userid, message.from);

    case '/codigo_moodle':
      console.log('üîë CODIGO_MOODLE COMMAND - Introducir c√≥digo generado en Moodle');
      const commandParts = message.text.trim().split(' ');
      const moodleCode = commandParts[1];
      
      if (!moodleCode) {
        return `‚ùå **Uso incorrecto del comando**

**üìã Formato correcto:**
\`/codigo_moodle ABC123\`

**üîç D√≥nde encontrar el c√≥digo:**
1. Ve a opomelilla.com
2. Accede a: Perfil ‚Üí Preferencias ‚Üí Integraci√≥n con Telegram   
3. Haz clic en "Generar c√≥digo"
4. Copia el c√≥digo de 6 caracteres
5. √ösalo aqu√≠: \`/codigo_moodle TU_CODIGO\`

üí° Los c√≥digos expiran en 15 minutos.`;
      }
      
      const { handleCodigoMoodleCommand } = await import('@/services/moodleGamificationCommands');
      return await handleCodigoMoodleCommand(userid, moodleCode, message.from);

    case '/sincronizar_moodle':
      console.log('üîÑ SINCRONIZAR_MOODLE COMMAND - Sincronizaci√≥n manual de actividades');
      const { handleSincronizarMoodleCommand } = await import('@/services/moodleGamificationCommands');
      return await handleSincronizarMoodleCommand(userid, message.from);

    // ==========================================
    // üéØ COMANDOS DE SESIONES DE ESTUDIO PRIVADAS
    // ==========================================
    
    case '/stop':
      console.log('üõë STOP COMMAND - Cancelar sesi√≥n de estudio');
      return await handleStopStudySession(userid, message);

    case '/progreso':
      console.log('üìä PROGRESO COMMAND - Ver progreso de sesi√≥n de estudio');
      return await handleStudyProgress(userid, message);

    // ========================================
    // üéØ DETECTAR COMANDOS DE ESTUDIO (incluyendo /falladas)
    // ========================================
    default:
      const studyCommand = StudySessionService.parseStudyCommand(commandBase);
      if (studyCommand) {
        console.log(`üéØ STUDY COMMAND - Materia: ${studyCommand.subject}, Cantidad: ${studyCommand.quantity}, Tipo: ${studyCommand.type || 'normal'}`);
        return await handleStudyCommand(userid, message, studyCommand);
      }
      
      return null;
  }
  
  // Si no hay respuesta, salir
  if (!commandResponse) {
    return null;
  }
  
  console.log(`üìß COMANDO INTELIGENTE: ${originalCommand} | Usuario: ${telegramuser?.firstName || 'Usuario'} | Grupo: ${isGroupChat}`);
  
  // Usar el sistema inteligente para enviar la respuesta
  try {
    const userForNotification = {
      telegramUserId: telegramuser!.telegramuserid,
      firstName: telegramuser!.firstName
    };
    
    const result = await NotificationService.sendIntelligentCommandResponse(
      originalCommand,
      commandResponse,
      userForNotification,
      message.chat.id.toString(),
      isGroupChat
    );
    
    console.log(`üì® RESULTADO INTELIGENTE: ${result.method} | Success: ${result.success} | ${result.message}`);
    
    // Si el sistema inteligente manej√≥ el env√≠o, devolver indicador especial
    if (result.success) {
      return 'INTELLIGENT_SYSTEM_HANDLED';
    }
    
    // Si fall√≥ todo, devolver la respuesta normal como fallback
    return commandResponse;
    
  } catch (error) {
    console.log('‚ö†Ô∏è Error en sistema inteligente, usando fallback normal:', error);
    return commandResponse;
  }
}

function formatLeaderboard(leaderboard: any[], title: string = 'RANKING GENERAL', type: string = 'general'): string {
  const timestamp = new Date().toLocaleTimeString('es-ES', {
    hour: '2-digit',
    minute: '2-digit',
    second: '2-digit'
  });
  const date = new Date().toLocaleDateString('es-ES');
  
  let message = `üèÜ <b>${title}</b> üèÜ\n`;
  message += `üìÖ ${date} - üïê ${timestamp}\n\n`;
  
  if (leaderboard.length === 0) {
    message += 'üìä <i>No hay usuarios registrados a√∫n</i>\n\n';
    message += 'üí° <b>¬°S√© el primero!</b>\n';
    message += 'Responde preguntas para aparecer en el ranking.';
    return message;
  }
  
  leaderboard.forEach((entry, index) => {
    const medal = index === 0 ? 'ü•á' : index === 1 ? 'ü•à' : index === 2 ? 'ü•â' : 'üî∏';
    const name = entry.user.username || entry.user.firstName || 'Usuario';
    
    message += `${medal} <b>${entry.rank}.</b> ${name}\n`;
    message += `   üìä ${entry.points} pts | ${getLevelEmoji(entry.level)} Nv.${entry.level} | üî• ${entry.streak}\n\n`;
  });

  // Mensaje motivacional personalizado seg√∫n el tipo
  if (type === 'semanal') {
    message += `\nüí° <b>TIP:</b> üìÖ ¬°Sigue as√≠ esta semana para mantener tu posici√≥n!`;
  } else if (type === 'mensual') {
    message += `\nüí° <b>TIP:</b> üìÖ ¬°Contin√∫a estudiando para dominar este mes!`;
  } else {
    message += `\nüí° <b>TIP:</b> Usa /stats para ver tus estad√≠sticas detalladas`;
  }
  
  return message;
}
  
// Funci√≥n para formatear estad√≠sticas del usuario
function formatUserStats(telegramuser: any): string {
  const winRate = telegramuser.totalDuels > 0 ? Math.round((telegramuser.wonDuels / telegramuser.totalDuels) * 100) : 0;
  
  return `üìä <b>TUS ESTAD√çSTICAS</b> üìä

üë§ <b>${telegramuser.firstName || telegramuser.username || 'Usuario'}</b>

üó°Ô∏è <b>DUELOS:</b>
   üìà Total disputados: ${telegramuser.totalDuels || 0}
   üèÜ Ganados: ${telegramuser.wonDuels || 0}
   üòî Perdidos: ${telegramuser.lostDuels || 0}
   üìä Porcentaje victoria: ${winRate}%
   üî• Racha actual: ${telegramuser.currentStreak || 0}

üí∞ <b>PUNTOS:</b>
   üíé Total: ${telegramuser.totalpoints || 0}
   üìä Nivel: ${telegramuser.level || 1}
   ‚ö° Racha respuestas: ${telegramuser.streak || 0}
   üèÖ Mejor racha: ${telegramuser.beststreak || 0}

üéØ <b>ACTIVIDAD:</b>
   üìÖ Se uni√≥: ${telegramuser.joinedAt ? new Date(telegramuser.joinedAt).toLocaleDateString() : 'N/A'}
   üïê √öltima actividad: ${telegramuser.lastActivity ? new Date(telegramuser.lastActivity).toLocaleDateString() : 'N/A'}

üéÆ <b>ACCIONES DISPONIBLES:</b>
‚Ä¢ <code>/duelo @usuario</code> - Retar a duelo
‚Ä¢ <code>/duelos</code> - Ver tus duelos
‚Ä¢ <code>/ranking</code> - Ver clasificaci√≥n general

‚öîÔ∏è <b>¬øListo para m√°s duelos?</b>`;
}

function formatStreakInfo(stats: any): string {
  const streakEmoji = stats.streak >= 7 ? 'üî•üî•üî•' : stats.streak >= 3 ? 'üî•üî•' : 'üî•';
  
  return `${streakEmoji} <b>INFORMACI√ìN DE RACHA</b> ${streakEmoji}

üî• Racha actual: <b>${stats.streak} d√≠as</b>
üèÖ Mejor racha: <b>${stats.beststreak} d√≠as</b>
üìÖ √öltima actividad: ${stats.lastActivity ? new Date(stats.lastActivity).toLocaleDateString() : 'Hoy'}

${getStreakMotivation(stats.streak)}`;
}

function formatHelpMessage(): string {
  return `ü§ñ <b>AYUDA - OPOSITIA BOT</b> ü§ñ

üìö <b>COMANDOS B√ÅSICOS:</b>
‚Ä¢ <code>/help</code> - Ver esta ayuda
‚Ä¢ <code>/stats</code> - Ver tus estad√≠sticas

üèÜ <b>SISTEMA DE TORNEOS:</b>
‚Ä¢ <code>/torneo</code> - Ver y unirse a torneos disponibles
‚Ä¢ <code>/torneos</code> - Lista completa de torneos
‚Ä¢ <code>/torneo_unirse [n√∫mero]</code> - Unirse a un torneo espec√≠fico
‚Ä¢ <code>/torneo_salir</code> - Salir del torneo actual
‚Ä¢ <code>/torneo_historial</code> - Ver tu historial de torneos
‚Ä¢ <code>/racha</code> - Informaci√≥n de tu racha

üéØ <b>EX√ÅMENES OFICIALES:</b>
‚Ä¢ <code>/examen2018</code> - Pregunta del examen 2018
‚Ä¢ <code>/examen2024</code> - Pregunta del examen 2024
‚Ä¢ <code>/examen2018stats</code> - Estad√≠sticas del examen 2018
‚Ä¢ <code>/examen2024stats</code> - Estad√≠sticas del examen 2024

üèÜ <b>RANKINGS ESPEC√çFICOS:</b>
‚Ä¢ <code>/ranking</code> - Ver el ranking general
‚Ä¢ <code>/ranking_semanal</code> - Ranking de la semana actual  
‚Ä¢ <code>/ranking_mensual</code> - Ranking del mes actual
‚Ä¢ <code>/ranking_oficial2018</code> - Ranking del examen 2018
‚Ä¢ <code>/ranking_oficial2024</code> - Ranking del examen 2024
‚Ä¢ <code>/comparativa_examenes</code> - Comparar tu rendimiento

üéÆ <b>SIMULACROS:</b>
‚Ä¢ <code>/simulacro_oficial</code> - Selector de simulacros
‚Ä¢ <code>/simulacro</code> - Simulacro examen 2018
‚Ä¢ <code>/simulacro2024</code> - Simulacro examen 2024
‚Ä¢ <code>/simulacro_continuar</code> - Continuar simulacro
‚Ä¢ <code>/simulacro_abandonar</code> - Abandonar simulacro
‚Ä¢ <code>/simulacro_historial</code> - Ver historial

‚öîÔ∏è <b>DUELOS:</b>
‚Ä¢ <code>/duelo @usuario</code> - Retar a duelo
‚Ä¢ <code>/duelos</code> - Ver tus duelos
‚Ä¢ <code>/aceptar</code> - Aceptar duelo pendiente
‚Ä¢ <code>/rechazar</code> - Rechazar duelo pendiente

üéØ <b>METAS Y LOGROS:</b>
‚Ä¢ <code>/metas</code> - Ver tus objetivos
‚Ä¢ <code>/logros</code> - Ver tus logros
‚Ä¢ <code>/prediccion</code> - Predicci√≥n de nivel

üìä <b>ESTAD√çSTICAS DE ESTUDIO:</b>
‚Ä¢ <code>/miprogreso</code> - Ver preguntas graduadas
‚Ä¢ <code>/estadisticas</code> - Precisi√≥n por materia
‚Ä¢ <code>/graduadas</code> - Lista de preguntas graduadas
‚Ä¢ <code>/reiniciar_graduacion</code> - Reset para repaso intensivo

üîî <b>CONFIGURACI√ìN:</b>
‚Ä¢ <code>/configurar_notificaciones</code> - Configurar alertas y recordatorios

üìß <b>NOTIFICACIONES:</b>
‚Ä¢ <code>/notificaciones</code> - Configurar notificaciones
‚Ä¢ <code>/privadas</code> - Configurar mensajes privados

üí∞ <b>SUSCRIPCIONES PREMIUM:</b>
‚Ä¢ <code>/planes</code> - Ver planes disponibles (B√°sico ‚Ç¨4.99, Premium ‚Ç¨9.99)
‚Ä¢ <code>/basico</code> - Suscribirse al plan B√°sico
‚Ä¢ <code>/premium</code> - Suscribirse al plan Premium
‚Ä¢ <code>/mi_plan</code> - Ver tu suscripci√≥n actual
‚Ä¢ <code>/cancelar</code> - Cancelar suscripci√≥n
‚Ä¢ <code>/facturas</code> - Ver historial de pagos

üá™üá∏ <b>PAGO SEGURO ESPA√ëA:</b>
‚úÖ Telegram Payments (Visa, Mastercard)
‚úÖ Pr√≥ximamente: Bizum + Redsys
‚úÖ Facturaci√≥n con IVA incluido

üí° <b>¬°Responde las preguntas para ganar puntos y subir de nivel!</b>
üèÜ Compite con otros usuarios en el ranking
üìà Mant√©n tu racha diaria para obtener bonificaciones
üíé <b>¬°Hazte Premium para funciones avanzadas!</b>`;
}

function formatNotificationHelp(): string {
  return `üì¨ <b>CONFIGURAR NOTIFICACIONES</b> üì¨

üîî <b>¬øC√ìMO FUNCIONA?</b>
El bot puede enviarte notificaciones de dos formas:

‚úÖ <b>PRIVADAS (RECOMENDADO)</b>
‚Ä¢ Mensajes detallados solo para ti
‚Ä¢ Incluyen botones y comandos
‚Ä¢ No molestan al grupo
‚Ä¢ M√°s informaci√≥n y opciones

üì¢ <b>EN GRUPO (FALLBACK)</b>
‚Ä¢ Mensajes muy breves en el grupo
‚Ä¢ Solo cuando falla la privada
‚Ä¢ M√°ximo 50 caracteres

üîß <b>C√ìMO CONFIGURAR PRIVADAS:</b>
1. Haz clic aqu√≠: @OpoMelillaBot
2. Env√≠a <code>/start</code> al bot
3. ¬°Configurado! Ya recibir√°s notificaciones privadas

üí° <b>¬øQU√â NOTIFICACIONES RECIBES?</b>
üó°Ô∏è Duelos recibidos
üèÖ Logros desbloqueados
üéØ Metas completadas
üìä Actualizaciones importantes

‚ö° <b>¬°Es s√∫per f√°cil!</b> Solo tienes que hablar una vez con el bot privadamente.`;
}

function formatPrivateMessageHelp(): string {
  return `üí¨ <b>MENSAJES PRIVADOS CON EL BOT</b> üí¨

ü§î <b>¬øNO SABES C√ìMO HABLAR CON UN BOT PRIVADAMENTE?</b>
¬°No te preocupes! Te explicamos paso a paso:

üì± <b>M√âTODO 1: DESDE TELEGRAM</b>
1. Abre Telegram
2. Toca en el √≠cono de b√∫squeda üîç
3. Escribe: <code>@OpoMelillaBot</code>
4. Selecciona el bot de la lista
5. Env√≠a <code>/start</code>
6. ¬°Listo! üéâ

üîó <b>M√âTODO 2: DESDE EL GRUPO</b>
1. Toca el nombre del bot: @OpoMelillaBot
2. Esto abrir√° su perfil
3. Toca "Enviar mensaje"
4. Env√≠a <code>/start</code>
5. ¬°Configurado! ‚úÖ

üéØ <b>BENEFICIOS DE LOS MENSAJES PRIVADOS:</b>
‚Ä¢ Notificaciones detalladas de duelos
‚Ä¢ Informaci√≥n completa de logros
‚Ä¢ No spam en el grupo principal
‚Ä¢ Comandos y botones interactivos
‚Ä¢ Configuraci√≥n personalizada

‚ùì <b>¬øDUDAS?</b>
¬°Es exactamente igual que chatear con un amigo, pero el amigo es un robot! ü§ñ

üí™ Una vez que lo pruebes, ¬°ver√°s que es s√∫per f√°cil!`;
}

function getProgressMessage(stats: any): string {
  const nextLevelPoints = GamificationService.calculateLevel(stats.totalpoints + 1) > stats.level ? 
    getPointsForLevel(stats.level + 1) - stats.totalpoints : 0;
  
  if (nextLevelPoints > 0) {
    return `üéØ Te faltan ${nextLevelPoints} puntos para el siguiente nivel!`;
  }
  
  return 'üåü ¬°Has alcanzado un nivel alto! ¬°Sigue as√≠!';
}

function getPointsForLevel(level: number): number {
  const levelThresholds = [0, 100, 300, 600, 1000, 1500, 2100, 2800, 3600, 4500, 5500];
  if (level <= 10) {
    return levelThresholds[level] || 5500 + (level - 10) * 1000;
  }
  return 5500 + (level - 10) * 1000;
}

function getStreakMotivation(streak: number): string {
  if (streak === 0) {
    return 'üí™ ¬°Empieza tu racha respondiendo una pregunta hoy!';
  } else if (streak < 3) {
    return 'üéØ ¬°Sigue as√≠! Cada d√≠a cuenta para tu racha.';
  } else if (streak < 7) {
    return 'üî• ¬°Excelente! Est√°s construyendo una gran racha.';
  } else if (streak < 30) {
    return 'üåü ¬°Incre√≠ble! Tu dedicaci√≥n es admirable.';
  } else {
    return 'üëë ¬°LEYENDA! Tu racha es √©pica. ¬°Eres imparable!';
  }
}

// Funci√≥n para obtener logros del usuario
async function getUserAchievements(telegramUserId: string) {
  try {
    const userAchievements = await prisma.userachievement.findMany({
      where: {
        userid: telegramuserid
      },
      orderBy: {
        unlockedat: 'desc'
      }
    });
    
    return userAchievements;
  } catch (error) {
    console.error('Error obteniendo logros del usuario:', error);
    return [];
  }
}

// Funci√≥n para formatear los logros del usuario
function formatUserAchievements(achievements: any[], userid: string): string {
  if (achievements.length === 0) {
    return `üèÜ <b>TUS LOGROS</b> üèÜ

‚ùå A√∫n no has desbloqueado ning√∫n logro.

üí° <b>C√ìMO OBTENER LOGROS:</b>
üéØ Responde preguntas para ganar puntos
üî• Mant√©n rachas diarias 
‚ö° Responde r√°pidamente
üéØ Mejora tu precisi√≥n

¬°Empieza respondiendo preguntas! üöÄ`;
  }

  let message = `üèÜ <b>TUS LOGROS</b> üèÜ\n\n`;
  message += `üéñÔ∏è <b>Tienes ${achievements.length} logro${achievements.length === 1 ? '' : 's'} desbloqueado${achievements.length === 1 ? '' : 's'}:</b>\n\n`;
  
  achievements.forEach((userAchievement, index) => {
    const achievement = userAchievement.achievement;
    const rarityEmoji = getRarityEmoji(achievement.rarity);
    const date = new Date(userAchievement.unlockedat).toLocaleDateString();
    
    message += `${achievement.icon} <b>${achievement.name}</b> ${rarityEmoji}\n`;
    message += `   ${achievement.description}\n`;
    message += `   üí∞ +${achievement.points} pts | üìÖ ${date}\n\n`;
  });
  
  // Calcular puntos totales de logros
  const totalAchievementPoints = achievements.reduce((sum, ua) => sum + ua.achievement.points, 0);
  message += `üíé <b>Puntos totales por logros:</b> ${totalAchievementPoints}\n\n`;
  
  message += `üéØ <b>¬°Sigue jugando para desbloquear m√°s logros!</b>`;
  
  return message;
}

// Funci√≥n para obtener emoji de rareza
function getRarityEmoji(rarity: string): string {
  switch (rarity.toLowerCase()) {
    case 'common': return '‚ö™';
    case 'uncommon': return 'üü¢';
    case 'rare': return 'üîµ';
    case 'epic': return 'üü£';
    case 'legendary': return 'üü°';
    default: return '‚≠ê';
  }
}

// Funci√≥n para formatear predicci√≥n de nivel
function formatLevelPrediction(stats: any): string {
  const currentLevel = stats.level;
  const currentPoints = stats.totalpoints;
  const nextLevel = currentLevel + 1;
  
  // Calcular puntos necesarios para el siguiente nivel
  const pointsForNextLevel = getPointsForLevel(nextLevel);
  const pointsNeeded = pointsForNextLevel - currentPoints;
  
  // Calcular puntos para el nivel despu√©s del siguiente
  const levelAfterNext = nextLevel + 1;
  const pointsForLevelAfterNext = getPointsForLevel(levelAfterNext);
  const pointsNeededForLevelAfterNext = pointsForLevelAfterNext - currentPoints;
  
  // Calcular progreso actual
  const pointsForCurrentLevel = currentLevel === 1 ? 0 : getPointsForLevel(currentLevel);
  const progressInCurrentLevel = currentPoints - pointsForCurrentLevel;
  const totalPointsForNextLevel = pointsForNextLevel - pointsForCurrentLevel;
  const progressPercentage = Math.max(0, Math.min(100, Math.round((progressInCurrentLevel / totalPointsForNextLevel) * 100)));
  
  // Calcular preguntas necesarias (promedio de 15 puntos por pregunta correcta)
  const avgPointsPerQuestion = 15;
  const questionsNeeded = Math.max(1, Math.ceil(pointsNeeded / avgPointsPerQuestion));
  
  // Estimaci√≥n de tiempo basada en actividad (asumiendo 1 pregunta por d√≠a)
  const daysEstimated = questionsNeeded;
  
  // Calcular barra de progreso de forma segura
  const progressBars = Math.max(0, Math.min(10, Math.floor(progressPercentage / 10)));
  const emptyBars = Math.max(0, 10 - progressBars);
  
  return `üîÆ <b>PREDICCI√ìN DE NIVEL</b> üîÆ

${getLevelEmoji(currentLevel)} <b>Nivel actual:</b> ${currentLevel}
üìä <b>Puntos actuales:</b> ${currentPoints}

üéØ <b>PR√ìXIMO NIVEL (${nextLevel}):</b>
‚Ä¢ üéØ Puntos necesarios: <b>${Math.max(0, pointsNeeded)}</b>
‚Ä¢ üìù Preguntas estimadas: <b>~${questionsNeeded}</b>
‚Ä¢ ‚è∞ Tiempo estimado: <b>~${daysEstimated} d√≠as</b>
‚Ä¢ üìà Progreso: <b>${progressPercentage}%</b>

${'‚ñà'.repeat(progressBars)}${'‚ñë'.repeat(emptyBars)} ${progressPercentage}%

üöÄ <b>NIVEL ${levelAfterNext}:</b>
‚Ä¢ üéØ Puntos necesarios: <b>${Math.max(0, pointsNeededForLevelAfterNext)}</b>
‚Ä¢ üìù Preguntas estimadas: <b>~${Math.ceil(Math.max(0, pointsNeededForLevelAfterNext) / avgPointsPerQuestion)}</b>

üí° <b>CONSEJOS PARA SUBIR M√ÅS R√ÅPIDO:</b>
‚Ä¢ ‚ö° Responde r√°pido (+5-10 pts extra)
‚Ä¢ üî• Mant√©n tu racha diaria
‚Ä¢ üéØ Mejora tu precisi√≥n
‚Ä¢ üèÜ Desbloquea logros (+pts bonus)

${getLevelPredictionMotivation(Math.max(0, pointsNeeded), questionsNeeded)}`;
}

// Funci√≥n para obtener mensaje motivacional de predicci√≥n
function getLevelPredictionMotivation(pointsNeeded: number, questionsNeeded: number): string {
  if (pointsNeeded <= 50) {
    return 'üî• ¬°Est√°s s√∫per cerca! ¬°Solo unas pocas preguntas m√°s!';
  } else if (pointsNeeded <= 100) {
    return 'üí™ ¬°Casi ah√≠! Con un poco de esfuerzo llegar√°s pronto.';
  } else if (questionsNeeded <= 10) {
    return 'üéØ ¬°El siguiente nivel est√° al alcance! ¬°Sigue as√≠!';
  } else if (questionsNeeded <= 20) {
    return 'üåü Con constancia, pronto subir√°s de nivel. ¬°T√∫ puedes!';
  } else {
    return 'üöÄ El camino es largo pero cada pregunta te acerca. ¬°No te rindas!';
  }
}

// Funci√≥n para obtener metas del usuario
async function getUserGoals(telegramUserId: string) {
  try {
    const userGoals = await prisma.usergoal.findMany({
      where: {
        userid: telegramuserid
      },
      orderBy: [
        { completed: 'asc' },
        { deadline: 'asc' }
      ]
    });
    
    return userGoals;
  } catch (error) {
    console.error('Error obteniendo metas del usuario:', error);
    return [];
  }
}

// Funci√≥n para formatear las metas del usuario
function formatUserGoals(goals: any[], userid: string): string {
  const activeGoals = goals.filter(g => !g.completed);
  const completedGoals = goals.filter(g => g.completed);
  
  if (goals.length === 0) {
    return `üéØ <b>TUS METAS</b> üéØ

‚ùå No tienes metas establecidas a√∫n.

üí° <b>¬øQU√â SON LAS METAS?</b>
Las metas te ayudan a enfocarte en objetivos espec√≠ficos y ganar recompensas extra.

üéØ <b>EJEMPLOS DE METAS:</b>
‚Ä¢ üìä Ganar 200 puntos esta semana
‚Ä¢ üî• Mantener racha de 5 d√≠as
‚Ä¢ üìù Responder 20 preguntas este mes
‚Ä¢ üéØ Alcanzar 95% de precisi√≥n

üöÄ <b>PR√ìXIMAMENTE:</b>
¬°Podr√°s crear tus propias metas personalizadas!

¬°Mientras tanto, sigue respondiendo preguntas! üí™`;
  }

  let message = `üéØ <b>TUS METAS</b> üéØ\n\n`;

  // Metas activas
  if (activeGoals.length > 0) {
    message += `üîÑ <b>METAS ACTIVAS (${activeGoals.length}):</b>\n\n`;
    
    activeGoals.forEach((goal, index) => {
      const progressPercentage = Math.round((goal.current / goal.target) * 100);
      const daysLeft = Math.ceil((new Date(goal.deadline).getTime() - Date.now()) / (1000 * 60 * 60 * 24));
      const isUrgent = daysLeft <= 1;
      const typeEmoji = getGoalTypeEmoji(goal.type);
      
      // Calcular barra de progreso de forma segura
      const progressBars = Math.max(0, Math.min(10, Math.floor(progressPercentage / 10)));
      const emptyBars = Math.max(0, 10 - progressBars);
      
      message += `${typeEmoji} <b>${getGoalTypeName(goal.type)}</b>\n`;
      message += `üìà Progreso: ${goal.current}/${goal.target} (${progressPercentage}%)\n`;
      message += `${'‚ñà'.repeat(progressBars)}${'‚ñë'.repeat(emptyBars)} ${progressPercentage}%\n`;
      message += `üí∞ Recompensa: +${goal.reward} pts\n`;
      message += `‚è∞ ${isUrgent ? 'üö®' : ''} ${daysLeft > 0 ? `${daysLeft} d√≠a${daysLeft === 1 ? '' : 's'} restante${daysLeft === 1 ? '' : 's'}` : 'VENCIDA'}\n\n`;
    });
  }

  // Metas completadas (√∫ltimas 3)
  if (completedGoals.length > 0) {
    const recentCompleted = completedGoals.slice(-3);
    message += `‚úÖ <b>METAS COMPLETADAS RECIENTES:</b>\n\n`;
    
    recentCompleted.forEach((goal, index) => {
      const typeEmoji = getGoalTypeEmoji(goal.type);
      const completedDate = new Date(goal.deadline).toLocaleDateString();
      
      message += `${typeEmoji} <b>${getGoalTypeName(goal.type)}</b> ‚úÖ\n`;
      message += `üèÜ ${goal.current}/${goal.target} - ${completedDate}\n`;
      message += `üí∞ +${goal.reward} pts obtenidos\n\n`;
    });
    
    if (completedGoals.length > 3) {
      message += `<i>...y ${completedGoals.length - 3} m√°s completadas</i>\n\n`;
    }
  }

  // Estad√≠sticas generales
  const totalRewardsEarned = completedGoals.reduce((sum, goal) => sum + goal.reward, 0);
  message += `üìä <b>ESTAD√çSTICAS DE METAS:</b>\n`;
  message += `üèÜ Completadas: ${completedGoals.length}\n`;
  message += `üîÑ Activas: ${activeGoals.length}\n`;
  message += `üíé Puntos ganados: ${totalRewardsEarned}\n\n`;

  message += `üöÄ <b>¬°Sigue trabajando en tus metas!</b>`;
  
  return message;
}

// Funci√≥n para obtener emoji del tipo de meta
function getGoalTypeEmoji(type: string): string {
  switch (type.toLowerCase()) {
    case 'daily': return 'üìÖ';
    case 'weekly': return 'üìà';
    case 'monthly': return 'üóìÔ∏è';
    case 'custom': return 'üéØ';
    default: return '‚≠ê';
  }
}

// Funci√≥n para obtener nombre del tipo de meta
function getGoalTypeName(type: string): string {
  switch (type.toLowerCase()) {
    case 'daily': return 'Meta Diaria';
    case 'weekly': return 'Meta Semanal';
    case 'monthly': return 'Meta Mensual';
    case 'custom': return 'Meta Personalizada';
    default: return 'Meta';
  }
}

// Nueva funci√≥n para manejar respuestas de polls
async function handlePollAnswer(pollAnswer: any) {
  try {
    console.log('üó≥Ô∏è  ============ POLL ANSWER RECIBIDO ============');
    console.log('üì• Datos completos del poll_answer:', JSON.stringify(pollAnswer, null, 2));
    console.log('üë§ Usuario que responde:', {
      telegramId: pollAnswer.user.id,
      username: pollAnswer.user.username || 'SIN_USERNAME',
      firstName: pollAnswer.user.first_name || 'SIN_NOMBRE',
      lastName: pollAnswer.user.last_name || 'SIN_APELLIDO',
      isBot: pollAnswer.user.is_bot
    });
    console.log('üó≥Ô∏è  Poll details:', {
      pollid: pollAnswer.poll_id,
      selectedOptions: pollAnswer.option_ids,
      optionCount: pollAnswer.option_ids.length
    });

    const user = pollAnswer.user;
    const pollid = pollAnswer.poll_id;
    const selectedOptionIds = pollAnswer.option_ids;
    
    // Un usuario solo puede seleccionar una opci√≥n en un quiz
    if (selectedOptionIds.length !== 1) {
      console.log('‚ö†Ô∏è  Poll answer ignorado: m√∫ltiples opciones seleccionadas');
      console.log('‚ùå RAZ√ìN: Usuario seleccion√≥', selectedOptionIds.length, 'opciones');
      return NextResponse.json({ ok: true, message: 'Poll answer ignorado' });
    }
    
    const selectedOptionId = selectedOptionIds[0];
    console.log('‚úÖ Opci√≥n seleccionada v√°lida:', selectedOptionId);
    
    // üî• NUEVA FUNCIONALIDAD: VERIFICAR SI ES UNA RESPUESTA DE DUELO
    console.log('üó°Ô∏è  ======== VERIFICANDO SI ES RESPUESTA DE DUELO ========');
    
    // Intentar procesar como respuesta de duelo PRIMERO
    try {
      const duelProcessed = await DuelManager.processDuelResponse(
        pollid,
        user.id.toString(),  // ‚úÖ CORREGIDO: user.id ES el telegramUserId de Telegram
        selectedOptionId,
        undefined // Tiempo de respuesta se calcula internamente
      );
      
      if (duelProcessed) {
        console.log('‚öîÔ∏è  RESPUESTA DE DUELO PROCESADA EXITOSAMENTE');
        
        return NextResponse.json({ 
          ok: true, 
          type: 'duel_answer_processed',
          processed: true,
          duelResponse: true,
          debug: {
            pollid,
            userid: user.id,
            username: user.username,
            selectedoption: selectedOptionId,
            isDuelResponse: true
          }
        });
      } else {
        console.log('‚ÑπÔ∏è  No es respuesta de duelo, continuando con procesamiento normal...');
      }
      
    } catch (duelError) {
      console.log('‚ö†Ô∏è  Error procesando como duelo (continuando con proceso normal):', duelError);
    }
    
    // üéØ NUEVA FUNCIONALIDAD: VERIFICAR SI ES UNA RESPUESTA DE SESI√ìN DE ESTUDIO
    console.log('üéØ ======== VERIFICANDO SI ES RESPUESTA DE SESI√ìN DE ESTUDIO ========');
    
    // Verificar si existe un mapping de sesi√≥n de estudio (primero en memoria, luego en BD)
    let studyMapping: { questionid: string; subject: string; timestamp: number } | null = null;
    let isStudyResponse = false;
    
    // 1. Buscar en memoria (legacy)
    if (global.studyPollMappings && global.studyPollMappings.has(pollid)) {
      studyMapping = global.studyPollMappings.get(pollid);
      isStudyResponse = true;
      console.log('üéØ ¬°RESPUESTA DE SESI√ìN DE ESTUDIO DETECTADA EN MEMORIA!', studyMapping);
    } 
    // 2. Buscar en base de datos (nuevo sistema persistente)
    else {
      try {
        const dbMapping = await prisma.telegrampollmapping.findUnique({
          where: { pollid: pollid }
        });
        
        if (dbMapping) {
          studyMapping = {
            questionid: dbMapping.questionid,
            subject: dbMapping.subject,
            timestamp: dbMapping.createdat.getTime() // Convertir a timestamp para compatibilidad
          };
          isStudyResponse = true;
          console.log('üéØ ¬°RESPUESTA DE SESI√ìN DE ESTUDIO DETECTADA EN BD!', studyMapping);
        }
      } catch (dbError) {
        console.log('‚ö†Ô∏è Error buscando mapping en BD:', dbError);
      }
    }
    
    if (isStudyResponse && studyMapping) {
      
      try {
        // Calcular tiempo de respuesta (desde cuando se envi√≥ el poll)
        const responseTime = Math.floor((Date.now() - studyMapping!.timestamp) / 1000);
        
        // Procesar respuesta de estudio usando el servicio
        console.log('üéØ Procesando respuesta de sesi√≥n de estudio...');
        
        // Usar el m√©todo processPollAnswer del StudySessionService
        await studySessionService.processPollAnswer(
          pollid,
          user.id.toString(),
          selectedOptionId // Solo una opci√≥n seleccionada (Telegram quiz)
        );
        
        // Limpiar mapping despu√©s del procesamiento
        if (global.studyPollMappings && global.studyPollMappings.has(pollid)) {
          global.studyPollMappings.delete(pollid);
        } else {
          // Limpiar de la base de datos
          try {
            await prisma.telegrampollmapping.delete({
              where: { pollid: pollid }
            });
            console.log('üßπ Mapping eliminado de la base de datos');
          } catch (deleteError) {
            console.log('‚ö†Ô∏è Error eliminando mapping de BD:', deleteError);
          }
        }
        
        console.log('‚úÖ Respuesta de estudio procesada exitosamente');
        
        return NextResponse.json({ 
          ok: true, 
          type: 'study_answer_processed',
          processed: true,
          debug: {
            pollid,
            userid: user.id,
            username: user.username,
            selectedoption: selectedOptionId,
            isStudyResponse: true,
            responseTime
          }
        });
        
      } catch (studyError) {
        console.error('‚ùå Error procesando sesi√≥n de estudio:', studyError);
        // Continuar con procesamiento normal si falla
      }
    }
    
    // üéØ NUEVA FUNCIONALIDAD: VERIFICAR SI ES UNA RESPUESTA DE SIMULACRO
    console.log('üéØ ======== VERIFICANDO SI ES RESPUESTA DE SIMULACRO ========');
    console.log('üéØ DEBUG - Poll ID recibido:', pollid);
    console.log('üéØ DEBUG - Usuario que responde:', user.id.toString());
    
    // Buscar si es una pregunta de simulacro
    const simulacroQuestionData = await findQuestionByPollId(pollid);
    console.log('üéØ DEBUG - Datos encontrados para poll:', simulacroQuestionData);
    
    // Detectar simulacros 2018, 2024 y MILITARES PREMIUM
    const isSimulacro2018 = simulacroQuestionData && simulacroQuestionData.sourcemodel === 'simulacro';
    const isSimulacro2024 = simulacroQuestionData && simulacroQuestionData.sourcemodel === 'simulacro2024';
    const isSimulacroMilitar = simulacroQuestionData && (
      simulacroQuestionData.sourcemodel === 'simulacro_premium_et' ||
      simulacroQuestionData.sourcemodel === 'simulacro_premium_aire' ||
      simulacroQuestionData.sourcemodel === 'simulacro_premium_armada'
    );
    
    if (isSimulacro2018 || isSimulacro2024 || isSimulacroMilitar) {
      const simulacroType = isSimulacroMilitar ? 'MILITAR' : (isSimulacro2024 ? '2024' : '2018');
      console.log(`üéØ ¬°RESPUESTA DE SIMULACRO ${simulacroType} DETECTADA!`);
      console.log('üìä Datos de la pregunta de simulacro:', {
        questionid: simulacroQuestionData.questionid,
        sourcemodel: simulacroQuestionData.sourcemodel,
        pollid: pollid,
        type: simulacroType
      });
      
      try {
        if (isSimulacro2024) {
          // Procesar simulacro 2024 de manera simple
          console.log('üéØ Procesando simulacro 2024...');
          
          // Buscar usuario
          const userFound = await prisma.telegramuser.findUnique({
            where: { telegramUserId: user.id.toString() }
          });
          
          if (!userFound) {
            console.error('‚ùå Usuario no encontrado');
            throw new Error('Usuario no encontrado');
          }
          
          // Buscar simulacro activo del usuario
          const activeSimulacro = await prisma.simulacro.findFirst({
            where: {
              userid: userFound.id,
              status: 'in_progress'
            }
          });
          
          if (!activeSimulacro) {
            console.error('‚ùå No se encontr√≥ simulacro activo');
            throw new Error('Simulacro activo no encontrado');
          }
          
          // Buscar la pregunta del examen 2024
          const question = await (prisma as any).examenOficial2024.findUnique({
            where: { id: simulacroQuestionData.questionid }
          });
          
          if (!question) {
            console.error('‚ùå Pregunta del examen 2024 no encontrada');
            throw new Error('Pregunta no encontrada');
          }
          
          // Verificar si es correcta
          const isCorrect = selectedOptionId === question.correctanswerindex;
          const responseTime = Math.floor((Date.now() - simulacroQuestionData.createdat.getTime()) / 1000);
          
          // Buscar la respuesta del simulacro
          const simulacroResponse = await prisma.simulacroresponse.findFirst({
            where: {
              simulacroid: activeSimulacro.id,
              questionid: simulacroQuestionData.questionid
            }
          });
          
          if (simulacroResponse) {
            // Actualizar la respuesta
            await prisma.simulacroresponse.update({
              where: { id: simulacroResponse.id },
              data: {
                selectedoption: selectedOptionId,
                iscorrect: isCorrect,
                responsetime: responseTime,
                answeredat: new Date()
              }
            });
          }
          
          // Calcular tiempo restante
          const timeElapsed = Math.floor((Date.now() - activeSimulacro.startedat.getTime()) / 1000);
          const timeRemaining = Math.max(0, 10800 - timeElapsed);
          const hoursRemaining = Math.floor(timeRemaining / 3600);
          const minutesRemaining = Math.floor((timeRemaining % 3600) / 60);
          
          // Buscar siguiente pregunta sin responder
          const nextResponse = await prisma.simulacroresponse.findFirst({
            where: {
              simulacroid: activeSimulacro.id,
              answeredat: null
            },
            orderBy: { questionnumber: 'asc' }
          });
          
          const feedbackMessage = isCorrect ? '‚úÖ ¬°Correcto!' : '‚ùå Incorrecto';
          let responseMessage = `üéØ <b>SIMULACRO 2024 - Pregunta ${question.questionnumber}/100</b>\n\n${feedbackMessage}`;
          
          if (nextResponse) {
            // Hay m√°s preguntas
            const nextQuestion = await (prisma as any).examenOficial2024.findUnique({
              where: { id: nextResponse.questionid }
            });
            
            if (nextQuestion) {
              responseMessage += '\n\n‚è≥ Enviando siguiente pregunta...';
              await sendTelegramMessage(userFound.telegramuserid, responseMessage);
              
              // Enviar la siguiente pregunta
              const header = `üéØ SIMULACRO EXAMEN 2024 - Pregunta ${nextQuestion.questionnumber}/100\n‚è∞ Tiempo restante: ${hoursRemaining}h ${minutesRemaining}m\n\n`;
              const pollQuestion = truncatePollQuestion(header, nextQuestion.question);
              
              const nextPollSent = await sendTelegramPoll(
                userFound.telegramuserid,
                pollQuestion,
                nextQuestion.options,
                nextQuestion.correctanswerindex,
                nextQuestion.id,
                'simulacro2024'
              );
              
              if (nextPollSent) {
                console.log(`‚úÖ Siguiente pregunta 2024 enviada: ${nextQuestion.questionnumber}/100`);
              } else {
                console.error('‚ùå Error enviando siguiente pregunta del simulacro 2024');
                await sendTelegramMessage(userFound.telegramuserid, '‚ùå Error enviando siguiente pregunta. Usa /simulacro_continuar');
              }
            }
          } else {
            // Simulacro completado
            responseMessage += '\n\nüéâ <b>¬°SIMULACRO 2024 COMPLETADO!</b>\n\nüìã <code>/simulacro_historial</code> - Ver resultados';
            
            // Marcar simulacro como completado
            await prisma.simulacro.update({
              where: { id: activeSimulacro.id },
              data: {
                status: 'completed',
                completedat: new Date()
              }
            });
            
            await sendTelegramMessage(userFound.telegramuserid, responseMessage);
            console.log('üéâ Simulacro 2024 completado');
          }
          
        } else if (isSimulacroMilitar) {
          // =========================================
          // üéñÔ∏è PROCESAR SIMULACRO PERMANENCIA PREMIUM
          // =========================================
          console.log('üéñÔ∏è Procesando simulacro militar premium...');
          
          // Buscar usuario
          const userFound = await prisma.telegramuser.findUnique({
            where: { telegramUserId: user.id.toString() }
          });
          
          if (!userFound) {
            console.error('‚ùå Usuario no encontrado');
            throw new Error('Usuario no encontrado');
          }
          
          // Buscar simulacro militar activo del usuario
          const activeSimulacro = await prisma.simulacro.findFirst({
            where: {
              userid: userFound.id,
              status: 'in_progress',
              examtype: {
                in: ['simulacro_premium_et', 'simulacro_premium_aire', 'simulacro_premium_armada']
              }
            }
          });
          
          if (!activeSimulacro) {
            console.error('‚ùå No se encontr√≥ simulacro militar activo');
            throw new Error('Simulacro militar activo no encontrado');
          }
          
          console.log('‚úÖ Simulacro militar activo encontrado:', {
            simulacroid: activeSimulacro.id,
            examtype: activeSimulacro.examtype,
            startedAt: activeSimulacro.startedat
          });
          
          // Verificar si es correcta (usando metadata del simulacro)
          const isCorrect = selectedOptionId === simulacroQuestionData.correctanswerindex;
          const responseTime = Math.floor((Date.now() - simulacroQuestionData.createdat.getTime()) / 1000);
          
          // Buscar la respuesta del simulacro
          const simulacroResponse = await prisma.simulacroresponse.findFirst({
            where: {
              simulacroid: activeSimulacro.id,
              questionid: simulacroQuestionData.questionid
            }
          });
          
          if (simulacroResponse) {
            // Actualizar la respuesta
            await prisma.simulacroresponse.update({
              where: { id: simulacroResponse.id },
              data: {
                selectedoption: selectedOptionId,
                iscorrect: isCorrect,
                responsetime: responseTime,
                answeredat: new Date()
              }
            });
          }
          
          // Verificar cu√°ntas preguntas se han respondido
          const responsesAnswered = await prisma.simulacroresponse.count({
            where: {
              simulacroid: activeSimulacro.id,
              answeredat: { not: null }
            }
          });
          
          console.log('üìä Estado del simulacro militar:', {
            responsesAnswered,
            totalQuestions: 100,
            isCompleted: responsesAnswered >= 100
          });
          
          // Calcular tiempo transcurrido
          const timeElapsed = Math.floor((Date.now() - activeSimulacro.startedat.getTime()) / 1000);
          const timeRemaining = Math.max(0, (105 * 60) - timeElapsed); // 105 minutos
          const hoursRemaining = Math.floor(timeRemaining / 3600);
          const minutesRemaining = Math.floor((timeRemaining % 3600) / 60);
          
          const feedbackMessage = isCorrect ? '‚úÖ ¬°Correcto!' : '‚ùå Incorrecto';
          const currentQuestionNumber = responsesAnswered;
          
          if (responsesAnswered >= 100) {
            // =========================================
            // üèÜ SIMULACRO PERMANENCIA COMPLETADO
            // =========================================
            console.log('üèÜ ¬°SIMULACRO PERMANENCIA COMPLETADO!');
            
            // Procesar finalizaci√≥n con sistema especializado
            const { MilitarySimulationCompletion } = await import('../../../../services/militarySimulationCompletion');
            
            const completionResult = await MilitarySimulationCompletion.processCompletion(activeSimulacro.id);
            
            if (completionResult) {
              // Generar mensaje de finalizaci√≥n militar especializado
              const completionMessage = MilitarySimulationCompletion.generateCompletionMessage(completionResult);
              
              // Enviar mensaje de feedback seguido del resultado final
              const briefFeedback = `üéñÔ∏è <b>SIMULACRO PERMANENCIA - Pregunta 100/100</b>\n\n${feedbackMessage}\n\n‚è≥ Procesando resultados finales...`;
              await sendTelegramMessage(userFound.telegramuserid, briefFeedback);
              
              // Esperar un momento antes de enviar el resultado completo
              setTimeout(async () => {
                await sendTelegramMessage(userFound.telegramuserid, completionMessage);
              }, 2000);
              
              console.log('üéâ Simulacro permanencia completado y mensaje enviado');
            } else {
              // Fallback si falla el procesamiento especializado
              const fallbackMessage = `üéñÔ∏è <b>SIMULACRO PERMANENCIA COMPLETADO</b>\n\n${feedbackMessage}\n\nüéâ ¬°Has completado las 100 preguntas!\n\nüìã /simulacros_premium - Ver informaci√≥n de simulacros`;
              await sendTelegramMessage(userFound.telegramuserid, fallbackMessage);
              
              console.log('‚ö†Ô∏è Simulacro permanencia completado con mensaje fallback');
            }
            
          } else {
            // =========================================
            // üìù CONTINUAR CON SIGUIENTE PREGUNTA
            // =========================================
            
            // Buscar siguiente pregunta sin responder
            const nextResponse = await prisma.simulacroresponse.findFirst({
              where: {
                simulacroid: activeSimulacro.id,
                answeredat: null
              },
              orderBy: { questionnumber: 'asc' }
            });
            
            if (nextResponse) {
              // Hay m√°s preguntas - continuar simulacro
              const nextQuestionNumber = responsesAnswered + 1;
              
              let responseMessage = `üéñÔ∏è <b>SIMULACRO PERMANENCIA - Pregunta ${currentQuestionNumber}/100</b>\n\n${feedbackMessage}`;
              responseMessage += '\n\n‚è≥ Enviando siguiente pregunta...';
              
              await sendTelegramMessage(userFound.telegramuserid, responseMessage);
              
              // Aqu√≠ ir√≠a la l√≥gica para enviar la siguiente pregunta militar
              // Por simplicidad, enviaremos un mensaje indicando que use /simulacro_continuar
              setTimeout(async () => {
                const nextMessage = `üéñÔ∏è <b>PREGUNTA ${nextQuestionNumber}/100</b>\n‚è∞ Tiempo restante: ${hoursRemaining}h ${minutesRemaining}m\n\nüîÑ Usa /simulacro_continuar para continuar`;
                await sendTelegramMessage(userFound.telegramuserid, nextMessage);
              }, 1000);
              
              console.log(`‚úÖ Procesado simulacro militar: ${currentQuestionNumber}/100`);
              
            } else {
              // No hay m√°s preguntas pero no llegamos a 100 - estado inesperado
              console.error('‚ö†Ô∏è Estado inesperado: No hay m√°s preguntas pero simulacro no completado');
              const errorMessage = `üéñÔ∏è <b>SIMULACRO PERMANENCIA - Estado inesperado</b>\n\n${feedbackMessage}\n\n‚ö†Ô∏è Error en el simulacro. Usa /simulacros_premium`;
              await sendTelegramMessage(userFound.telegramuserid, errorMessage);
            }
          }
          
        } else {
          // Procesar simulacro 2018 (c√≥digo existente)
          // Extraer simulacroId y questionNumber del questionId
          // Formato esperado: "simulacro-{simulacroId}-{questionNumber}"
          const match = simulacroQuestionData.questionid.match(/^simulacro-([a-f0-9-]+)-(\d+)$/);
          
          if (!match) {
            console.error('‚ùå Formato de questionId de simulacro inv√°lido:', simulacroQuestionData.questionid);
            throw new Error('Formato de questionId inv√°lido para simulacro');
          }
          
          const simulacroId = match[1];
          const questionNumber = parseInt(match[2]);
          
          console.log('üéØ Extra√≠dos datos del simulacro 2018:', {
            simulacroId,
            questionNumber,
            selectedoption: selectedOptionId
          });
          
          // Verificar que el usuario tiene este simulacro activo
          const activeSimulacro = await prisma.simulacro.findFirst({
            where: {
              id: simulacroId,
              status: 'in_progress',
              userid: user.id.toString()
            }
          });
          
          if (!activeSimulacro) {
            console.error('‚ùå No se encontr√≥ simulacro activo para este usuario');
            throw new Error('Simulacro no encontrado o no activo');
          }
          
          console.log('‚úÖ Simulacro activo verificado');
          
          // Procesar la respuesta del simulacro
          const { SimulacroService } = await import('../../../../services/simulacroService');
          
          const responseTime = Math.floor((Date.now() - simulacroQuestionData.createdat.getTime()) / 1000);
          
          console.log('üîÑ Procesando respuesta de simulacro...');
          const result = await SimulacroService.processAnswer(
            simulacroId,
            questionNumber,
            selectedOptionId,
            responseTime
          );
          
          console.log('‚úÖ Respuesta de simulacro procesada:', {
            iscorrect: result.isCorrect,
            isCompleted: result.isCompleted,
            hasNextQuestion: !!result.nextQuestion
          });
          
          // Enviar mensaje de feedback al usuario
          const feedbackMessage = result.isCorrect ? 
            '‚úÖ ¬°Correcto!' : 
            '‚ùå Incorrecto';
          
          let responseMessage = `üéØ <b>SIMULACRO - Pregunta ${questionNumber}/100</b>\n\n${feedbackMessage}`;
          
          if (result.isCompleted) {
            // Simulacro completado
            responseMessage += '\n\nüéâ <b>¬°SIMULACRO COMPLETADO!</b>\n\nüìã <code>/simulacro_historial</code> - Ver resultados';
            
            await sendTelegramMessage(user.id, responseMessage);
            
            console.log('üéâ Simulacro completado, mensaje enviado');
          } else if (result.nextQuestion) {
            // Enviar siguiente pregunta
            responseMessage += '\n\n‚è≥ Enviando siguiente pregunta...';
            
            await sendTelegramMessage(user.id, responseMessage);
            
            // Enviar la siguiente pregunta
            const timeElapsed = Math.floor((Date.now() - activeSimulacro.startedat.getTime()) / 1000);
            const timeRemaining = Math.max(0, 10800 - timeElapsed);
            const hoursRemaining = Math.floor(timeRemaining / 3600);
            const minutesRemaining = Math.floor((timeRemaining % 3600) / 60);
            
            const header = `üéØ SIMULACRO ${result.nextQuestion.questionnumber}/100 ‚è±Ô∏è${hoursRemaining}h${minutesRemaining}m\n\n`;
            const pollQuestion = truncatePollQuestion(header, result.nextQuestion.question);
            
            const nextPollSent = await sendTelegramPoll(
              user.id,
              pollQuestion,
              result.nextQuestion.options,
              result.nextQuestion.correctAnswerIndex,
              `simulacro-${simulacroId}-${result.nextQuestion.questionNumber}`,
              'simulacro'
            );
            
            if (nextPollSent) {
              console.log(`‚úÖ Siguiente pregunta enviada: ${result.nextQuestion.questionNumber}/100`);
            } else {
              console.error('‚ùå Error enviando siguiente pregunta del simulacro');
              await sendTelegramMessage(user.id, '‚ùå Error enviando siguiente pregunta. Usa /simulacro_continuar');
            }
          } else {
            // Caso inesperado: ni completado ni hay siguiente pregunta
            console.error('‚ö†Ô∏è CASO INESPERADO: Simulacro no est√° completado pero no hay siguiente pregunta');
            responseMessage += '\n\n‚ö†Ô∏è Estado del simulacro inesperado. Usa <code>/simulacro_continuar</code>';
            await sendTelegramMessage(user.id, responseMessage);
          }
        }
      } catch (simulacroError) {
        console.error('‚ùå Error procesando respuesta de simulacro:', simulacroError);
        
        // Enviar mensaje de error al usuario
        await sendTelegramMessage(user.id, 
          '‚ùå <b>Error procesando respuesta de simulacro</b>\n\nUsa <code>/simulacro_continuar</code> para continuar.'
        );
        
        return NextResponse.json({ 
          ok: false, 
          error: 'Error procesando respuesta de simulacro',
          details: simulacroError instanceof Error ? simulacroError.message : 'Unknown error'
        }, { status: 500 });
      }
    }
    
    // Si no es duelo ni simulacro, continuar con procesamiento normal de pregunta regular
    console.log('üìö ======== PROCESANDO COMO PREGUNTA REGULAR ========');
    
    // Buscar la pregunta relacionada con este poll
    console.log('üîç Buscando informaci√≥n de la pregunta...');
    const questionData = await findQuestionByPollId(pollid);
    
    if (!questionData) {
      console.log('‚ùå ERROR CR√çTICO: No se encontr√≥ pregunta para poll ID:', pollid);
      console.log('üîç Este puede ser el problema principal');
      return NextResponse.json({ ok: true, message: 'Pregunta no encontrada' });
    }
    
    console.log('‚úÖ Pregunta encontrada:', {
      questionid: questionData.questionid,
      correctanswerindex: questionData.correctanswerindex,
      createdat: questionData.createdat,
      chatid: questionData.chatid,
      sourcemodel: questionData.sourcemodel
    });
    
    // Determinar si la respuesta es correcta
    const isCorrect = selectedOptionId === questionData.correctanswerindex;
    
    console.log('üìä Evaluando respuesta:', {
      questionid: questionData.questionid,
      selectedoption: selectedOptionId,
      correctOption: questionData.correctanswerindex,
      iscorrect: isCorrect ? '‚úÖ CORRECTA' : '‚ùå INCORRECTA'
    });
    
    // Calcular tiempo de respuesta (diferencia entre env√≠o del poll y respuesta)
    const responseTime = Math.floor((Date.now() - questionData.createdat.getTime()) / 1000);
    console.log('‚è±Ô∏è  Tiempo de respuesta:', responseTime, 'segundos');
    
    // Preparar datos para GamificationService
    const gamificationData = {
      telegramUserId: user.id.toString(),
      username: user.username,
      firstName: user.first_name,
      lastName: user.last_name,
      questionId: questionData.questionid,
      telegramMsgId: pollid, // Usamos pollid como identificador
      isCorrect: isCorrect,
      responseTime: responseTime
    };
    
    console.log('üéÆ Enviando datos a GamificationService:', gamificationData);
    
    // Procesar respuesta con sistema de gamificaci√≥n
    const userStats = await GamificationService.processUserResponse(gamificationData);
    
    console.log('‚úÖ GamificationService proces√≥ la respuesta:', {
      telegramUserId: userStats.telegramUserId,
      username: userStats.username,
      firstName: userStats.firstName,
      totalPoints: userStats.totalPoints,
      level: userStats.level,
      streak: userStats.streak,
      accuracy: userStats.accuracy,
      rank: userStats.rank
    });

    // üéØ NUEVA FUNCIONALIDAD: FEEDBACK INMEDIATO CON PUNTOS GANADOS
    const pointsEarned = calculatePointsEarned(isCorrect, responseTime);
    const feedbackMessage = generateImmediateFeedback(userStats, isCorrect, pointsEarned, responseTime);
    
    // üö® DESHABILITADO: Ya no enviamos mensajes privados porque el quiz de Telegram muestra autom√°ticamente si es correcto
    // Enviar feedback inmediato al usuario
    // await sendTelegramMessage(user.id, feedbackMessage);
    console.log('üì§ Feedback NO enviado (quiz autom√°tico):', feedbackMessage.substring(0, 100) + '...');

    // Generar mensaje de respuesta personalizado  
    console.log('üí¨ Sistema inteligente: procesando respuesta de quiz...');
    
    // Datos temporales para la respuesta legacy (sistema principal est√° en poll answers)
    const tempQuestionData = {
      questionid: questionData.questionid,
      correctanswerindex: questionData.correctanswerindex,
      createdat: questionData.createdat,
      chatid: questionData.chatid
    };
    
    // üö® DESHABILITADO: Ya no enviamos mensajes inteligentes porque el quiz es autom√°tico
    // Usar sistema inteligente para enviar respuesta de quiz
    /* const quizResult = await NotificationService.sendIntelligentQuizResponse(
      userStats,
      iscorrect: isCorrect,
      tempQuestionData,
      {
        telegramUserId: user.id.toString(),
        firstName: user.first_name,
        username: user.username
      },
      questionData.chatid.toString()
    ); */
    
    const quizResult = { method: 'none', message: 'Quiz autom√°tico - no se env√≠an mensajes adicionales' };
    
    console.log('üì§ Resultado sistema inteligente quiz:', quizResult.method, '|', quizResult.message);

    console.log('üéâ ============ POLL ANSWER PROCESADO EXITOSAMENTE ============');
    console.log('üìà Resumen final:', {
      usuario: `${user.first_name} (@${user.username || 'sin_username'})`,
      telegramId: user.id,
      questionid: questionData.questionid,
      respuestaCorrecta: isCorrect,
      tiempoRespuesta: responseTime,
      puntosNuevos: userStats.totalPoints,
      nivel: userStats.level,
      mensajeEnviado: quizResult.method === 'private'
    });

    return NextResponse.json({ 
      ok: true, 
      type: 'poll_answer_processed',
      processed: true,
      userStats,
      debug: {
        pollid,
        userid: user.id,
        username: user.username,
        iscorrect: isCorrect,
        responsetime: responseTime,
        messageSent: quizResult.method === 'private',
        isDuelResponse: false
      }
    });

  } catch (error) {
    console.error('‚ùå ============ ERROR EN POLL ANSWER ============');
    console.error('üí• Error completo:', error);
    console.error('üìä Stack trace:', error instanceof Error ? error.stack : 'No stack trace');
    console.error('üì• Poll answer data:', JSON.stringify(pollAnswer, null, 2));
    
    return NextResponse.json({ 
      ok: false, 
      error: 'Error procesando poll answer',
      details: error instanceof Error ? error.message : 'Unknown error'
    }, { status: 500 });
  }
}

// Funci√≥n para buscar pregunta por Poll ID
async function findQuestionByPollId(pollid: string) {
  try {
    console.log('üîç Buscando pregunta para poll ID:', pollid);
    
    // Buscar primero en la tabla de mapeo de polls normales
    const pollMapping = await prisma.telegrampoll.findUnique({
      where: { pollid: pollid }
    });
    
    if (pollMapping) {
      console.log('‚úÖ Mapeo encontrado en TelegramPoll:', {
        questionid: pollMapping.questionid,
        correctanswerindex: pollMapping.correctanswerindex,
        sourcemodel: pollMapping.sourcemodel,
        chatid: pollMapping.chatid,
        createdat: pollMapping.createdat
      });
      
      return {
        questionid: pollMapping.questionid,
        correctanswerindex: pollMapping.correctanswerindex,
        sourcemodel: pollMapping.sourcemodel,
        chatid: pollMapping.chatid,
        createdat: pollMapping.createdat,
        subject: 'general' // Default para polls normales
      };
    }
    
    // Si no se encuentra, buscar en la tabla de mapeo de sesiones de estudio
    const studyMapping = await prisma.telegrampollmapping.findUnique({
      where: { pollid: pollid }
    });
    
    if (studyMapping) {
      console.log('‚úÖ Mapeo encontrado en TelegramPollMapping:', {
        questionid: studyMapping.questionid,
        subject: studyMapping.subject,
        createdat: studyMapping.createdat
      });
      
      return {
        questionid: studyMapping.questionid,
        subject: studyMapping.subject,
        createdat: studyMapping.createdat,
        correctanswerindex: 0, // Default
        sourcemodel: 'study_session',
        chatid: '0' // Default para sesiones de estudio
      };
    }
    
    console.log('‚ùå No se encontr√≥ mapeo para poll ID:', pollid);
    return null;
    
  } catch (error) {
    console.error('‚ùå Error buscando pregunta por poll ID:', error);
    return null;
  }
}

// Funci√≥n para formatear respuesta personalizada de poll
function formatPollResponseMessage(stats: any, iscorrect: boolean, questionData: any): string {
  const correctEmoji = isCorrect ? '‚úÖ' : '‚ùå';
  const levelEmoji = getLevelEmoji(stats.level);
  
  const baseMessage = `${correctEmoji} ${isCorrect ? '¬°Correcto!' : 'Incorrecto'}

üèÜ <b>Tus estad√≠sticas actualizadas:</b>
üìä Puntos: ${stats.totalpoints}
${levelEmoji} Nivel: ${stats.level}
üî• Racha: ${stats.streak} d√≠as
üéØ Precisi√≥n: ${stats.accuracy}%
üìà Ranking: #${stats.rank}

${getMotivationalMessage(stats, isCorrect)}`;

  return baseMessage;
}

// Funci√≥n para manejar comando de duelo
async function handleDuelCommand(command: string, userid: string, fromtelegramuser: any, chatid: number): Promise<string | null> {
  try {
    console.log('üó°Ô∏è DUELO COMMAND - Iniciando:', {
      command,
      userid,
      fromtelegramuser: fromtelegramuser.first_name || fromtelegramuser.username
    });
    
    const parts = command.trim().split(' ');
    console.log('üó°Ô∏è DUELO COMMAND - Partes del comando:', parts);
    
    if (parts.length < 2) {
      console.log('üó°Ô∏è DUELO COMMAND - Formato incorrecto, devolviendo ayuda');
      return `üó°Ô∏è <b>COMANDO DUELO</b> üó°Ô∏è

‚ùå Formato incorrecto. Uso:
<code>/duelo @usuario</code>
<code>/duelo nombre</code>

üéØ <b>EJEMPLOS:</b>
<code>/duelo @juan_estudiante</code>
<code>/duelo Carlos</code>
<code>/duelo Luis</code>

üéÆ <b>TIPOS DE DUELO:</b>
üó°Ô∏è <b>Est√°ndar</b> - 5 preguntas, 5 min
‚ö° <b>Velocidad</b> - 3 preguntas, 2 min  
üéØ <b>Precisi√≥n</b> - 7 preguntas, 10 min

¬°Reta a tus amigos y demuestra qui√©n sabe m√°s! üí™`;
    }
    
    const targetIdentifier = parts.slice(1).join(' ');
    console.log('üó°Ô∏è DUELO COMMAND - Buscando usuario:', targetIdentifier);
    
    // Buscar usuario objetivo
    const targetUser = await DuelService.findUserByIdentifier(targetIdentifier);
    console.log('üó°Ô∏è DUELO COMMAND - Usuario encontrado:', targetUser ? 'S√≠' : 'No', targetUser);
    
    if (!targetUser) {
      console.log('üó°Ô∏è DUELO COMMAND - Usuario no encontrado, devolviendo error');
      return `‚ùå <b>Usuario no encontrado</b>

üîç <b>No se encontr√≥ ning√∫n usuario con:</b>
"<i>${targetIdentifier}</i>"

üí° <b>POSIBLES CAUSAS:</b>
ü§ñ El usuario no ha iniciado el bot con <code>/start</code>
üìù El @username no es exacto
üî§ El nombre no coincide

üîß <b>SOLUCIONES:</b>
1Ô∏è‚É£ Pide al usuario que busque <code>@OpoMelillaBot</code> y haga <code>/start</code>
2Ô∏è‚É£ Verifica el @username exacto en su perfil
3Ô∏è‚É£ Prueba con su nombre de pila

üéØ <b>EJEMPLO CORRECTO:</b>
<code>/duelo @juan_estudiante</code>
<code>/duelo Carlos</code>

‚ö†Ô∏è <b>IMPORTANTE:</b> Todos los usuarios deben iniciar el bot antes de poder participar en duelos.`;
    }
    
    if (targetUser.telegramuserid === userid) {
      console.log('üó°Ô∏è DUELO COMMAND - Usuario se ret√≥ a s√≠ mismo');
      return `ü§î <b>¬°No puedes retarte a ti mismo!</b>

üòÖ Eso ser√≠a un poco extra√±o, ¬øno crees?

üéØ <b>En su lugar, puedes:</b>
‚Ä¢ Retar a un amigo: <code>/duelo @amigo</code>
‚Ä¢ Ver el ranking: <code>/ranking</code>
‚Ä¢ Practicar solo respondiendo preguntas normales

¬°Busca un oponente digno! üó°Ô∏è`;
    }
    
    console.log('üó°Ô∏è DUELO COMMAND - Creando duelo...');
    // Crear duelo
    const duel = await DuelService.createDuel({
      challengerTelegramId: userid,
      challengedTelegramId: targetUser.telegramuserid,
      type: 'standard' // Por defecto est√°ndar
    });
    
    console.log('üó°Ô∏è DUELO COMMAND - Duelo creado:', duel ? 'S√≠' : 'No', duel?.id);
    
    if (!duel) {
      console.log('üó°Ô∏è DUELO COMMAND - No se pudo crear duelo');
      
      // Verificar espec√≠ficamente si el usuario retado existe en la base de datos
      const challengedUserExists = await prisma.telegramuser.findUnique({
        where: { telegramUserId: targetUser.telegramuserid }
      });
      
      if (!challengedUserExists) {
        // El usuario retado no ha hecho /start con el bot
        return `‚ùå <b>No se puede crear el duelo</b>

ü§ñ <b>PROBLEMA:</b> <b>${targetUser.firstName || targetUser.username || 'El usuario'}</b> a√∫n no ha iniciado el bot

üîß <b>SOLUCI√ìN:</b>
@${targetUser.username || targetUser.firstName || 'usuario'}, necesitas:

1Ô∏è‚É£ Buscar <code>@OpoMelillaBot</code> en Telegram
2Ô∏è‚É£ Hacer clic en <b>INICIAR</b> o enviar <code>/start</code>
3Ô∏è‚É£ ¬°Listo! Ya podr√°s participar en duelos

üí° <b>¬øPor qu√© es necesario?</b>
‚Ä¢ Para recibir preguntas por privado (sin spam al grupo)
‚Ä¢ Para gestionar tu puntuaci√≥n y estad√≠sticas
‚Ä¢ Para enviar/recibir notificaciones de duelos

‚ö° Una vez hecho esto, el duelo se podr√° crear normalmente.`;
      }
      
      // Otros errores posibles
      return `‚ùå <b>No se pudo crear el duelo</b>

üîç <b>Posibles causas:</b>
‚Ä¢ Ya hay un duelo pendiente entre ustedes
‚Ä¢ El usuario retado no tiene puntos suficientes
‚Ä¢ El usuario no ha iniciado el bot con /start
‚Ä¢ Error temporal del sistema

üîß <b>Soluciones:</b>
‚Ä¢ Espera a que termine el duelo actual
‚Ä¢ Verifica que ambos tengan puntos suficientes
‚Ä¢ Pide al usuario que busque @OpoMelillaBot y haga /start
‚Ä¢ Int√©ntalo de nuevo en unos minutos

üì± Usa <code>/duelos</code> para ver duelos pendientes`;
    }
    
    // Enviar notificaci√≥n inteligente al usuario retado
    const targetName = targetUser.firstName || targetUser.username || 'Usuario';
    const challengerName = fromtelegramuser.first_name || fromtelegramuser.username || 'Retador';
    
    console.log('üó°Ô∏è DUELO COMMAND - Enviando notificaci√≥n inteligente para:', targetName);
    
    // Datos para la notificaci√≥n
    const notificationData = {
      id: duel.id,
      challenger: {
        firstName: challengerName,
        telegramUserId: userid
      },
      challenged: {
        firstName: targetName,
        telegramUserId: targetUser.telegramuserid
      },
      type: 'Est√°ndar',
      questionsCount: duel.questionsCount,
      timelimit: duel.timeLimit,
      stake: duel.stake,
      expiresAt: duel.expiresAt
    };
    
    // Usar sistema inteligente de notificaciones
    const notificationResult = await NotificationService.sendIntelligentNotification(
      'duel',
      {
        telegramUserId: targetUser.telegramuserid,
        username: targetUser.username,
        firstName: targetUser.firstName
      },
      notificationData,
      chatId.toString()
    );
    
    console.log('üó°Ô∏è DUELO COMMAND - Resultado notificaci√≥n:', notificationResult.method);
    
    // Preparar respuesta basada en el resultado de la notificaci√≥n
    let responseMessage = `üó°Ô∏è <b>¬°DUELO ENVIADO!</b> ‚öîÔ∏è

üéØ Has retado a <b>${targetName}</b> a un duelo

üìã <b>DETALLES:</b>
üó°Ô∏è Tipo: Est√°ndar  
üìù Preguntas: ${duel.questionsCount}
‚è±Ô∏è Tiempo: ${Math.floor(duel.timeLimit / 60)} min
üí∞ En juego: ${duel.stake} pts
‚è∞ Expira: ${duel.expiresAt.toLocaleTimeString()}

`;

    // Mensaje adaptado seg√∫n el m√©todo de notificaci√≥n
    if (notificationResult.method === 'private') {
      responseMessage += `‚úÖ <b>NOTIFICACI√ìN PRIVADA ENVIADA</b>
${targetName} ha recibido una notificaci√≥n privada detallada del bot.

‚è≥ <b>Ahora hay que esperar...</b>
El duelo expira en 30 minutos si no es aceptado.`;
    } 
    else if (notificationResult.method === 'group') {
      responseMessage += `üì¢ <b>NOTIFICACI√ìN EN GRUPO</b>
Se envi√≥ una notificaci√≥n breve en el grupo.

üí° <b>TIP PARA ${targetName}:</b>
Para recibir notificaciones privadas detalladas:
1. Busca <code>@OpoMelillaBot</code> en Telegram
2. Env√≠a <code>/start</code> al bot
3. ¬°Listo! Futuras notificaciones ser√°n privadas

‚è≥ El duelo expira en 30 minutos si no es aceptado.`;
    }
    else {
      responseMessage += `‚ö†Ô∏è <b>NOTIFICACI√ìN NO ENVIADA</b>
No se pudo notificar autom√°ticamente a ${targetName}.

üì£ <b>AV√çSALE MANUALMENTE:</b>
"¬°Te he retado a un duelo! Usa <code>/duelos</code> para verlo"

üí° <b>TIP PARA ${targetName}:</b>
Para recibir notificaciones autom√°ticas:
1. Busca <code>@OpoMelillaBot</code> en Telegram  
2. Env√≠a <code>/start</code> al bot
3. ¬°Configurado!

‚è≥ El duelo expira en 30 minutos si no es aceptado.`;
    }
    
    responseMessage += `

üéÆ Usa <code>/duelos</code> para ver el estado`;

    console.log('üó°Ô∏è DUELO COMMAND - Respuesta preparada');
    return responseMessage;
    
  } catch (error) {
    console.error('üó°Ô∏è DUELO COMMAND - Error general:', error);
    return `‚ùå <b>Error inesperado</b>

Hubo un problema al procesar tu duelo. 
Int√©ntalo de nuevo en unos minutos.`;
  }
}

// Funci√≥n para manejar aceptar duelo
async function handleAcceptDuel(command: string, userid: string): Promise<string | null> {
  try {
    const parts = command.trim().split(' ');
    
    if (parts.length < 2) {
      const pendingDuels = await DuelService.getPendingDuels(userid);
      
      if (pendingDuels.length === 0) {
        return `‚úÖ <b>ACEPTAR DUELO</b>

‚ùå No tienes duelos pendientes para aceptar.

üéØ <b>¬øQU√â PUEDES HACER?</b>
‚Ä¢ Retar a alguien: <code>/duelo @usuario</code>
‚Ä¢ Ver tus duelos: <code>/duelos</code>
‚Ä¢ Esperar a que te reten

üó°Ô∏è ¬°Los duelos est√°n esper√°ndote!`;
      }
      
      let message = `‚úÖ <b>ACEPTAR DUELO</b>

üéØ <b>Tienes ${pendingDuels.length} duelo${pendingDuels.length === 1 ? '' : 's'} pendiente${pendingDuels.length === 1 ? '' : 's'}:</b>

`;
      
      pendingDuels.slice(0, 3).forEach((duel, index) => {
        const challenger = duel.challenger.firstName || duel.challenger.username || 'Usuario';
        message += `üó°Ô∏è <b>${index + 1}.</b> ${challenger} te ret√≥\n`;
        message += `   üìù ${duel.questionsCount} preguntas | ‚è±Ô∏è ${Math.floor(duel.timeLimit / 60)} min\n`;
        message += `   üí∞ ${duel.stake} pts | üÜî ${duel.id}\n\n`;
      });
      
      if (pendingDuels.length > 3) {
        message += `<i>...y ${pendingDuels.length - 3} m√°s</i>\n\n`;
      }
      
      message += `‚ö° <b>USAR:</b>
<code>/aceptar ${pendingDuels[0].id}</code> - Aceptar duelo espec√≠fico
<code>/rechazar ${pendingDuels[0].id}</code> - Rechazar duelo espec√≠fico

üí° <b>TIP:</b> Usa el ID del duelo que quieres aceptar/rechazar`;
      
      return message;
    }
    
    const duelId = parts[1];
    const result = await DuelService.acceptDuel(duelId, userid);
    
    if (!result) {
      return `‚ùå <b>No se pudo aceptar el duelo</b>

üîç <b>Posibles causas:</b>
‚Ä¢ El ID del duelo es incorrecto
‚Ä¢ El duelo ya no est√° pendiente
‚Ä¢ Ha expirado (30 min l√≠mite)
‚Ä¢ Solo el retado puede aceptar

Usa <code>/duelos</code> para ver tus duelos actuales.`;
    }
    
    return `‚öîÔ∏è <b>¬°DUELO ACEPTADO!</b> ‚öîÔ∏è

üéØ Has aceptado el duelo de <b>${result.challenger.firstName}</b>

üéÆ <b>¬°QUE COMIENCE LA BATALLA!</b>
El duelo iniciar√° en breve...

üìä <b>DETALLES:</b>
üó°Ô∏è Tipo: ${result.type}
üìù Preguntas: ${result.questionsCount}
‚è±Ô∏è Tiempo: ${Math.floor(result.timeLimit / 60)} min
üí∞ En juego: ${result.stake} pts

üî• ¬°Buena suerte!`;
    
  } catch (error) {
    console.error('Error manejando aceptar duelo:', error);
    return `‚ùå <b>Error inesperado</b>

Hubo un problema al aceptar el duelo.
Int√©ntalo de nuevo en unos minutos.`;
  }
}

// Funci√≥n para manejar rechazar duelo
async function handleRejectDuel(command: string, userid: string): Promise<string | null> {
  try {
    const parts = command.trim().split(' ');
    
    if (parts.length < 2) {
      const pendingDuels = await DuelService.getPendingDuels(userid);
      
      if (pendingDuels.length === 0) {
        return `‚ùå <b>RECHAZAR DUELO</b>

‚ùå No tienes duelos pendientes para rechazar.

üéØ <b>¬øQU√â PUEDES HACER?</b>
‚Ä¢ Retar a alguien: <code>/duelo @usuario</code>
‚Ä¢ Ver tus duelos: <code>/duelos</code>
‚Ä¢ Esperar a que te reten

üó°Ô∏è ¬°Los duelos est√°n esper√°ndote!`;
      }
      
      let message = `‚ùå <b>RECHAZAR DUELO</b>

üéØ <b>Tienes ${pendingDuels.length} duelo${pendingDuels.length === 1 ? '' : 's'} pendiente${pendingDuels.length === 1 ? '' : 's'}:</b>

`;
      
      pendingDuels.slice(0, 3).forEach((duel, index) => {
        const challenger = duel.challenger.firstName || duel.challenger.username || 'Usuario';
        message += `üó°Ô∏è <b>${index + 1}.</b> ${challenger} te ret√≥\n`;
        message += `   üìù ${duel.questionsCount} preguntas | ‚è±Ô∏è ${Math.floor(duel.timeLimit / 60)} min\n`;
        message += `   üí∞ ${duel.stake} pts | üÜî ${duel.id}\n\n`;
      });
      
      if (pendingDuels.length > 3) {
        message += `<i>...y ${pendingDuels.length - 3} m√°s</i>\n\n`;
      }
      
      message += `‚ö° <b>USAR:</b>
<code>/rechazar ${pendingDuels[0].id}</code> - Rechazar duelo espec√≠fico
<code>/aceptar ${pendingDuels[0].id}</code> - Aceptar duelo espec√≠fico

üí° <b>TIP:</b> Usa el ID del duelo que quieres rechazar`;
      
      return message;
    }
    
    const duelId = parts[1];
    const success = await DuelService.rejectDuel(duelId, userid);
    
    if (!success) {
      return `‚ùå <b>No se pudo rechazar el duelo</b>

üîç <b>Posibles causas:</b>
‚Ä¢ El ID del duelo es incorrecto
‚Ä¢ El duelo ya no est√° pendiente
‚Ä¢ Ha expirado
‚Ä¢ Solo el retado puede rechazar

Usa <code>/duelos</code> para ver tus duelos actuales.`;
    }
    
    // Para obtener informaci√≥n del duelo rechazado, buscamos en los duelos del usuario
    const userDuels = await DuelService.getUserDuels(userid);
    const rejectedDuel = userDuels.find(d => d.id === duelId);
    const challengerName = rejectedDuel?.challenger?.firstName || 'Usuario';
    
    return `‚ùå <b>DUELO RECHAZADO</b>

Has rechazado el duelo de <b>${challengerName}</b>

üí≠ <b>Decisi√≥n respetada</b>
No todos los duelos deben ser aceptados.

üéØ <b>ALTERNATIVAS:</b>
‚Ä¢ Practica con preguntas normales
‚Ä¢ Reta t√∫ a otros usuarios: <code>/duelo @usuario</code>
‚Ä¢ Ve el ranking: <code>/ranking</code>

¬°Siempre habr√° m√°s oportunidades! üí™`;
    
  } catch (error) {
    console.error('Error manejando rechazar duelo:', error);
    return `‚ùå <b>Error inesperado</b>

Hubo un problema al rechazar el duelo.
Int√©ntalo de nuevo en unos minutos.`;
  }
}

// Funci√≥n para formatear duelos del usuario
function formatUserDuels(duels: any[], userid: string): string {
  if (duels.length === 0) {
    return `üó°Ô∏è <b>TUS DUELOS</b> üó°Ô∏è

‚ùå No tienes duelos activos.

üéØ <b>¬øQUIERES ACCI√ìN?</b>
‚Ä¢ Reta a alguien: <code>/duelo @usuario</code>
‚Ä¢ Ve el ranking: <code>/ranking</code>
‚Ä¢ Practica con preguntas normales

¬°Los duelos te est√°n esperando! ‚öîÔ∏è`;
  }

  const pending = duels.filter(d => d.status === 'pending');
  const active = duels.filter(d => d.status === 'active');
  const completed = duels.filter(d => d.status === 'completed');

  let message = `üó°Ô∏è <b>TUS DUELOS</b> üó°Ô∏è\n\n`;

  // Duelos pendientes
  if (pending.length > 0) {
    message += `‚è≥ <b>PENDIENTES (${pending.length}):</b>\n\n`;
    pending.slice(0, 3).forEach((duel, index) => {
      const opponent = duel.challengerTelegramId === userid ? 
        (duel.challenged.firstName || duel.challenged.username) :
        (duel.challenger.firstName || duel.challenger.username);
      const isChallenger = duel.challengerTelegramId === userid;
      
      message += `üó°Ô∏è <b>${index + 1}.</b> ${isChallenger ? 'Retaste a' : 'Te ret√≥'} ${opponent}\n`;
      message += `   üìù ${duel.questionsCount} preguntas | ‚è±Ô∏è ${Math.floor(duel.timeLimit / 60)} min\n`;
      message += `   üí∞ ${duel.stake} pts | üÜî ${duel.id}\n`;
      
      if (!isChallenger) {
        message += `   ‚ö° <code>/aceptar ${duel.id}</code> | <code>/rechazar ${duel.id}</code>\n`;
      }
      message += '\n';
    });
  }

  // Duelos activos
  if (active.length > 0) {
    message += `üî• <b>ACTIVOS (${active.length}):</b>\n\n`;
    active.slice(0, 2).forEach((duel, index) => {
      const opponent = duel.challengerTelegramId === userid ? 
        (duel.challenged.firstName || duel.challenged.username) :
        (duel.challenger.firstName || duel.challenger.username);
      
      message += `‚öîÔ∏è <b>${index + 1}.</b> VS ${opponent}\n`;
      message += `   üéØ En progreso...\n`;
      message += `   üí∞ ${duel.stake} pts en juego\n\n`;
    });
  }

  // Duelos recientes completados
  if (completed.length > 0) {
    message += `‚úÖ <b>RECIENTES (${Math.min(completed.length, 2)}):</b>\n\n`;
    completed.slice(-2).forEach((duel, index) => {
      const opponent = duel.challengerTelegramId === userid ? 
        (duel.challenged.firstName || duel.challenged.username) :
        (duel.challenger.firstName || duel.challenger.username);
      const won = duel.winnerId === userid;
      
      message += `${won ? 'üèÜ' : 'üíÄ'} VS ${opponent} - ${won ? 'GANASTE' : 'PERDISTE'}\n`;
      message += `   üí∞ ${won ? '+' : '-'}${duel.stake} pts\n\n`;
    });
  }

  // Estad√≠sticas generales
  const wins = completed.filter(d => d.winnerId === userid).length;
  const losses = completed.filter(d => d.winnerId && d.winnerId !== userid).length;
  const winRate = completed.length > 0 ? Math.round((wins / completed.length) * 100) : 0;

  message += `üìä <b>ESTAD√çSTICAS:</b>\n`;
  message += `üèÜ Ganados: ${wins} | üíÄ Perdidos: ${losses}\n`;
  message += `üìà Tasa de victoria: ${winRate}%\n\n`;

  message += `üéÆ <code>/duelo @usuario</code> para retar`;

  return message;
}

// Funci√≥n para manejar comando de prueba
async function handleTestCommand(userid: string, fromtelegramuser: any): Promise<string | null> {
  try {
    console.log('üß™ TEST COMMAND - Iniciando para:', fromtelegramuser.first_name);
    
    // Verificar si el usuario puede recibir mensajes privados
    const canReceivePrivate = await NotificationService.canReceivePrivateMessages(userid);
    
    console.log('üß™ TEST COMMAND - Puede recibir privados:', canReceivePrivate);
    
    if (canReceivePrivate) {
      // Enviar mensaje de prueba privado
      const testMessage = `üß™ <b>¬°PRUEBA EXITOSA!</b> ‚úÖ

üéâ <b>¬°Perfecto!</b> Tu configuraci√≥n est√° correcta.

üì± <b>YA PUEDES RECIBIR:</b>
üó°Ô∏è Notificaciones de duelos
üèÖ Alertas de logros  
üéØ Actualizaciones de metas
üìä Respuestas detalladas de comandos

üî• <b>¬°TODO FUNCIONANDO!</b>
A partir de ahora recibir√°s notificaciones privadas ricas en lugar de mensajes breves en el grupo.

‚ö° Usa cualquier comando como <code>/stats</code> para probarlo`;

      const privateSent = await sendTelegramMessage(userid, testMessage);
      
      if (privateSent) {
        return `‚úÖ <b>¬°PRUEBA EXITOSA!</b> üéâ

üì± Te he enviado un mensaje privado detallado.

üî• <b>CONFIGURACI√ìN PERFECTA:</b>
Tu bot est√° listo para notificaciones privadas.

üéØ <b>PR√ìXIMOS PASOS:</b>
‚Ä¢ Prueba comandos como <code>/stats</code>
‚Ä¢ Los duelos llegaran por privado
‚Ä¢ Respuestas de quiz tambi√©n

¬°Ya no habr√° m√°s spam en el grupo! üí™`;
      }
    }
    
    // Fallback si no puede recibir privadas
    return `‚ùå <b>CONFIGURACI√ìN PENDIENTE</b> üîß

üîç <b>PROBLEMA DETECTADO:</b>
No puedes recibir mensajes privados del bot.

‚úÖ <b>SOLUCI√ìN (s√∫per f√°cil):</b>
1. Busca <code>@OpoMelillaBot</code> en Telegram
2. Toca "Enviar mensaje"  
3. Env√≠a <code>/start</code> al bot
4. Vuelve aqu√≠ y usa <code>/test</code> otra vez

üí° <b>¬øPOR QU√â ES IMPORTANTE?</b>
Sin esto, solo recibir√°s mensajes breves en el grupo.
Con esto, recibir√°s notificaciones detalladas y privadas.

üéØ <b>¬°Vale la pena configurarlo!</b> Solo toma 30 segundos.`;
    
  } catch (error) {
    console.error('Error en comando test:', error);
    return `‚ùå <b>Error en la prueba</b>

Hubo un problema t√©cnico.
Int√©ntalo de nuevo en unos minutos.`;
  }
}

// Funci√≥n para manejar duelos del usuario
async function handleUserDuels(userid: string): Promise<string | null> {
  try {
    const userDuels = await DuelService.getUserDuels(userid);
    return formatUserDuels(userDuels, userid);
  } catch (error) {
    console.error('Error obteniendo duelos del usuario:', error);
    return `‚ùå <b>Error al obtener duelos</b>

Hubo un problema al obtener tus duelos. Int√©ntalo de nuevo en unos minutos.`;
  }
}

// Funci√≥n para manejar estad√≠sticas de duelos
async function handleDuelStats(userid: string): Promise<string | null> {
  try {
    // Obtener datos del usuario
    const user = await prisma.telegramuser.findUnique({
      where: { telegramUserId: userid }
    });
    
    if (!user) {
      return `‚ùå <b>Usuario no encontrado</b>

Parece que a√∫n no has iniciado el bot. Usa <code>/start</code> para comenzar.`;
    }
    
    // Obtener estad√≠sticas de duelos
    const duelStats = await DuelService.getDuelStatistics(userid);
    
    if (!duelStats) {
      return `üìä <b>TUS ESTAD√çSTICAS</b> üìä

üë§ <b>${user.firstName || user.username || 'Usuario'}</b>

üó°Ô∏è <b>DUELOS:</b>
   üìà Total disputados: 0
   üèÜ Ganados: 0
   üòî Perdidos: 0
   üìä Porcentaje victoria: 0%
   üî• Racha actual: 0

üí∞ <b>PUNTOS:</b>
   üíé Total: ${user.totalpoints || 0}
   üìä Nivel: ${user.level || 1}
   ‚ö° Racha respuestas: ${user.streak || 0}
   üèÖ Mejor racha: ${user.beststreak || 0}

üéÆ <b>¬°COMIENZA TU PRIMER DUELO!</b>
‚Ä¢ <code>/duelo @usuario</code> - Retar a alguien
‚Ä¢ <code>/ranking</code> - Ver clasificaci√≥n

‚öîÔ∏è ¬°Es hora de demostrar tus conocimientos!`;
    }
    
    // Combinar datos del usuario con estad√≠sticas de duelos
    const combinedStats = {
      ...user,
      totalDuels: duelStats.totalDuels,
      wonDuels: duelStats.wonDuels,
      lostDuels: duelStats.lostDuels,
      currentStreak: duelStats.currentStreak
    };
    
    return formatUserStats(combinedStats);
    
  } catch (error) {
    console.error('Error obteniendo estad√≠sticas de duelos:', error);
    return `‚ùå <b>Error al obtener estad√≠sticas</b>

Hubo un problema al obtener tus estad√≠sticas de duelos. Int√©ntalo de nuevo en unos minutos.`;
  }
}

// Funci√≥n para manejar comando /examen2018 - Pregunta espec√≠fica del examen oficial
async function handleExamen2018Command(userid: string, fromtelegramuser: any): Promise<string | null> {
  try {
    console.log('üéØ EXAMEN2018 - Obteniendo pregunta para usuario:', fromtelegramuser.first_name);
    
    // Obtener una pregunta aleatoria del examen oficial 2018
    const randomQuestion = await prisma.examenoficial2018.findFirst({
      where: {
        isactive: true
      },
      orderBy: {
        sendcount: 'asc' // Priorizar preguntas menos enviadas para rotaci√≥n equitativa
      },
      skip: Math.floor(Math.random() * 10) // Peque√±a aleatoriedad dentro de las menos enviadas
    });
    
    if (!randomQuestion) {
      return `‚ùå <b>Sin preguntas disponibles</b>

üîß El sistema de preguntas del Examen Oficial 2018 no tiene preguntas activas.
Contacta con los administradores.`;
    }
    
    // Incrementar el contador de env√≠os
    await prisma.examenoficial2018.update({
      where: { id: randomQuestion.id },
      data: { 
        sendcount: { increment: 1 },
        lastsuccessfulsendat: new Date()
      }
    });
    
    // Intentar enviar como poll interactivo primero
    const canReceivePrivate = await NotificationService.canReceivePrivateMessages(userid);
    
    if (canReceivePrivate) {
      // Crear poll interactivo
      const pollSent = await sendTelegramPoll(
        userid,
        `üéØ EXAMEN OFICIAL PERMANENCIA 2018 üéØ\n\nüìù Pregunta ${randomQuestion.questionnumber}/100:\n\n${randomQuestion.question}`,
        randomQuestion.options,
        randomQuestion.correctanswerindex,
        randomQuestion.id,
        'examenOficial2018'
      );
      
      if (pollSent) {
        console.log('‚úÖ Poll examen2018 enviado por privado exitosamente');
        return `üéØ <b>¬°Quiz Examen 2018 enviado!</b> ‚úÖ

üì± Te he enviado un quiz interactivo del Examen Oficial de Permanencia 2018 por mensaje privado.

üé≠ <b>Pregunta ${randomQuestion.questionnumber}/100</b>
üè∑Ô∏è Categor√≠a: ${randomQuestion.category}

üí° <b>Responde el quiz y recibir√°s:</b>
‚úÖ Resultado inmediato (correcto/incorrecto)
üí° Explicaci√≥n detallada
üìä Puntos y estad√≠sticas actualizadas

üîÑ <code>/examen2018</code> - Otra pregunta`;
      }
    }
    
    // Fallback: enviar mensaje de configuraci√≥n
    return `üìù <b>¬°QUIZ EXAMEN 2018 LISTO!</b> üéØ

üîç <b>PROBLEMA:</b> No puedo enviarte el quiz interactivo por aqu√≠ (evitar spam en grupo).

‚úÖ <b>SOLUCI√ìN R√ÅPIDA:</b>
1. Busca <code>@OpoMelillaBot</code> en Telegram
2. Env√≠a <code>/start</code> al bot
3. Vuelve aqu√≠ y usa <code>/examen2018</code> otra vez

üí° <b>¬øQU√â GANAS?</b>
üéÆ Quiz interactivo del Examen Oficial 2018
‚úÖ Respuestas instant√°neas con explicaciones
üìä Seguimiento de tu progreso
üéØ 100 preguntas reales de permanencia

‚ö° Solo toma 30 segundos configurarlo y recibir√°s los quiz completos!`;
    
  } catch (error) {
    console.error('‚ùå Error en comando /examen2018:', error);
    return `‚ùå <b>Error obteniendo pregunta</b>

Hubo un problema al obtener la pregunta del Examen Oficial 2018.
Int√©ntalo de nuevo en unos minutos.`;
  }
}

// Funci√≥n para enviar polls/quiz interactivos a Telegram
async function sendTelegramPoll(
  chatid: number | string, 
  question: string, 
  options: string[], 
  correctanswerindex: number, 
  questionid: string,
  sourcemodel: string = 'validQuestion'
): Promise<boolean> {
  try {
    console.log('üó≥Ô∏è Enviando poll a Telegram:', { 
      chatId, 
      questionLength: question.length,
      optionCount: options.length,
      sourceModel 
    });
    
    const response = await fetch(`https://api.telegram.org/bot${BOT_TOKEN}/sendPoll`, {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json',
      },
      body: JSON.stringify({
        chat_id: chatid,
        question: question,
        options: options,
        type: 'quiz', // Quiz tipo con respuesta correcta
        correct_option_id: correctAnswerIndex,
        is_anonymous: false, // Permitir ver qui√©n responde
        allows_multiple_answers: false,
        explanation: `üí° Explicaci√≥n disponible despu√©s de responder.`,
        explanation_parse_mode: 'HTML'
      }),
    });

    const result = await response.json();
    console.log('üó≥Ô∏è Respuesta de Telegram sendPoll:', result);
    
    if (!result.ok) {
      console.error('‚ùå Error enviando poll a Telegram:', result.description);
      return false;
    }

    // Registrar el poll en la base de datos para tracking
    try {
      await prisma.telegrampoll.create({
        data: {
          pollid: result.result.poll.id,
          questionid: questionId,
          chatid: chatId.toString(),
          correctanswerindex: correctAnswerIndex,
          options: options, // A√±adir las opciones del poll
          sourcemodel: sourceModel,
          createdat: new Date()
        }
      });
      console.log('‚úÖ Poll registrado en BD con ID:', result.result.poll.id);
    } catch (dbError) {
      console.error('‚ö†Ô∏è Error registrando poll en BD:', dbError);
      // No fallar el env√≠o por error de BD
    }

    console.log('‚úÖ Poll enviado exitosamente a Telegram');
    return true;
  } catch (error) {
    console.error('‚ùå Error en sendTelegramPoll:', error);
    return false;
  }
}

// Funci√≥n para manejar comando /examen2018stats - Estad√≠sticas avanzadas del examen oficial
async function handleExamen2018StatsCommand(userid: string, fromtelegramuser: any): Promise<string | null> {
  try {
    console.log('üìä EXAMEN2018STATS - Generando estad√≠sticas para usuario:', fromtelegramuser.first_name);
    
    // Obtener todas las respuestas del usuario a preguntas del examen2018
    // CORREGIDO: Usar la estructura correcta de las tablas
    const userResponses = await prisma.$queryRaw`
      SELECT 
        tr."iscorrect",
        tr."responseTime",
        tr.points,
        tr."answeredAt",
        tp."questionid",
        eo."questionNumber",
        eo.category,
        eo.difficulty
      FROM "TelegramResponse" tr
      JOIN "TelegramPoll" tp ON tr."questionid" = tp."pollid"
      JOIN "ExamenOficial2018" eo ON tp."questionid" = eo.id
      JOIN "TelegramUser" tu ON tr."userid" = tu.id
      WHERE tu."telegramUserId" = ${userid}
      AND tp."sourceModel" = 'examenOficial2018'
      ORDER BY tr."answeredAt" DESC
    ` as any[];

    // Calcular estad√≠sticas generales
    const totalQuestionsAnswered = userResponses.length;
    const correctAnswers = userResponses.filter(r => r.iscorrect).length;
    const totalQuestions = await prisma.examenoficial2018.count();
    const accuracy = totalQuestionsAnswered > 0 ? Math.round((correctAnswers / totalQuestionsAnswered) * 100) : 0;
    
    // Estad√≠sticas por categor√≠a
    const categoryStats = new Map();
    userResponses.forEach(response => {
      const category = response.category;
      if (!categoryStats.has(category)) {
        categoryStats.set(category, { total: 0, correct: 0 });
      }
      const stats = categoryStats.get(category);
      stats.total++;
      if (response.iscorrect) stats.correct++;
    });

    // Preguntas √∫nicas respondidas
    const uniqueQuestions = new Set(userResponses.map(r => r.questionnumber));
    const questionsAnswered = uniqueQuestions.size;
    const progress = Math.round((questionsAnswered / totalQuestions) * 100);

    // Tiempo promedio de respuesta (solo respuestas con tiempo v√°lido)
    const responsesWithTime = userResponses.filter(r => r.responseTime && r.responseTime > 0);
    const avgResponseTime = responsesWithTime.length > 0 
      ? Math.round(responsesWithTime.reduce((sum, r) => sum + r.responseTime, 0) / responsesWithTime.length)
      : 0;

    // Puntos totales del examen
    const totalPoints = userResponses.reduce((sum, r) => sum + (r.points || 0), 0);

    // Racha actual y mejor racha
    let currentStreak = 0;
    let bestStreak = 0;
    let tempStreak = 0;
    
    // Analizar racha (respuestas ordenadas por fecha descendente)
    for (let i = 0; i < userResponses.length; i++) {
      if (userResponses[i].iscorrect) {
        tempStreak++;
        if (i === 0) currentStreak = tempStreak; // La m√°s reciente
        bestStreak = Math.max(bestStreak, tempStreak);
      } else {
        if (i === 0) currentStreak = 0; // La m√°s reciente fue incorrecta
        tempStreak = 0;
      }
    }

    // Obtener √∫ltimas 5 respuestas para mostrar historial reciente
    const recentResponses = userResponses.slice(0, 5);

    // Construir mensaje de estad√≠sticas
    let statsMessage = `üìä <b>ESTAD√çSTICAS EXAMEN OFICIAL 2018</b> üéØ\n\n`;
    
    // Progreso general
    statsMessage += `üéØ <b>PROGRESO GENERAL:</b>\n`;
    statsMessage += `   üìù Preguntas respondidas: ${questionsAnswered}/${totalQuestions} (${progress}%)\n`;
    statsMessage += `   üîÑ Total intentos: ${totalQuestionsAnswered}\n`;
    statsMessage += `   ‚úÖ Respuestas correctas: ${correctAnswers}\n`;
    statsMessage += `   üìà Precisi√≥n: ${accuracy}%\n`;
    statsMessage += `   üíé Puntos obtenidos: ${totalPoints}\n\n`;

    // Rendimiento
    statsMessage += `‚ö° <b>RENDIMIENTO:</b>\n`;
    statsMessage += `   üî• Racha actual: ${currentStreak} aciertos\n`;
    statsMessage += `   üèÜ Mejor racha: ${bestStreak} aciertos\n`;
    if (avgResponseTime > 0) {
      statsMessage += `   ‚è±Ô∏è Tiempo promedio: ${avgResponseTime}s\n`;
    }
    statsMessage += `\n`;

    // Estad√≠sticas por categor√≠a
    if (categoryStats.size > 0) {
      statsMessage += `üìö <b>RENDIMIENTO POR CATEGOR√çA:</b>\n`;
      Array.from(categoryStats.entries())
        .sort((a, b) => (b[1].correct / b[1].total) - (a[1].correct / a[1].total))
        .forEach(([category, stats]) => {
          const categoryAccuracy = Math.round((stats.correct / stats.total) * 100);
          const categoryEmoji = categoryAccuracy >= 80 ? 'üü¢' : categoryAccuracy >= 60 ? 'üü°' : 'üî¥';
          statsMessage += `   ${categoryEmoji} ${category}: ${stats.correct}/${stats.total} (${categoryAccuracy}%)\n`;
        });
      statsMessage += `\n`;
    }

    // Historial reciente
    if (recentResponses.length > 0) {
      statsMessage += `üìã <b>√öLTIMAS RESPUESTAS:</b>\n`;
      recentResponses.forEach((response, index) => {
        const resultEmoji = response.iscorrect ? '‚úÖ' : '‚ùå';
        const date = new Date(response.answeredAt).toLocaleDateString('es-ES');
        const points = response.points || 0;
        statsMessage += `   ${resultEmoji} P${response.questionnumber} - ${response.category} (+${points}pts) - ${date}\n`;
      });
      statsMessage += `\n`;
    }

    // Objetivos y motivaci√≥n
    if (progress < 100) {
      const questionsRemaining = totalQuestions - questionsAnswered;
      statsMessage += `üéØ <b>PR√ìXIMO OBJETIVO:</b>\n`;
      if (progress < 25) {
        statsMessage += `   üöÄ Completa 25 preguntas (faltan ${25 - questionsAnswered})\n`;
      } else if (progress < 50) {
        statsMessage += `   üé™ Alcanza el 50% del examen (faltan ${questionsRemaining} preguntas)\n`;
      } else if (progress < 75) {
        statsMessage += `   üé≠ ¬°Supera el 75%! (faltan ${questionsRemaining} preguntas)\n`;
      } else {
        statsMessage += `   üèÜ ¬°Completa el examen! (faltan ${questionsRemaining} preguntas)\n`;
      }
      statsMessage += `\n`;
    } else {
      statsMessage += `üéâ <b>¬°EXAMEN COMPLETADO!</b>\n`;
      statsMessage += `   üèÜ Has respondido todas las preguntas oficiales\n`;
      statsMessage += `   üí™ ¬°Sigue practicando para mejorar tu precisi√≥n!\n\n`;
    }

    // Comandos √∫tiles
    statsMessage += `üîß <b>COMANDOS √öTILES:</b>\n`;
    statsMessage += `   üìù <code>/examen2018</code> - Nueva pregunta\n`;
    statsMessage += `   üìä <code>/stats</code> - Estad√≠sticas generales\n`;
    statsMessage += `   üèÜ <code>/ranking</code> - Ver clasificaci√≥n\n`;

    return statsMessage;

  } catch (error) {
    console.error('‚ùå Error en comando /examen2018stats:', error);
    return `‚ùå <b>Error obteniendo estad√≠sticas</b>

Hubo un problema al generar tus estad√≠sticas del Examen Oficial 2018.
Int√©ntalo de nuevo en unos minutos.`;
  }
}

// Funci√≥n para manejar comando /simulacro - Iniciar simulacro del examen oficial
async function handleSimulacroCommand(userid: string, fromtelegramuser: any): Promise<string | null> {
  try {
    console.log('üéØ SIMULACRO - Verificando si puede iniciar simulacro para usuario:', fromtelegramuser.first_name);
    
    // Verificar si el usuario puede recibir mensajes privados
    const canReceivePrivate = await NotificationService.canReceivePrivateMessages(userid);
    
    if (!canReceivePrivate) {
      return `‚ö†Ô∏è <b>CONFIGURACI√ìN REQUERIDA</b> üîß

üéØ <b>MODO SIMULACRO</b> requiere mensajes privados para funcionar correctamente.

‚úÖ <b>CONFIGURACI√ìN (30 segundos):</b>
1. Busca <code>@OpoMelillaBot</code> en Telegram
2. Env√≠a <code>/start</code> al bot
3. Vuelve aqu√≠ y usa <code>/simulacro</code> otra vez

üí° <b>¬øPOR QU√â ES NECESARIO?</b>
üéØ El simulacro son 100 preguntas (3 horas)
üì± Se env√≠an quiz interactivos por privado
‚è∞ Evita spam en el grupo durante 3 horas
üéÆ Experiencia completa como el examen real

üöÄ <b>¬°Vale la pena configurarlo! Solo toma 30 segundos.</b>`;
    }
    
    // Verificar si ya tiene un simulacro activo
    const activeSimulacro = await prisma.$queryRaw`
      SELECT s.id, s."startedAt", s."timeElapsed", s."currentQuestionIndex", s."totalQuestions"
      FROM "Simulacro" s
      JOIN "TelegramUser" tu ON s."userid" = tu.id
      WHERE tu."telegramUserId" = ${userid}
      AND s.status = 'in_progress'
      LIMIT 1
    ` as any[];
    
    if (activeSimulacro.length > 0) {
      const simulacro = activeSimulacro[0];
      const timeElapsed = Math.floor((Date.now() - new Date(simulacro.startedat).getTime()) / 1000);
      const timeRemaining = Math.max(0, 10800 - timeElapsed); // 3 horas l√≠mite
      const hoursRemaining = Math.floor(timeRemaining / 3600);
      const minutesRemaining = Math.floor((timeRemaining % 3600) / 60);
      
      return `üéØ <b>SIMULACRO EN PROGRESO</b> ‚è≥

Ya tienes un simulacro del Examen Oficial 2018 en curso.

üìä <b>PROGRESO ACTUAL:</b>
üìù Pregunta: ${simulacro.currentQuestionIndex}/${simulacro.totalQuestions}
‚è∞ Tiempo restante: ${hoursRemaining}h ${minutesRemaining}m
üóìÔ∏è Iniciado: ${new Date(simulacro.startedat).toLocaleString()}

üéÆ <b>OPCIONES:</b>
‚ñ∂Ô∏è <code>/simulacro_continuar</code> - Continuar examen
üö™ <code>/simulacro_abandonar</code> - Abandonar (perder√°s progreso)
üìä <code>/simulacro_historial</code> - Ver historial

üí° <b>TIP:</b> Solo puedes tener un simulacro activo a la vez para mantener la concentraci√≥n.`;
    }
    
    // Verificar que hay suficientes preguntas
    const questionCount = await prisma.examenoficial2018.count({
      where: { isactive: true }
    });
    
    if (questionCount < 100) {
      return `‚ùå <b>Sistema no disponible</b>

üîß No hay suficientes preguntas del Examen Oficial 2018.
üìû Contacta con los administradores.`;
    }
    
    // Iniciar nuevo simulacro
    const user = await prisma.telegramuser.findUnique({
      where: { telegramUserId: userid }
    });
    
    if (!user) {
      return `‚ùå <b>Usuario no registrado</b>

Usa <code>/start</code> para registrarte primero.`;
    }
    
    // Crear simulacro
    const simulacro = await prisma.simulacro.create({
      data: {
        userid: user.id,
        status: 'in_progress',
        timelimit: 10800,
        totalQuestions: 100
      }
    });
    
    // Obtener todas las preguntas y crear las respuestas
    const questions = await prisma.examenoficial2018.findMany({
      where: { isactive: true },
      orderBy: { questionnumber: 'asc' },
      take: 100
    });
    
    // Crear respuestas del simulacro usando tambi√©n ORM
    const simulacroResponses = questions.map(question => ({
      simulacroid: simulacro.id,
      questionid: question.id,
      questionnumber: question.questionnumber,
      questionCategory: question.category,
      questionDifficulty: question.difficulty,
      answeredat: null,
      selectedoption: null,
      iscorrect: null,
      responseTime: null,
      skipped: false
    }));
    
    await prisma.simulacroresponse.createMany({
      data: simulacroResponses
    });
    
    // Enviar primera pregunta
    const firstQuestion = questions[0];
    const firstHeader = `üéØ SIMULACRO 1/100 ‚è±Ô∏è3h\n\n`;
    const firstPollQuestion = truncatePollQuestion(firstHeader, firstQuestion.question);
    
    const pollSent = await sendTelegramPoll(
      userid,
      firstPollQuestion,
      firstQuestion.options,
      firstQuestion.correctanswerindex,
      `simulacro-${simulacro.id}-${firstQuestion.questionnumber}`,
      'simulacro'
    );
    
    if (pollSent) {
      return `üéØ <b>¬°SIMULACRO INICIADO!</b> üöÄ

‚úÖ Te he enviado la primera pregunta por mensaje privado.

üìã <b>INSTRUCCIONES IMPORTANTES:</b>
‚è∞ <b>Tiempo l√≠mite:</b> 3 horas (180 minutos)
üìù <b>Preguntas:</b> 100 del examen oficial
üö´ <b>Sin pausas:</b> Una vez iniciado, debe completarse
üìä <b>Aprobado:</b> 50% o m√°s (‚â•50 correctas)

üéÆ <b>COMANDOS DURANTE EL EXAMEN:</b>
‚ñ∂Ô∏è <code>/simulacro_continuar</code> - Si se interrumpe
üö™ <code>/simulacro_abandonar</code> - Abandonar examen

üçÄ <b>¬°BUENA SUERTE!</b> Responde con calma y concentraci√≥n.

üí° <b>TIP:</b> Este es un simulacro del examen real de permanencia 2018.`;
    } else {
      return `‚ùå <b>Error enviando pregunta</b>

No se pudo enviar la primera pregunta. Int√©ntalo de nuevo.`;
    }
    
  } catch (error) {
    console.error('‚ùå Error en comando /simulacro:', error);
    return `‚ùå <b>Error iniciando simulacro</b>

Hubo un problema al iniciar el simulacro del Examen Oficial 2018.
Int√©ntalo de nuevo en unos minutos.`;
  }
}

// Funci√≥n para manejar comando /simulacro_continuar - Continuar simulacro en progreso
async function handleSimulacroResumeCommand(userid: string, fromtelegramuser: any): Promise<string | null> {
  try {
    console.log('‚ñ∂Ô∏è SIMULACRO_CONTINUAR - Para usuario:', fromtelegramuser.first_name);
    
    // Buscar simulacro 2024 activo primero
    const activeSimulacro2024 = await Simulacro2024Service.getActiveSimulacro(userid);
    
    if (activeSimulacro2024) {
      console.log('üéØ SIMULACRO 2024 activo encontrado, continuando...');
      
      // Obtener la siguiente pregunta del simulacro 2024
      const nextQuestion = await Simulacro2024Service.getCurrentQuestion(activeSimulacro2024.id);
      
      if (!nextQuestion) {
        return `‚úÖ <b>SIMULACRO COMPLETADO</b>

¬°Has completado todas las preguntas!

üìã <code>/simulacro_historial</code> - Ver resultados`;
      }
      
      // Calcular tiempo restante
      const timeElapsed = Math.floor((Date.now() - new Date(activeSimulacro2024.startedat).getTime()) / 1000);
      const timeRemaining = Math.max(0, 10800 - timeElapsed);
      const hoursRemaining = Math.floor(timeRemaining / 3600);
      const minutesRemaining = Math.floor((timeRemaining % 3600) / 60);
      
      // Enviar pregunta actual
      const pollSent = await sendTelegramPoll(
        userid,
        `üéØ SIMULACRO EXAMEN 2024 - Pregunta ${nextQuestion.questionnumber}/100\n‚è∞ Tiempo restante: ${hoursRemaining}h ${minutesRemaining}m\n\n${nextQuestion.question}`,
        nextQuestion.options,
        nextQuestion.correctanswerindex,
        nextQuestion.id,
        'simulacro2024'
      );
      
      if (pollSent) {
        return `‚ñ∂Ô∏è <b>SIMULACRO 2024 CONTINUADO</b> ‚úÖ

Te he enviado la pregunta actual por mensaje privado.

üìä <b>PROGRESO:</b>
üìù Pregunta: ${nextQuestion.questionnumber}/100
‚è∞ Tiempo restante: ${hoursRemaining}h ${minutesRemaining}m

üí™ ¬°Sigue adelante con el Examen 2024!`;
      } else {
        return `‚ùå <b>Error enviando pregunta</b>

No se pudo enviar la pregunta. Int√©ntalo de nuevo.`;
      }
    }
    
    // Si no hay simulacro 2024 activo, buscar simulacro 2018 activo
    const activeSimulacro = await prisma.$queryRaw`
      SELECT s.id, s."startedAt", s."timeElapsed", s."currentQuestionIndex", s."totalQuestions"
      FROM "Simulacro" s
      JOIN "TelegramUser" tu ON s."userid" = tu.id
      WHERE tu."telegramUserId" = ${userid}
      AND s.status = 'in_progress'
      LIMIT 1
    ` as any[];
    
    if (activeSimulacro.length === 0) {
      return `‚ùå <b>No hay simulacro activo</b>

No tienes ning√∫n simulacro en progreso.

üéØ <b>OPCIONES:</b>
üöÄ <code>/simulacro</code> - Iniciar simulacro 2018
üöÄ <code>/simulacro2024</code> - Iniciar simulacro 2024
üìã <code>/simulacro_historial</code> - Ver historial`;
    }
    
    const simulacro = activeSimulacro[0];
    const timeElapsed = Math.floor((Date.now() - new Date(simulacro.startedat).getTime()) / 1000);
    
    // Verificar si ha expirado
    if (timeElapsed >= 10800) {
      // Marcar como expirado
      await prisma.$queryRaw`
        UPDATE "Simulacro" 
        SET status = 'expired', "completedAt" = CURRENT_TIMESTAMP
        WHERE id = ${simulacro.id}
      `;
      
      return `‚è∞ <b>SIMULACRO EXPIRADO</b>

Tu simulacro ha expirado (l√≠mite de 3 horas).

üìä <b>PROGRESO FINAL:</b>
üìù Pregunta alcanzada: ${simulacro.currentQuestionIndex}/${simulacro.totalQuestions}
‚è∞ Tiempo transcurrido: 3h 0m

üöÄ <b>SIGUIENTE PASO:</b>
<code>/simulacro</code> - Iniciar nuevo simulacro`;
    }
    
    // Obtener siguiente pregunta sin responder
    const nextQuestion = await prisma.$queryRaw`
      SELECT sr."questionNumber", eo.question, eo.options, eo."correctAnswerIndex"
      FROM "SimulacroResponse" sr
      JOIN "ExamenOficial2018" eo ON sr."questionid" = eo.id
      WHERE sr."simulacroId" = ${simulacro.id}
      AND sr."answeredAt" IS NULL
      AND sr.skipped = false
      ORDER BY sr."questionNumber" ASC
      LIMIT 1
    ` as any[];
    
    if (nextQuestion.length === 0) {
      return `‚úÖ <b>SIMULACRO COMPLETADO</b>

¬°Has completado todas las preguntas!

üìã <code>/simulacro_historial</code> - Ver resultados`;
    }
    
    const question = nextQuestion[0];
    const timeRemaining = Math.max(0, 10800 - timeElapsed);
    const hoursRemaining = Math.floor(timeRemaining / 3600);
    const minutesRemaining = Math.floor((timeRemaining % 3600) / 60);
    
    // Enviar pregunta actual
    const pollSent = await sendTelegramPoll(
      userid,
      `üéØ SIMULACRO ${question.questionnumber}/100 ‚è±Ô∏è${hoursRemaining}h${minutesRemaining}m\n\n${question.question}`,
      question.options,
      question.correctanswerindex,
      `simulacro-${simulacro.id}-${question.questionnumber}`,
      'simulacro'
    );
    
    if (pollSent) {
      return `‚ñ∂Ô∏è <b>SIMULACRO CONTINUADO</b> ‚úÖ

Te he enviado la pregunta actual por mensaje privado.

üìä <b>PROGRESO:</b>
üìù Pregunta: ${question.questionnumber}/100
‚è∞ Tiempo restante: ${hoursRemaining}h ${minutesRemaining}m

üí™ ¬°Sigue adelante!`;
    } else {
      return `‚ùå <b>Error enviando pregunta</b>

No se pudo enviar la pregunta. Int√©ntalo de nuevo.`;
    }
    
  } catch (error) {
    console.error('‚ùå Error en simulacro_continuar:', error);
    return `‚ùå <b>Error continuando simulacro</b>

Int√©ntalo de nuevo en unos minutos.`;
  }
}

// Funci√≥n para manejar comando /simulacro_abandonar - Abandonar simulacro actual
async function handleSimulacroAbandonCommand(userid: string, fromtelegramuser: any): Promise<string | null> {
  try {
    console.log('üö™ SIMULACRO_ABANDONAR - Para usuario:', fromtelegramuser.first_name);
    
    // Buscar simulacro activo
    const activeSimulacro = await prisma.$queryRaw`
      SELECT s.id, s."startedAt", s."currentQuestionIndex", s."totalQuestions"
      FROM "Simulacro" s
      JOIN "TelegramUser" tu ON s."userid" = tu.id
      WHERE tu."telegramUserId" = ${userid}
      AND s.status = 'in_progress'
      LIMIT 1
    ` as any[];
    
    if (activeSimulacro.length === 0) {
      return `‚ùå <b>No hay simulacro activo</b>

No tienes ning√∫n simulacro en progreso para abandonar.

üéØ <code>/simulacro</code> - Iniciar nuevo simulacro`;
    }
    
    const simulacro = activeSimulacro[0];
    
    // Marcar como abandonado
    await prisma.$queryRaw`
      UPDATE "Simulacro" 
      SET status = 'abandoned', "completedAt" = CURRENT_TIMESTAMP
      WHERE id = ${simulacro.id}
    `;
    
    const timeElapsed = Math.floor((Date.now() - new Date(simulacro.startedat).getTime()) / 1000);
    const hoursElapsed = Math.floor(timeElapsed / 3600);
    const minutesElapsed = Math.floor((timeElapsed % 3600) / 60);
    
    return `üö™ <b>SIMULACRO ABANDONADO</b> 

Has abandonado el simulacro del Examen Oficial 2018.

üìä <b>PROGRESO AL ABANDONAR:</b>
üìù Pregunta alcanzada: ${simulacro.currentQuestionIndex}/${simulacro.totalQuestions}
‚è∞ Tiempo transcurrido: ${hoursElapsed}h ${minutesElapsed}m
üìÖ Iniciado: ${new Date(simulacro.startedat).toLocaleString()}

üí° <b>IMPORTANTE:</b>
El progreso no se guarda al abandonar.

üöÄ <b>PR√ìXIMO PASO:</b>
<code>/simulacro</code> - Iniciar nuevo simulacro cuando est√©s listo

üéØ ¬°No te desanimes! Los simulacros son para practicar.`;
    
  } catch (error) {
    console.error('‚ùå Error en simulacro_abandonar:', error);
    return `‚ùå <b>Error abandonando simulacro</b>

Int√©ntalo de nuevo en unos minutos.`;
  }
}

// Funci√≥n para manejar comando /simulacro_historial - Ver historial de simulacros
async function handleSimulacroHistoryCommand(userid: string, fromtelegramuser: any): Promise<string | null> {
  try {
    console.log('üìã SIMULACRO_HISTORIAL - Para usuario:', fromtelegramuser.first_name);
    
    // Obtener historial de simulacros
    const simulacros = await prisma.$queryRaw`
      SELECT s.id, s.status, s."startedAt", s."completedAt", s."timeElapsed",
             s."finalScore", s."finalPercentage", s.passed, s."totalQuestions",
             s."averageResponseTime"
      FROM "Simulacro" s
      JOIN "TelegramUser" tu ON s."userid" = tu.id
      WHERE tu."telegramUserId" = ${userid}
      ORDER BY s."startedAt" DESC
      LIMIT 10
    ` as any[];
    
    if (simulacros.length === 0) {
      return `üìã <b>HISTORIAL DE SIMULACROS</b>

‚ùå A√∫n no has realizado ning√∫n simulacro.

üéØ <b>¬øQU√â ES UN SIMULACRO?</b>
üéì Examen completo de 100 preguntas del oficial 2018
‚è∞ Tiempo l√≠mite: 3 horas (como el real)
üìä Puntuaci√≥n oficial: ‚â•50% para aprobar
üèÜ Pr√°ctica en condiciones reales

üöÄ <b>INICIAR PRIMER SIMULACRO:</b>
<code>/simulacro</code> - ¬°Ponte a prueba!

üí° <b>TIP:</b> Es la mejor forma de prepararse para el examen real.`;
    }
    
    let message = `üìã <b>HISTORIAL DE SIMULACROS</b>\n\n`;
    message += `üéØ <b>Total realizados:</b> ${simulacros.length}\n\n`;
    
    // Estad√≠sticas generales
    const completed = simulacros.filter(s => s.status === 'completed');
    const passed = completed.filter(s => s.passed);
    const avgScore = completed.length > 0 
      ? Math.round(completed.reduce((sum, s) => sum + s.finalScore, 0) / completed.length)
      : 0;
    
    if (completed.length > 0) {
      message += `üìä <b>ESTAD√çSTICAS GENERALES:</b>\n`;
      message += `‚úÖ Completados: ${completed.length}\n`;
      message += `üèÜ Aprobados: ${passed.length} (${Math.round((passed.length / completed.length) * 100)}%)\n`;
      message += `üìà Puntuaci√≥n promedio: ${avgScore}/100\n\n`;
    }
    
    message += `üìã <b>√öLTIMOS SIMULACROS:</b>\n\n`;
    
    simulacros.slice(0, 5).forEach((sim, index) => {
      const date = new Date(sim.startedat).toLocaleDateString();
      const statusEmoji = {
        'completed': sim.passed ? 'üèÜ' : 'üìù',
        'abandoned': 'üö™',
        'expired': '‚è∞',
        'in_progress': '‚ñ∂Ô∏è'
      }[sim.status] || 'üìÑ';
      
      const statusText = {
        'completed': sim.passed ? `APROBADO (${sim.finalScore}/100)` : `SUSPENDIDO (${sim.finalScore}/100)`,
        'abandoned': 'ABANDONADO',
        'expired': 'EXPIRADO',
        'in_progress': 'EN PROGRESO'
      }[sim.status] || 'UNKNOWN';
      
      message += `${statusEmoji} <b>${index + 1}.</b> ${statusText}\n`;
      message += `   üìÖ ${date}`;
      
      if (sim.status === 'completed') {
        const percentage = Math.round(sim.finalPercentage);
        const timeInMinutes = Math.round(sim.timeElapsed / 60);
        const avgTime = sim.averageResponseTime ? Math.round(sim.averageResponseTime) : 0;
        message += ` | üìä ${percentage}% | ‚è±Ô∏è ${timeInMinutes}min`;
        if (avgTime > 0) {
          message += ` | üïê ${avgTime}s/preg`;
        }
      }
      
      message += `\n\n`;
    });
    
    if (simulacros.length > 5) {
      message += `<i>...y ${simulacros.length - 5} m√°s</i>\n\n`;
    }
    
    // Simulacro activo
    const activeSimulacro = simulacros.find(s => s.status === 'in_progress');
    if (activeSimulacro) {
      message += `‚ñ∂Ô∏è <b>SIMULACRO ACTIVO:</b>\n`;
      message += `<code>/simulacro_continuar</code> - Continuar examen\n\n`;
    } else {
      message += `üöÄ <b>SIGUIENTE PASO:</b>\n`;
      message += `<code>/simulacro</code> - Nuevo simulacro\n\n`;
    }
    
    message += `üí° <b>TIP:</b> Practica regularmente para mejorar tu puntuaci√≥n.`;
    
    return message;
    
  } catch (error) {
    console.error('‚ùå Error en simulacro_historial:', error);
    return `‚ùå <b>Error obteniendo historial</b>

Int√©ntalo de nuevo en unos minutos.`;
  }
}

// Helper function to truncate poll question if it exceeds Telegram's 300 char limit
function truncatePollQuestion(header: string, question: string, maxLength: number = 300): string {
  const fullText = `${header}${question}`;
  
  if (fullText.length <= maxLength) {
    return fullText;
  }
  
  // Calculate how much space we have for the question after the header
  const availableSpace = maxLength - header.length - 3; // -3 for "..."
  
  if (availableSpace < 50) {
    // If header is too long, truncate it too
    const shortHeader = header.substring(0, Math.floor(maxLength * 0.3));
    const questionSpace = maxLength - shortHeader.length - 3;
    return `${shortHeader}${question.substring(0, questionSpace)}...`;
  }
  
  // Truncate question and add ellipsis
  return `${header}${question.substring(0, availableSpace)}...`;
}

// Helper function to calculate current streak of correct answers
function calculateCurrentStreak(responses: boolean[]): number {
  let streak = 0;
  for (const isCorrect of responses) {
    if (isCorrect) {
      streak++;
    } else {
      break;
    }
  }
  return streak;
}

// ======== FUNCIONES PARA EXAMEN 2024 ========

// Funci√≥n para manejar comando /examen2024 - Pregunta del examen oficial 2024
async function handleExamen2024Command(userid: string, fromtelegramuser: any): Promise<string | null> {
  try {
    console.log('üéØ EXAMEN2024 - Para usuario:', fromtelegramuser.first_name);
    
    // Obtener pregunta aleatoria del examen 2024
    const questions = await (prisma as any).examenOficial2024.findMany({
      where: { isactive: true },
      orderBy: { questionnumber: 'asc' }
    });
    
    if (questions.length === 0) {
      return `‚ùå <b>NO HAY PREGUNTAS DISPONIBLES</b>\n\nEl Examen Oficial 2024 no est√° disponible en este momento.\nContacta al administrador.`;
    }
    
    // Seleccionar pregunta aleatoria
    const randomIndex = Math.floor(Math.random() * questions.length);
    const randomQuestion = questions[randomIndex];
    
    // Incrementar contador de env√≠os
    await (prisma as any).examenOficial2024.update({
      where: { id: randomQuestion.id },
      data: { sendcount: { increment: 1 }, lastsuccessfulsendat: new Date() }
    });
    
    // Preparar header con informaci√≥n
    const header = `üéØ <b>EXAMEN OFICIAL 2024 - Pregunta ${randomQuestion.questionnumber}/100</b>\n\n`;
    const pollQuestion = truncatePollQuestion(header, randomQuestion.question);
    
    // Enviar poll de Telegram
    const pollSent = await sendTelegramPoll(
      userid,
      pollQuestion,
      randomQuestion.options,
      randomQuestion.correctanswerindex,
      randomQuestion.id,
      'examenOficial2024'
    );
    
    if (pollSent) {
      console.log('‚úÖ EXAMEN2024 - Poll enviado exitosamente');
      return null; // Poll enviado, no necesitamos texto adicional
    } else {
      console.error('‚ùå EXAMEN2024 - Error enviando poll');
      return `‚ùå <b>ERROR ENVIANDO PREGUNTA</b>\n\nHubo un problema t√©cnico.\nIntenta nuevamente en unos momentos.`;
    }
    
  } catch (error) {
    console.error('‚ùå Error en handleExamen2024Command:', error);
    return `‚ùå <b>ERROR INTERNO</b>\n\nHubo un problema procesando tu solicitud.\nContacta al administrador si persiste.`;
  }
}

// Funci√≥n para manejar comando /examen2024stats - Estad√≠sticas del examen oficial 2024
async function handleExamen2024StatsCommand(userid: string, fromtelegramuser: any): Promise<string | null> {
  try {
    console.log('üìä EXAMEN2024STATS - Para usuario:', fromtelegramuser.first_name);
    
    // Obtener estad√≠sticas usando query directo para evitar problemas de tipos
    const userResponses = await prisma.$queryRaw`
      SELECT 
        tr."iscorrect",
        tr."responseTime",
        tr.points,
        tr."answeredAt",
        tp."questionid",
        eo."questionNumber",
        eo.category,
        eo.difficulty
      FROM "TelegramResponse" tr
      JOIN "TelegramPoll" tp ON tr."questionid" = tp."pollid"
      JOIN "ExamenOficial2024" eo ON tp."questionid" = eo."id"
      WHERE tr."telegramUserId" = ${userid}
        AND tp."sourceModel" = 'examenOficial2024'
      ORDER BY tr."answeredAt" DESC
    ` as any[];
    
    if (userResponses.length === 0) {
      return `üìä <b>ESTAD√çSTICAS EXAMEN 2024</b>\n\n‚ùì A√∫n no has respondido ninguna pregunta del examen oficial 2024.\n\nüéØ Usa <code>/examen2024</code> para empezar a practicar.`;
    }
    
    // Calcular estad√≠sticas
    const totalAnswered = userResponses.length;
    const correctAnswers = userResponses.filter((r: any) => r.iscorrect === true).length;
    const accuracy = totalAnswered > 0 ? (correctAnswers / totalAnswered * 100) : 0;
    
    // Distribuci√≥n por categor√≠as
    const categoryStats: { [key: string]: { total: number; correct: number } } = {};
    userResponses.forEach((response: any) => {
      const category = response.category || 'Sin categor√≠a';
      if (!categoryStats[category]) {
        categoryStats[category] = { total: 0, correct: 0 };
      }
      categoryStats[category].total++;
      if (response.iscorrect) {
        categoryStats[category].correct++;
      }
    });
    
    // Tiempo promedio de respuesta
    const responsesWithTime = userResponses.filter((r: any) => r.responseTime && r.responseTime > 0);
    const avgResponseTime = responsesWithTime.length > 0 ? 
      responsesWithTime.reduce((sum: number, r: any) => sum + r.responseTime, 0) / responsesWithTime.length : 0;
    
    // Preguntas √∫nicas respondidas
    const uniqueQuestions = new Set(userResponses.map((r: any) => r.questionnumber)).size;
    
    // Crear mensaje de respuesta
    let statsMessage = `üìä <b>ESTAD√çSTICAS EXAMEN OFICIAL 2024</b>\n\n`;
    statsMessage += `üìà <b>RENDIMIENTO GENERAL:</b>\n`;
    statsMessage += `‚Ä¢ Preguntas respondidas: ${totalAnswered}\n`;
    statsMessage += `‚Ä¢ Preguntas √∫nicas: ${uniqueQuestions}/100\n`;
    statsMessage += `‚Ä¢ Respuestas correctas: ${correctAnswers}/${totalAnswered}\n`;
    statsMessage += `‚Ä¢ Precisi√≥n: ${accuracy.toFixed(1)}%\n`;
    
    if (avgResponseTime > 0) {
      statsMessage += `‚Ä¢ Tiempo promedio: ${avgResponseTime.toFixed(1)}s\n`;
    }
    
    // Mostrar estad√≠sticas por categor√≠a (las primeras 3)
    const categoryEntries = Object.entries(categoryStats)
      .sort(([,a], [,b]) => b.total - a.total)
      .slice(0, 3);
    
    if (categoryEntries.length > 0) {
      statsMessage += `\nüìö <b>POR CATEGOR√çAS (TOP 3):</b>\n`;
      categoryEntries.forEach(([category, stats]) => {
        const categoryAccuracy = stats.total > 0 ? (stats.correct / stats.total * 100) : 0;
        statsMessage += `‚Ä¢ ${category}: ${stats.correct}/${stats.total} (${categoryAccuracy.toFixed(1)}%)\n`;
      });
    }
    
    // Racha actual (√∫ltimas 10 respuestas)
    const recent10 = userResponses.slice(0, 10);
    const currentStreak = calculateCurrentStreak(recent10.map((r: any) => r.iscorrect));
    
    if (currentStreak > 0) {
      statsMessage += `\nüî• <b>RACHA ACTUAL:</b> ${currentStreak} respuestas correctas`;
    }
    
    statsMessage += `\n\nüéØ <code>/examen2024</code> - Practicar m√°s\nüìä <code>/ranking</code> - Ver ranking general`;
    
    return statsMessage;
    
  } catch (error) {
    console.error('‚ùå Error en handleExamen2024StatsCommand:', error);
    return `‚ùå <b>ERROR OBTENIENDO ESTAD√çSTICAS</b>\n\nHubo un problema procesando tus estad√≠sticas del examen 2024.\nContacta al administrador si persiste.`;
  }
}

// Funci√≥n para manejar comando /simulacro2024 - Iniciar simulacro del examen oficial 2024
async function handleSimulacro2024Command(userid: string, fromtelegramuser: any): Promise<string | null> {
  try {
    console.log('üéØ SIMULACRO2024 - Para usuario:', fromtelegramuser.first_name);
    
    // Verificar si puede iniciar simulacro
    const canStart = await Simulacro2024Service.canStartSimulacro(userid);
    if (!canStart.canStart) {
      const reason = canStart.reason || 'No se puede iniciar el simulacro';
      return `‚ùå <b>NO PUEDES INICIAR SIMULACRO 2024</b>

${reason}

üí° <b>OPCIONES DISPONIBLES:</b>
${reason.includes('progreso') ? 
  '‚ñ∂Ô∏è <code>/simulacro_continuar</code> - Continuar simulacro actual\nüö™ <code>/simulacro_abandonar</code> - Abandonar simulacro actual' : 
  'üéØ <code>/examen2024</code> - Preguntas individuales del 2024\nüéØ <code>/examen2018</code> - Preguntas del examen 2018'
}`;
    }
    
    // Iniciar simulacro
    const result = await Simulacro2024Service.startSimulacro(userid);
    if (!result) {
      return `‚ùå <b>ERROR INICIANDO SIMULACRO 2024</b>

No se pudo iniciar el simulacro. Int√©ntalo de nuevo en unos minutos.`;
    }
    
    const { simulacro, firstQuestion } = result;
    
    console.log('üéØ SIMULACRO2024 INICIADO:', {
      simulacroid: simulacro.id,
      firstquestionnumber: firstQuestion.questionnumber
    });
    
    // Enviar primera pregunta
    const pollHeader = `üéØ SIMULACRO EXAMEN 2024 - Pregunta ${firstQuestion.questionnumber}/100\n‚è∞ Tiempo l√≠mite: 3 horas\n\n`;
    const pollQuestion = truncatePollQuestion(pollHeader, firstQuestion.question);
    
    const success = await sendTelegramPoll(
      fromtelegramuser.id,
      pollQuestion,
      firstQuestion.options,
      firstQuestion.correctanswerindex,
      firstQuestion.id,
      'simulacro2024'
    );
    
    if (!success) {
      // Si falla el env√≠o, marcar simulacro como abandonado
      await prisma.simulacro.update({
        where: { id: simulacro.id },
        data: { status: 'abandoned' }
      });
      
      return `‚ùå <b>ERROR ENVIANDO PREGUNTA</b>

No se pudo enviar la primera pregunta del simulacro. Int√©ntalo de nuevo.`;
    }
    
    return `üéØ <b>SIMULACRO EXAMEN 2024 INICIADO</b>

üìã <b>INFORMACI√ìN DEL SIMULACRO:</b>
üìù Preguntas: 100 (del examen oficial 2024)
‚è∞ Tiempo l√≠mite: 3 horas
üéØ Para aprobar: ‚â•50 respuestas correctas

üìä <b>PRIMERA PREGUNTA ENVIADA</b>
Responde el poll que acabas de recibir.

üí° <b>COMANDOS √öTILES:</b>
‚ñ∂Ô∏è <code>/simulacro_continuar</code> - Si pierdes el hilo
üö™ <code>/simulacro_abandonar</code> - Para abandonar

üçÄ <b>¬°Buena suerte con el Examen 2024!</b>`;
    
  } catch (error) {
    console.error('‚ùå Error en simulacro2024:', error);
    return `‚ùå <b>Error iniciando simulacro 2024</b>

Ha ocurrido un error. Int√©ntalo de nuevo en unos minutos.`;
  }
}

// Funci√≥n para manejar comando /ranking_oficial2018 - Ranking espec√≠fico del examen 2018
async function handleRankingOficial2018Command(userid: string, fromtelegramuser: any): Promise<string | null> {
  try {
    console.log('üèÜ RANKING_OFICIAL2018 COMMAND - Ranking espec√≠fico del examen 2018');
    
    // Obtener ranking espec√≠fico del examen 2018
    const ranking = await ExamRankingService.getExam2018Ranking(10);
    
    if (!ranking || ranking.length === 0) {
      return `‚ùå <b>No hay datos disponibles</b>

üìä El ranking del examen oficial 2018 no tiene datos suficientes a√∫n.

üí° <b>Para aparecer en el ranking:</b>
‚Ä¢ Usa <code>/simulacro</code> para practicar
‚Ä¢ Responde preguntas del examen 2018

üéØ <code>/examen2018</code> - Practicar m√°s`;
    }
    
    return formatExamRanking(ranking, '2018');
    
  } catch (error) {
    console.error('‚ùå Error en ranking_oficial2018:', error);
    return `‚ùå <b>Error obteniendo ranking</b>

Hubo un problema al obtener el ranking espec√≠fico del examen 2018. Int√©ntalo de nuevo en unos minutos.`;
  }
}

// Funci√≥n para manejar comando /ranking_oficial2024 - Ranking espec√≠fico del examen 2024
async function handleRankingOficial2024Command(userid: string, fromtelegramuser: any): Promise<string | null> {
  try {
    console.log('üèÜ RANKING_OFICIAL2024 COMMAND - Ranking espec√≠fico del examen 2024');
    
    // Obtener ranking espec√≠fico del examen 2024
    const ranking = await ExamRankingService.getExam2024Ranking(10);
    
    if (!ranking || ranking.length === 0) {
      return `‚ùå <b>No hay datos disponibles</b>

üìä El ranking del examen oficial 2024 no tiene datos suficientes a√∫n.

üí° <b>Para aparecer en el ranking:</b>
‚Ä¢ Usa <code>/simulacro2024</code> para practicar
‚Ä¢ Responde preguntas del examen 2024

üéØ <code>/examen2024</code> - Practicar m√°s`;
    }
    
    return formatExamRanking(ranking, '2024');
    
  } catch (error) {
    console.error('‚ùå Error en ranking_oficial2024:', error);
    return `‚ùå <b>Error obteniendo ranking</b>

Hubo un problema al obtener el ranking espec√≠fico del examen 2024. Int√©ntalo de nuevo en unos minutos.`;
  }
}

// Funci√≥n para manejar comando /comparativa_examenes - Comparativa personal entre ex√°menes
async function handleComparativaExamenesCommand(userid: string, fromtelegramuser: any): Promise<string | null> {
  try {
    console.log('üìä COMPARATIVA_EXAMENES COMMAND - Comparativa personal entre ex√°menes');
    
    // Obtener comparativa personal de ambos ex√°menes
    const comparison = await ExamRankingService.getUserExamComparison(userid);
    
    if (!comparison) {
      return `‚ùå <b>Error obteniendo comparaci√≥n</b>

Hubo un problema al obtener la comparaci√≥n entre los ex√°menes. Int√©ntalo de nuevo en unos minutos.`;
    }
    
    return formatExamComparison(comparison, fromtelegramuser.first_name || fromtelegramuser.username || 'Usuario');
    
  } catch (error) {
    console.error('‚ùå Error en comparativa_examenes:', error);
    return `‚ùå <b>Error obteniendo comparaci√≥n</b>

Hubo un problema al obtener la comparaci√≥n entre los ex√°menes. Int√©ntalo de nuevo en unos minutos.`;
  }
}

// Funci√≥n para manejar comando /simulacro_oficial - Selector de simulacro oficial
async function handleSimulacroOficialCommand(userid: string, fromtelegramuser: any): Promise<string | null> {
  try {
    console.log('üéØ SIMULACRO_OFICIAL COMMAND - Selector de simulacro oficial');
    
    return `üéØ <b>SELECCIONA TU SIMULACRO OFICIAL</b> üéØ

üìã <b>Ex√°menes oficiales disponibles:</b>

ü•á <b>EXAMEN 2018</b>
‚Ä¢ 100 preguntas del examen oficial
‚Ä¢ Tiempo: 3 horas (180 minutos)
‚Ä¢ Comando: <code>/simulacro</code>

ü•à <b>EXAMEN 2024</b>
‚Ä¢ 100 preguntas del examen oficial
‚Ä¢ Tiempo: 3 horas (180 minutos)
‚Ä¢ Comando: <code>/simulacro2024</code>

üìä <b>COMPARAR TUS RESULTADOS:</b>
‚Ä¢ <code>/comparativa_examenes</code> - Tu rendimiento en ambos

üèÜ <b>VER RANKINGS:</b>
‚Ä¢ <code>/ranking_oficial2018</code> - Mejores del 2018
‚Ä¢ <code>/ranking_oficial2024</code> - Mejores del 2024

üí° <b>¬øCu√°l prefieres practicar?</b>`;
    
  } catch (error) {
    console.error('‚ùå Error en simulacro_oficial:', error);
    return `‚ùå <b>Error obteniendo selector</b>

Hubo un problema al obtener el selector de simulacro oficial. Int√©ntalo de nuevo en unos minutos.`;
  }
}

// Funci√≥n para formatear ranking espec√≠fico de ex√°men
function formatExamRanking(ranking: any[], examYear: string): string {
  let message = `üèÜ <b>RANKING OFICIAL ${examYear}</b> üèÜ\n\n`;
  
  ranking.forEach((entry, index) => {
    const medal = index === 0 ? 'ü•á' : index === 1 ? 'ü•à' : index === 2 ? 'ü•â' : 'üî∏';
    const name = entry.user.username || entry.user.firstName || 'Usuario';
    
    message += `${medal} <b>${entry.rank}.</b> ${name}\n`;
    message += `   üìä ${entry.correctanswers}/${entry.totalQuestions} correctas (${Math.round(entry.accuracy)}%)\n`;
    message += `   ‚è±Ô∏è Tiempo promedio: ${Math.round(entry.averageTime)}s\n`;
    message += `   üìÖ √öltimo intento: ${entry.lastAttempt.toLocaleDateString()}\n\n`;
  });

  message += `üéØ <b>¬°Usa /simulacro${examYear === '2024' ? '2024' : ''} para mejorar tu posici√≥n!</b>`;

  return message;
}

// Funci√≥n para formatear comparativa de ex√°menes
function formatExamComparison(comparison: any, userName: string): string {
  let message = `üìä <b>COMPARATIVA DE EX√ÅMENES</b>\n`;
  message += `üë§ ${userName}\n\n`;
  
  // Examen 2018
  message += `ü•á <b>EXAMEN 2018:</b>\n`;
  if (comparison.exam2018.attempted) {
    message += `   üìä ${comparison.exam2018.correctanswers}/${comparison.exam2018.totalQuestions} correctas (${Math.round(comparison.exam2018.accuracy)}%)\n`;
    message += `   ‚è±Ô∏è Tiempo promedio: ${Math.round(comparison.exam2018.averageTime)}s\n`;
    if (comparison.exam2018.rank) {
      message += `   üèÜ Posici√≥n en ranking: #${comparison.exam2018.rank}\n`;
    }
    message += `   üìÖ √öltimo intento: ${comparison.exam2018.lastAttempt?.toLocaleDateString() || 'N/A'}\n`;
  } else {
    message += `   ‚ùå No has intentado este examen\n`;
  }
  
  message += `\nü•à <b>EXAMEN 2024:</b>\n`;
  if (comparison.exam2024.attempted) {
    message += `   üìä ${comparison.exam2024.correctanswers}/${comparison.exam2024.totalQuestions} correctas (${Math.round(comparison.exam2024.accuracy)}%)\n`;
    message += `   ‚è±Ô∏è Tiempo promedio: ${Math.round(comparison.exam2024.averageTime)}s\n`;
    if (comparison.exam2024.rank) {
      message += `   üèÜ Posici√≥n en ranking: #${comparison.exam2024.rank}\n`;
    }
    message += `   üìÖ √öltimo intento: ${comparison.exam2024.lastAttempt?.toLocaleDateString() || 'N/A'}\n`;
  } else {
    message += `   ‚ùå No has intentado este examen\n`;
  }
  
  // Resumen general
  message += `\nüìà <b>RESUMEN GENERAL:</b>\n`;
  message += `   üéØ Total preguntas: ${comparison.overall.totalQuestions}\n`;
  message += `   üìä Precisi√≥n global: ${Math.round(comparison.overall.globalAccuracy)}%\n`;
  
  if (comparison.overall.strongerExam !== 'equal') {
    const stronger = comparison.overall.strongerExam === '2024' ? 'EXAMEN 2024' : 'EXAMEN 2018';
    const icon = comparison.overall.strongerExam === '2024' ? 'üöÄ' : 'üìà';
    message += `   ${icon} Tu fuerte: ${stronger}\n`;
  }
  
  if (Math.abs(comparison.overall.improvement) > 1) {
    const icon = comparison.overall.improvement > 0 ? 'üìà' : 'üìâ';
    const direction = comparison.overall.improvement > 0 ? 'mejora' : 'disminuci√≥n';
    message += `   ${icon} ${direction}: ${Math.abs(Math.round(comparison.overall.improvement))}%\n`;
  }
  
  message += `\nüí° <b>Comandos √∫tiles:</b>\n`;
  message += `‚Ä¢ <code>/simulacro</code> - Practicar 2018\n`;
  message += `‚Ä¢ <code>/simulacro2024</code> - Practicar 2024\n`;
  message += `‚Ä¢ <code>/ranking_oficial2018</code> - Ver ranking 2018\n`;
  message += `‚Ä¢ <code>/ranking_oficial2024</code> - Ver ranking 2024`;
  
  return message;
}

// üÜï NUEVO: Funci√≥n para manejar nuevos miembros
async function handleNewChatMembers(message: any): Promise<NextResponse> {
  try {
    const chatId = message.chat.id;
    const chatType = message.chat.type;
    const newMembers = message.new_chat_members;

    // Solo procesar en grupos/supergrupos
    if (chatType !== 'group' && chatType !== 'supergroup') {
      console.log('üëã NUEVOS MIEMBROS - Ignorado: no es un grupo');
      return NextResponse.json({ ok: true, message: 'No es grupo' });
    }

    console.log('üëã NUEVOS MIEMBROS - Procesando:', {
      chatId,
      chatType,
      memberCount: newMembers.length,
      members: newMembers.map((member: any) => ({
        id: member.id,
        firstName: member.first_name,
        username: member.username,
        isBot: member.is_bot
      }))
    });

    // Filtrar solo usuarios humanos (no bots)
    const humanMembers = newMembers.filter((member: any) => !member.is_bot);

    if (humanMembers.length === 0) {
      console.log('üëã NUEVOS MIEMBROS - Solo bots detectados, ignorando');
      return NextResponse.json({ ok: true, message: 'Solo bots' });
    }

    // Crear mensaje de bienvenida personalizado
    const memberNames = humanMembers.map((member: any) => 
      member.first_name || member.username || 'Usuario'
    ).join(', ');

    const welcomeMessage = `üéâ ¬°Bienvenid${humanMembers.length > 1 ? 'os' : 'o'} al sistema de gamificaci√≥n OpoMelilla!

üëã ¬°Hola ${memberNames}!

üéØ <b>PASOS IMPORTANTES PARA EMPEZAR:</b>

1Ô∏è‚É£ <b>Configura el bot privado:</b>
   ‚Ä¢ Busca <code>@OpoMelillaBot</code> en Telegram
   ‚Ä¢ Env√≠a <code>/start</code> al bot
   ‚Ä¢ ¬°Solo toma 30 segundos!

2Ô∏è‚É£ <b>¬øPor qu√© es necesario?</b>
   ‚Ä¢ Para recibir notificaciones privadas
   ‚Ä¢ Para participar en duelos
   ‚Ä¢ Para quiz interactivos sin spam en grupo
   ‚Ä¢ Para gestionar tu perfil y estad√≠sticas

üéÆ <b>COMANDOS PRINCIPALES:</b>
‚Ä¢ <code>/ranking</code> - Ver clasificaci√≥n general
‚Ä¢ <code>/stats</code> - Consultar tus estad√≠sticas
‚Ä¢ <code>/duelo @usuario</code> - Retar a duelos
‚Ä¢ <code>/examen2024</code> - Quiz del examen oficial
‚Ä¢ <code>/simulacro</code> - Simulacro completo

‚ö†Ô∏è <b>IMPORTANTE:</b> 
Primero debes interactuar con <code>@OpoMelillaBot</code> en privado para que funcionen todos los comandos del grupo.

üèÜ <b>SISTEMA DE PUNTOS:</b>
‚Ä¢ ‚úÖ Respuesta correcta: 10 puntos
‚Ä¢ ‚ùå Respuesta incorrecta: Resta puntos dependiendo el nivel  
‚Ä¢ üî• Bonus velocidad: +5 pts (&lt; 30s)
‚Ä¢ ‚ö° Bonus ultra r√°pido: +10 pts (&lt; 10s)

üí° <b>¬°Responde preguntas, mant√©n rachas diarias y compite por el primer lugar!</b>

üöÄ ¬°Que comience la diversi√≥n!`;

    // Enviar mensaje de bienvenida
    const result = await fetch(`https://api.telegram.org/bot${BOT_TOKEN}/sendMessage`, {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json',
      },
      body: JSON.stringify({
        chat_id: chatid,
        text: welcomeMessage,
        parse_mode: 'HTML',
        disable_web_page_preview: true
      }),
    });

    const responseData = await result.json();

    if (responseData.ok) {
      console.log('‚úÖ NUEVOS MIEMBROS - Mensaje de bienvenida enviado exitosamente');
      
      // Opcional: Programar borrado del mensaje despu√©s de 5 minutos para evitar spam
      setTimeout(async () => {
        try {
          await fetch(`https://api.telegram.org/bot${BOT_TOKEN}/deleteMessage`, {
            method: 'POST',
            headers: { 'Content-Type': 'application/json' },
            body: JSON.stringify({
              chat_id: chatid,
              message_id: responseData.result.message_id
            })
          });
          console.log('üóëÔ∏è Mensaje de bienvenida eliminado despu√©s de 5 minutos');
        } catch (error) {
          console.log('‚ö†Ô∏è No se pudo eliminar el mensaje de bienvenida:', error);
        }
      }, 5 * 60 * 1000); // 5 minutos

    } else {
      console.error('‚ùå NUEVOS MIEMBROS - Error enviando mensaje:', responseData);
    }

    return NextResponse.json({ 
      ok: true, 
      message: 'Nuevos miembros procesados',
      membersWelcomed: humanMembers.length
    });

  } catch (error) {
    console.error('‚ùå NUEVOS MIEMBROS - Error general:', error);
    return NextResponse.json({ 
      ok: false, 
      error: 'Error procesando nuevos miembros' 
    });
  }
}

// üèÜ SISTEMA DE TORNEOS - FUNCIONES DE MANEJO
// ===============================================

async function handleTorneoCommand(userid: string, fromtelegramuser: any, messageText: string): Promise<string | null> {
  try {
    console.log('üèÜ TORNEO COMMAND - Procesando:', { userid, messageText });

    // Verificar si el usuario existe en la base de datos
    const user = await prisma.telegramuser.findUnique({
      where: { telegramUserId: userid }
    });

    if (!user) {
      return `‚ùå <b>Usuario no registrado</b>\n\nüîß <b>Soluci√≥n:</b>\n1. Env√≠a <code>/start</code> al bot privado\n2. Luego usa <code>/torneo</code> nuevamente\n\nüí° <b>Tip:</b> Necesitas estar registrado para participar en torneos.`;
    }

    // Verificar puntos m√≠nimos para participar (10 puntos)
    if ((user.totalpoints || 0) < 10) {
      return `‚ö†Ô∏è <b>Puntos insuficientes para torneos</b>\n\nüí∞ <b>Tu situaci√≥n:</b>\n‚Ä¢ Puntos actuales: ${user.totalpoints || 0}\n‚Ä¢ Puntos requeridos: 10\n\nüéØ <b>¬øC√≥mo conseguir puntos?</b>\n‚Ä¢ <code>/examen2024</code> - Quiz oficial (+10 pts)\n‚Ä¢ <code>/simulacro</code> - Simulacro completo (+50 pts)\n‚Ä¢ Responder preguntas en el grupo (+10 pts)\n\nüí° <b>¬°Gana puntos y vuelve a intentarlo!</b>`;
    }

    await TournamentService.getInstance().ensureTournamentManagerRunning();
    
    // Obtener todos los torneos desde la base de datos
    const allTournaments = await TournamentService.getInstance().getTournamentList(user.id);

    if (allTournaments.length === 0) {
      return `üèÜ <b>SISTEMA DE TORNEOS</b>\n\n` +
             `‚ö†Ô∏è <b>No hay torneos disponibles ahora mismo</b>\n\n` +
             `üïê Los torneos se crean autom√°ticamente cada hora\n` +
             `üìÖ Pr√≥ximo torneo: Consulta en unos minutos\n\n` +
             `üí° <b>Comandos √∫tiles:</b>\n` +
             `‚Ä¢ <code>/torneos</code> - Ver lista completa\n` +
             `‚Ä¢ <code>/torneo_historial</code> - Tu historial`;
    }

    // üìÖ FILTRAR SOLO TORNEOS DE LA SEMANA ACTUAL
    const now = new Date();
    const startOfWeek = new Date(now);
    startOfWeek.setDate(now.getDate() - now.getDay()); // Inicio de la semana (domingo)
    startOfWeek.setHours(0, 0, 0, 0);
    
    const endOfWeek = new Date(startOfWeek);
    endOfWeek.setDate(startOfWeek.getDate() + 6); // Final de la semana (s√°bado)
    endOfWeek.setHours(23, 59, 59, 999);

    // Filtrar torneos de esta semana que est√©n programados o en progreso
    const availableTournaments = allTournaments.filter(tournament => {
      const tournamentDate = new Date(tournament.scheduleddate);
      const isInWeek = tournamentDate >= startOfWeek && tournamentDate <= endOfWeek;
      const isAvailable = tournament.status === 'SCHEDULED' || tournament.status === 'IN_PROGRESS';
      return isInWeek && isAvailable;
    });

    if (availableTournaments.length === 0) {
      return `üèÜ <b>TORNEOS DISPONIBLES</b>\n\n` +
             `üìÖ <b>No hay torneos disponibles esta semana</b>\n\n` +
             `üîÆ <b>Pr√≥ximos torneos:</b>\n` +
             `‚Ä¢ Los torneos se crean autom√°ticamente\n` +
             `‚Ä¢ Nuevos horarios: 10:30, 16:00, 20:00\n` +
             `‚Ä¢ Martes, Jueves, S√°bados y Domingos\n\n` +
             `üí° <b>Comandos √∫tiles:</b>\n` +
             `‚Ä¢ <code>/torneos</code> - Ver lista completa de la semana\n` +
             `‚Ä¢ <code>/torneo_historial</code> - Tu historial\n\n` +
             `‚ÑπÔ∏è <i>Solo se muestran torneos disponibles de esta semana</i>`;
    }

    let message = `üèÜ <b>TORNEOS DISPONIBLES</b>\n`;
    message += `üìÖ ${startOfWeek.toLocaleDateString('es-ES')} - ${endOfWeek.toLocaleDateString('es-ES')}\n\n`;
    
    availableTournaments.forEach((tournament, index) => {
      const date = new Date(tournament.scheduleddate);
      const timeStr = date.toLocaleTimeString('es-ES', { hour: '2-digit', minute: '2-digit' });
      const status = tournament.status === 'SCHEDULED' ? '‚è∞ Programado' : 'üî• En curso';
      
      message += `${index + 1}. <b>${tournament.name}</b>\n`;
      message += `   üìÖ ${timeStr} | ${status}\n`;
      message += `   üë• ${tournament._count.participants} | üí∞ ${tournament.prizepool || 100} pts\n`;
      message += `   üìù ${tournament.questionsCount} preguntas\n`;
      message += `   üé´ <code>/torneo_unirse ${index + 1}</code>\n\n`;
    });

    message += `üí° <b>C√≥mo participar:</b>\n`;
    message += `1. Usa <code>/torneo_unirse [n√∫mero]</code>\n`;
    message += `2. ¬°Espera a que inicie el torneo!\n`;
    message += `3. Responde las preguntas r√°pidamente\n\n`;
    message += `‚ö° <b>Respuesta instant√°nea:</b> En cuanto respondas, recibes la siguiente pregunta\n\n`;
    message += `‚ÑπÔ∏è <i>Solo se muestran torneos disponibles de esta semana</i>`;

    return message;

  } catch (error) {
    console.error('‚ùå Error en handleTorneoCommand:', error);
    return `‚ùå <b>Error interno</b>\n\nInt√©ntalo de nuevo en unos segundos.`;
  }
}

async function handleTorneosListCommand(userid: string, fromtelegramuser: any): Promise<string | null> {
  try {
    console.log('üèÜ TORNEOS LIST COMMAND - Procesando:', { userid });

    // Obtener todos los torneos usando el servicio
    const allTournaments = await TournamentService.getInstance().getTournamentList(userid);

    if (allTournaments.length === 0) {
      return `üèÜ <b>No hay torneos registrados</b>\n\nüí° ¬°S√© el primero en crear actividad competitiva!`;
    }

    // üìÖ FILTRAR SOLO TORNEOS DE LA SEMANA ACTUAL
    const now = new Date();
    const startOfWeek = new Date(now);
    startOfWeek.setDate(now.getDate() - now.getDay()); // Inicio de la semana (domingo)
    startOfWeek.setHours(0, 0, 0, 0);
    
    const endOfWeek = new Date(startOfWeek);
    endOfWeek.setDate(startOfWeek.getDate() + 6); // Final de la semana (s√°bado)
    endOfWeek.setHours(23, 59, 59, 999);

    // Filtrar torneos de esta semana
    const tournaments = allTournaments.filter(tournament => {
      const tournamentDate = new Date(tournament.scheduleddate);
      return tournamentDate >= startOfWeek && tournamentDate <= endOfWeek;
    });

    if (tournaments.length === 0) {
      return `üèÜ <b>TORNEOS DE ESTA SEMANA</b>\n\n` +
             `üìÖ <b>No hay torneos programados para esta semana</b>\n\n` +
             `üîÆ <b>Pr√≥xima semana:</b>\n` +
             `‚Ä¢ Los torneos contin√∫an autom√°ticamente\n` +
             `‚Ä¢ Nuevos horarios: 10:30, 16:00, 20:00\n` +
             `‚Ä¢ Martes, Jueves, S√°bados y Domingos\n\n` +
             `üí° <b>Comandos √∫tiles:</b>\n` +
             `‚Ä¢ <code>/torneo</code> - Ver torneos disponibles\n` +
             `‚Ä¢ <code>/torneo_historial</code> - Tu historial`;
    }

    let message = `üèÜ <b>TORNEOS DE ESTA SEMANA</b>\n`;
    message += `üìÖ ${startOfWeek.toLocaleDateString('es-ES')} - ${endOfWeek.toLocaleDateString('es-ES')}\n\n`;

    const scheduled = tournaments.filter(t => t.status === 'SCHEDULED');
    const inProgress = tournaments.filter(t => t.status === 'IN_PROGRESS');
    const completed = tournaments.filter(t => t.status === 'COMPLETED').slice(0, 3);

    // Torneos programados
    if (scheduled.length > 0) {
      message += `‚è∞ <b>PR√ìXIMOS TORNEOS:</b>\n`;
      scheduled.forEach((tournament, index) => {
        const timeUntilStart = tournament.scheduleddate.getTime() - now.getTime();
        const minutesUntilStart = Math.ceil(timeUntilStart / (1000 * 60));
        const participantCount = tournament._count.participants;

        message += `${index + 1}Ô∏è‚É£ ${tournament.name}\n`;
        message += `   üìÖ ${tournament.scheduleddate.toLocaleString('es-ES')}\n`;
        message += `   ‚è∞ En ${minutesUntilStart > 0 ? `${minutesUntilStart} min` : '¬°Ya!'}\n`;
        message += `   üë• ${participantCount}/${tournament.maxparticipants} participantes\n\n`;
      });
    }

    // Torneos en progreso
    if (inProgress.length > 0) {
      message += `üî• <b>EN PROGRESO:</b>\n`;
      inProgress.forEach((tournament) => {
        const participantCount = tournament._count.participants;
        
        message += `üéØ ${tournament.name}\n`;
        message += `   üë• ${participantCount} participantes activos\n`;
        message += `   üìä Estado: En desarrollo\n\n`;
      });
    }

    // Torneos recientes completados
    if (completed.length > 0) {
      message += `üèÅ <b>RECIENTES COMPLETADOS:</b>\n`;
      completed.forEach((tournament) => {
        const participantCount = tournament._count.participants;
        
        message += `‚úÖ ${tournament.name}\n`;
        message += `   üìÖ ${tournament.scheduleddate.toLocaleDateString('es-ES')}\n`;
        message += `   üë• ${participantCount} participantes\n`;
        message += `   üèÜ Premio: ${tournament.prizepool} pts\n\n`;
      });
    }

    message += `üìä <b>RESUMEN SEMANAL:</b>\n`;
    message += `‚Ä¢ Programados: ${scheduled.length}\n`;
    message += `‚Ä¢ En progreso: ${inProgress.length}\n`;
    message += `‚Ä¢ Completados: ${completed.length}\n\n`;

    message += `üéÆ <b>COMANDOS:</b>\n`;
    message += `‚Ä¢ <code>/torneo</code> - Unirse a torneo disponible\n`;
    message += `‚Ä¢ <code>/torneo_historial</code> - Tu historial completo\n`;
    message += `‚Ä¢ <code>/ranking</code> - Ver clasificaci√≥n general\n\n`;

    message += `‚ÑπÔ∏è <i>Solo se muestran torneos de esta semana</i>`;

    return message;

  } catch (error) {
    console.error('‚ùå Error en handleTorneosListCommand:', error);
    return `‚ùå <b>Error interno</b>\n\nInt√©ntalo de nuevo en unos segundos.`;
  }
}

async function handleTorneoJoinCommand(userid: string, fromtelegramuser: any, messageText: string): Promise<string | null> {
  try {
    console.log('üèÜ TORNEO JOIN COMMAND - Procesando:', { userid, messageText });

    // Extraer n√∫mero del torneo
    const match = messageText.match(/\/torneo_unirse\s+(\d+)/);
    if (!match) {
      return `‚ùå <b>Formato incorrecto</b>

üîß <b>Uso correcto:</b>
<code>/torneo_unirse [n√∫mero]</code>

üí° <b>Ejemplo:</b>
<code>/torneo_unirse 1</code> - Unirse al primer torneo

‚ÑπÔ∏è Usa <code>/torneo</code> para ver torneos disponibles con n√∫meros.`;
    }

    const tournamentNumber = parseInt(match[1]);

    // Verificar usuario
    const user = await prisma.telegramuser.findUnique({
      where: { telegramUserId: userid }
    });

    if (!user) {
      return `‚ùå <b>Usuario no registrado</b>\n\nüîß Env√≠a <code>/start</code> al bot privado primero.`;
    }

    // Verificar puntos m√≠nimos
    if ((user.totalpoints || 0) < 10) {
      return `‚ö†Ô∏è <b>Puntos insuficientes</b>\n\nNecesitas al menos 10 puntos para participar.\nPuntos actuales: ${user.totalpoints || 0}`;
    }

    // Obtener torneos disponibles
    const availableTournaments = await TournamentService.getInstance().getTournamentList(user.id);

    if (availableTournaments.length === 0) {
      return `‚ùå <b>No hay torneos disponibles</b>\n\nüí° Usa <code>/torneos</code> para ver el estado actual.`;
    }

    if (tournamentNumber < 1 || tournamentNumber > availableTournaments.length) {
      return `‚ùå <b>N√∫mero de torneo inv√°lido</b>

üìä <b>Torneos disponibles:</b> 1 a ${availableTournaments.length}

üí° Usa <code>/torneo</code> para ver la lista con n√∫meros.`;
    }

    const selectedTournament = availableTournaments[tournamentNumber - 1];

    // Verificar si el torneo est√° lleno
    const maxParticipants = selectedTournament.maxparticipants || 100; // Default 100 si es null
    if (selectedTournament._count.participants >= maxParticipants) {
      return `‚ùå <b>Torneo lleno</b>

üèÜ <b>Torneo:</b> ${selectedTournament.name}
üë• <b>Participantes:</b> ${selectedTournament._count.participants}/${maxParticipants}

üí° Prueba con otro torneo usando <code>/torneo</code>.`;
    }

    // Verificar si el torneo est√° muy cerca del inicio (menos de 2 minutos)
    const timeUntilStart = selectedTournament.scheduleddate.getTime() - Date.now();
    const minutesUntilStart = Math.floor(timeUntilStart / (1000 * 60));
    const secondsUntilStart = Math.floor(timeUntilStart / 1000);

    // Si faltan menos de 2 minutos (120 segundos), cerrar inscripciones
    if (secondsUntilStart < 120) {
      const displayMinutes = Math.max(0, minutesUntilStart);
      return `‚è∞ <b>Demasiado tarde</b>

üèÜ <b>Torneo:</b> ${selectedTournament.name}
‚è∞ <b>Inicio:</b> En ${displayMinutes} minuto(s)

‚ùå Las inscripciones se cierran 2 minutos antes del inicio.

üí° Usa <code>/torneo</code> para ver otros torneos disponibles.`;
    }

    // Intentar unirse al torneo usando el servicio
    const joinResult = await TournamentService.getInstance().joinTournament(selectedTournament.id, user.id);

    if (!joinResult.success) {
      return `‚ùå <b>No se pudo unir al torneo</b>\n\n${joinResult.message}`;
    }

    // Actualizar contador de participantes
    const updatedCount = selectedTournament._count.participants + 1;
    const spotsLeft = maxParticipants - updatedCount;

    const successMessage = `‚úÖ <b>¬°Registrado exitosamente!</b>

üèÜ <b>Torneo:</b> ${selectedTournament.name}
üìù <b>Descripci√≥n:</b> ${selectedTournament.description}
üìÖ <b>Inicio:</b> ${selectedTournament.scheduleddate.toLocaleString('es-ES')}
‚è∞ <b>En:</b> ${minutesUntilStart} minutos
üéØ <b>Preguntas:</b> ${selectedTournament.questionsCount}
üí∞ <b>Premios por posici√≥n:</b>
   ü•á 1¬∞ lugar: 100 puntos
   ü•à 2¬∞ lugar: 90 puntos  
   ü•â 3¬∞ lugar: 80 puntos
   üìä 4¬∞ lugar y siguientes: decreciente
üë• <b>Participantes:</b> ${updatedCount}/${maxParticipants}

${spotsLeft <= 3 && spotsLeft > 0 ? `üî• ¬°Solo quedan ${spotsLeft} lugares!` : ''}
${spotsLeft === 0 ? 'üéâ ¬°Torneo completo!' : ''}

üéÆ <b>SIGUIENTE PASO:</b>
Espera al inicio del torneo. Recibir√°s las preguntas autom√°ticamente en privado.

üí° <b>Comandos √∫tiles:</b>
‚Ä¢ <code>/torneo_salir</code> - Salir del torneo (si no ha iniciado)
‚Ä¢ <code>/torneos</code> - Ver otros torneos

üçÄ ¬°Buena suerte!`;

    console.log('‚úÖ Usuario registrado en torneo:', {
      userid,
      tournamentId: selectedTournament.id,
      joinResult: joinResult.success
    });

    return successMessage;

  } catch (error) {
    console.error('‚ùå Error en handleTorneoJoinCommand:', error);
    return `‚ùå <b>Error interno</b>\n\nInt√©ntalo de nuevo en unos segundos.`;
  }
}

async function handleTorneoLeaveCommand(userid: string, fromtelegramuser: any, messageText: string): Promise<string | null> {
  try {
    console.log('üèÜ TORNEO LEAVE COMMAND - Procesando:', { userid });

    // Verificar usuario
    const user = await prisma.telegramuser.findUnique({
      where: { telegramUserId: userid }
    });

    if (!user) {
      return `‚ùå <b>Usuario no registrado</b>\n\nüîß Env√≠a <code>/start</code> al bot privado primero.`;
    }

    // Intentar salir usando el servicio (simplificado por ahora)
    return `‚ÑπÔ∏è <b>Funci√≥n en desarrollo</b>

üîß La funci√≥n de salir del torneo est√° siendo actualizada.

üí° <b>Mientras tanto:</b>
‚Ä¢ Usa <code>/torneo</code> para ver torneos disponibles
‚Ä¢ Usa <code>/torneo_historial</code> para ver tu historial`;

  } catch (error) {
    console.error('‚ùå Error en handleTorneoLeaveCommand:', error);
    return `‚ùå <b>Error interno</b>\n\nInt√©ntalo de nuevo en unos segundos.`;
  }
}

async function handleTorneoHistoryCommand(userid: string, fromtelegramuser: any): Promise<string | null> {
  try {
    console.log('üèÜ TORNEO HISTORY COMMAND - Procesando:', { userid });

    // Verificar usuario
    const user = await prisma.telegramuser.findUnique({
      where: { telegramUserId: userid }
    });

    if (!user) {
      return `‚ùå <b>Usuario no registrado</b>\n\nüîß Env√≠a <code>/start</code> al bot privado primero.`;
    }

    // Obtener historial usando el servicio
    const participations = await TournamentService.getInstance().getUserTournamentHistory(user.id);

    if (participations.length === 0) {
      return `üìä <b>Historial de Torneos</b>

üë§ <b>${user.firstName || user.username || 'Usuario'}</b>

‚ùå <b>No has participado en torneos a√∫n</b>

üéÆ <b>¬°Comienza tu historia competitiva!</b>
‚Ä¢ <code>/torneo</code> - Ver torneos disponibles
‚Ä¢ <code>/torneos</code> - Lista completa de torneos

üí° <b>Los torneos te permiten:</b>
‚Ä¢ Competir contra otros usuarios
‚Ä¢ Ganar puntos extra
‚Ä¢ Demostrar tu conocimiento
‚Ä¢ ¬°Divertirte mientras estudias!`;
    }

    let message = `üìä <b>HISTORIAL DE TORNEOS</b>\n\n`;
    message += `üë§ <b>${user.firstName || user.username || 'Usuario'}</b>\n\n`;

    // Calcular estad√≠sticas generales
    const completed = participations.filter(p => p.status === 'COMPLETED');
    const inProgress = participations.filter(p => p.status === 'IN_PROGRESS');
    const registered = participations.filter(p => p.status === 'REGISTERED');
    
    const totalScore = completed.reduce((sum, p) => sum + (p.score || 0), 0);
    const totalCorrect = completed.reduce((sum, p) => sum + (p.correctanswers || 0), 0);
    const totalQuestions = completed.reduce((sum, p) => sum + p.responses.length, 0);
    const averageAccuracy = totalQuestions > 0 ? Math.round((totalCorrect / totalQuestions) * 100) : 0;

    message += `üìà <b>ESTAD√çSTICAS GENERALES:</b>\n`;
    message += `üèÜ Torneos completados: ${completed.length}\n`;
    message += `‚è≥ En progreso: ${inProgress.length}\n`;
    message += `üìù Registrado: ${registered.length}\n`;
    message += `üí∞ Puntos totales ganados: ${totalScore}\n`;
    message += `üéØ Precisi√≥n promedio: ${averageAccuracy}%\n\n`;

    // Mostrar √∫ltimos 5 torneos
    const recentParticipations = participations.slice(0, 5);

    message += `üìã <b>PARTICIPACIONES RECIENTES:</b>\n`;

    recentParticipations.forEach((participation, index) => {
      const tournament = participation.tournament;
      const status = participation.status;
      const score = participation.score || 0;
      const correctAnswers = participation.correctanswers || 0;
      const totalResponses = participation.responses.length;

      let statusEmoji = '';
      let statusText = '';

      switch (status) {
        case 'COMPLETED':
          statusEmoji = '‚úÖ';
          statusText = 'Completado';
          break;
        case 'IN_PROGRESS':
          statusEmoji = '‚è≥';
          statusText = 'En progreso';
          break;
        case 'REGISTERED':
          statusEmoji = 'üìù';
          statusText = 'Registrado';
          break;
        default:
          statusEmoji = '‚ùì';
          statusText = status;
      }

      message += `${index + 1}Ô∏è‚É£ <b>${tournament.name}</b>\n`;
      message += `   üìÖ ${tournament.scheduleddate.toLocaleDateString('es-ES')}\n`;
      message += `   ${statusEmoji} Estado: ${statusText}\n`;
      
      if (status === 'COMPLETED') {
        message += `   üí∞ Puntos: ${score}\n`;
        message += `   üéØ Correctas: ${correctAnswers}/${tournament.questionsCount}\n`;
        const accuracy = tournament.questionsCount > 0 ? Math.round((correctAnswers / tournament.questionsCount) * 100) : 0;
        message += `   üìä Precisi√≥n: ${accuracy}%\n`;
      } else if (status === 'IN_PROGRESS') {
        message += `   üéØ Progreso: ${totalResponses}/${tournament.questionsCount} preguntas\n`;
        if (totalResponses > 0) {
          message += `   üí∞ Puntos actuales: ${score}\n`;
        }
      } else if (status === 'REGISTERED') {
        const timeUntilStart = tournament.scheduleddate.getTime() - Date.now();
        const minutesUntilStart = Math.ceil(timeUntilStart / (1000 * 60));
        if (minutesUntilStart > 0) {
          message += `   ‚è∞ Inicia en: ${minutesUntilStart} minutos\n`;
        } else {
          message += `   üî• ¬°Iniciando pronto!\n`;
        }
      }
      
      message += `\n`;
    });

    if (participations.length > 5) {
      message += `üìä <i>... y ${participations.length - 5} m√°s en tu historial</i>\n\n`;
    }

    // Mejores resultados
    if (completed.length > 0) {
      const bestScore = Math.max(...completed.map(p => p.score || 0));
      const bestAccuracy = Math.max(...completed.map(p => {
        const correct = p.correctanswers || 0;
        const total = p.tournament.questionsCount;
        return total > 0 ? Math.round((correct / total) * 100) : 0;
      }));

      message += `üèÖ <b>MEJORES RESULTADOS:</b>\n`;
      message += `üí∞ Mayor puntuaci√≥n: ${bestScore} puntos\n`;
      message += `üéØ Mejor precisi√≥n: ${bestAccuracy}%\n\n`;
    }

    message += `üéÆ <b>COMANDOS:</b>\n`;
    message += `‚Ä¢ <code>/torneo</code> - Unirse a nuevo torneo\n`;
    message += `‚Ä¢ <code>/torneos</code> - Ver torneos disponibles\n`;
    message += `‚Ä¢ <code>/ranking</code> - Clasificaci√≥n general`;

    return message;

  } catch (error) {
    console.error('‚ùå Error en handleTorneoHistoryCommand:', error);
    return `‚ùå <b>Error interno</b>\n\nInt√©ntalo de nuevo en unos segundos.`;
  }
}

// ==============================================
// üéØ HANDLERS DE SESIONES DE ESTUDIO PRIVADAS
// ==============================================

async function handleStudyCommand(
  userid: string, 
  message: any, 
  studyCommand: { subject: string; quantity: number; type?: 'normal' | 'failed' }
): Promise<string | null> {
  try {
    const sessionType = studyCommand.type || 'normal';
    console.log(`üéØ STUDY COMMAND - Usuario: ${userid}, Materia: ${studyCommand.subject}, Cantidad: ${studyCommand.quantity}, Tipo: ${sessionType}`);

    // Verificar que es un chat privado
    if (message.chat && message.chat.type !== 'private') {
      const commandExample = sessionType === 'failed' ? 
        (studyCommand.subject === 'all' ? '/falladas5' : `/${studyCommand.subject}falladas${studyCommand.quantity}`) :
        `/${studyCommand.subject}${studyCommand.quantity}`;
        
      return `‚ö†Ô∏è <b>Solo chat privado</b>\n\n` +
             `üîí Los comandos de estudio solo funcionan en <b>chat privado</b> con el bot.\n\n` +
             `üí° <b>C√≥mo usarlo:</b>\n` +
             `1. Abre un chat privado con @tu_bot\n` +
             `2. Usa el comando: ${commandExample}\n\n` +
             `üìö <b>Comandos disponibles:</b>\n` +
             `‚Ä¢ /constitucion10, /defensanacional5, /rjsp15\n` +
             `‚Ä¢ /falladas, /constitucionfalladas5\n` +
             `‚Ä¢ /stop, /progreso`;
    }

    // Verificar usuario registrado
    const user = await prisma.telegramuser.findUnique({
      where: { telegramUserId: userid }
    });

    if (!user) {
      return `‚ùå <b>Usuario no registrado</b>\n\n` +
             `üîß Env√≠a <code>/start</code> primero para registrarte.`;
    }

    // ‚≠ê NUEVA FUNCIONALIDAD: Verificar permisos y cuotas de suscripci√≥n
    console.log('üîê Verificando permisos de suscripci√≥n para comandos de estudio...');
    
    // Verificaci√≥n directa de suscripci√≥n usando SQL (similar a /mi_plan que funciona)
    const subscriptionCheck = await prisma.$queryRaw`
      SELECT 
        tu."telegramUserId",
        tu."firstName",
        s."id" as "subscriptionId",
        s."status",
        s."endDate",
        p."name" as "planName",
        p."displayName" as "planDisplayName",
        p."canUseFailedQuestions"
      FROM "TelegramUser" tu
      LEFT JOIN "UserSubscription" s ON tu."id" = s."userid" AND s."status" = 'active' AND s."endDate" >= NOW()
      LEFT JOIN "SubscriptionPlan" p ON s."planId" = p."id"
      WHERE tu."telegramUserId" = ${userid}
      LIMIT 1
    ` as any[];

    const userSubscription = subscriptionCheck[0];
    const featureType = sessionType === 'failed' ? 'failed_questions' : 'questions';
    
    // Verificar acceso a la funcionalidad
    let accessResult: { allowed: boolean; reason?: string; currentPlan?: string; requiredPlan?: string; remainingQuota?: number };
    
    if (!userSubscription) {
      accessResult = {
        allowed: false,
        reason: 'Usuario no encontrado'
      };
    } else if (!userSubscription.planName) {
      // Usuario sin suscripci√≥n (plan gratuito)
      accessResult = {
        allowed: false,
        reason: 'Las preguntas falladas requieren suscripci√≥n',
        currentPlan: 'Gratuito',
        requiredPlan: 'B√°sico'
      };
    } else if (featureType === 'failed_questions' && !userSubscription.canUseFailedQuestions) {
      // Plan que no incluye preguntas falladas
      accessResult = {
        allowed: false,
        reason: 'Tu plan no incluye acceso a preguntas falladas',
        currentPlan: userSubscription.planDisplayName,
        requiredPlan: 'B√°sico'
      };
    } else {
      // Todo correcto
      accessResult = { allowed: true };
      console.log(`‚úÖ Acceso autorizado: Usuario ${userSubscription.firstName} con plan ${userSubscription.planDisplayName}`);
    }

    if (!accessResult.allowed) {
      console.log('‚ùå Acceso denegado por l√≠mites de suscripci√≥n:', accessResult.reason);
      
      // Generar mensaje de upgrade personalizado
      let upgradeMessage = `üîí <b>L√≠mite de Suscripci√≥n Alcanzado</b>\n\n`;
      upgradeMessage += `‚ùå ${accessResult.reason}\n\n`;
      
      if (accessResult.currentPlan) {
        upgradeMessage += `üìã <b>Tu plan actual:</b> ${accessResult.currentPlan}\n`;
      }
      
      if (accessResult.remainingQuota !== undefined && accessResult.remainingQuota > 0) {
        upgradeMessage += `üìä <b>Restante hoy:</b> ${accessResult.remainingQuota} preguntas\n`;
      }
      
      if (accessResult.requiredPlan) {
        upgradeMessage += `üíé <b>Plan requerido:</b> ${accessResult.requiredPlan}\n\n`;
        
        if (accessResult.requiredPlan === 'Premium') {
          upgradeMessage += `üöÄ <b>¬°Actualiza a Premium!</b>\n`;
          upgradeMessage += `‚Ä¢ ‚ôæÔ∏è Preguntas ilimitadas\n`;
          upgradeMessage += `‚Ä¢ üéØ Simulacros personalizados\n`;
          upgradeMessage += `‚Ä¢ üìä Estad√≠sticas avanzadas\n`;
          upgradeMessage += `‚Ä¢ üîó Integraci√≥n Moodle\n`;
          upgradeMessage += `‚Ä¢ ü§ñ An√°lisis con IA\n\n`;
          upgradeMessage += `üí≥ <code>/premium</code> - Ver planes Premium`;
        } else {
          upgradeMessage += `üìö <b>¬°Suscr√≠bete al plan B√°sico!</b>\n`;
          upgradeMessage += `‚Ä¢ 100 preguntas diarias\n`;
          upgradeMessage += `‚Ä¢ Sistema de preguntas falladas\n`;
          upgradeMessage += `‚Ä¢ Estad√≠sticas b√°sicas\n\n`;
          upgradeMessage += `üí≥ <code>/basico</code> - Ver plan B√°sico (‚Ç¨4.99/mes)`;
        }
      } else {
        upgradeMessage += `üí° <b>Opciones:</b>\n`;
        upgradeMessage += `‚Ä¢ <code>/planes</code> - Ver todos los planes\n`;
        upgradeMessage += `‚Ä¢ <code>/mi_plan</code> - Ver tu suscripci√≥n actual`;
      }
      
      return upgradeMessage;
    }

    console.log('‚úÖ Permisos verificados - usuario puede acceder a la funcionalidad');

    // Crear instancia del servicio
    const studyService = new StudySessionService();

    // Iniciar sesi√≥n de estudio (normal o de falladas)
    const result = await studyService.startStudySession(
      userid, 
      studyCommand.subject, 
      studyCommand.quantity,
      sessionType
    );

    // ‚≠ê FUNCIONALIDAD: Tracking de cuota para planes b√°sicos
    if (result.success) {
      console.log('‚úÖ Sesi√≥n de estudio iniciada exitosamente');
      
      // Incrementar cuota solo si el usuario tiene suscripci√≥n activa
      if (userSubscription && userSubscription.planName) {
        try {
          // Implementaci√≥n directa del tracking de cuotas usando SQL
          const today = new Date().toISOString().split('T')[0]; // Formato YYYY-MM-DD
          
          // Verificar si existe registro de uso de hoy
          const existingUsage = await prisma.$queryRaw`
            SELECT * FROM "UserQuotaUsage" 
            WHERE "userid" = ${user.id} AND "date" = ${today}::date
            LIMIT 1
          ` as any[];

          if (existingUsage.length > 0) {
            // Actualizar uso existente
            const currentQuestions = existingUsage[0].questionsUsed || 0;
            const currentFailed = existingUsage[0].failedQuestionsUsed || 0;
            
            if (featureType === 'questions') {
              await prisma.$executeRaw`
                UPDATE "UserQuotaUsage" 
                SET "questionsUsed" = ${currentQuestions + studyCommand.quantity},
                    "updatedAt" = NOW()
                WHERE "userid" = ${user.id} AND "date" = ${today}::date
              `;
            } else if (featureType === 'failed_questions') {
              await prisma.$executeRaw`
                UPDATE "UserQuotaUsage" 
                SET "failedQuestionsUsed" = ${currentFailed + studyCommand.quantity},
                    "updatedAt" = NOW()
                WHERE "userid" = ${user.id} AND "date" = ${today}::date
              `;
            }
          } else {
            // Crear nuevo registro de uso - REQUIERE subscriptionId
            const questionsUsed = featureType === 'questions' ? studyCommand.quantity : 0;
            const failedQuestionsUsed = featureType === 'failed_questions' ? studyCommand.quantity : 0;
            
            // ‚ö†Ô∏è VALIDACI√ìN CR√çTICA: Verificar que tenemos subscriptionId
            if (!userSubscription.subscriptionId) {
              console.error(`‚ùå TRACKING ERROR: No se puede crear registro sin subscriptionId para usuario ${userid}`);
              throw new Error('subscriptionId requerido para crear registro de cuotas');
            }
            
            await prisma.$executeRaw`
              INSERT INTO "UserQuotaUsage" ("id", "userid", "subscriptionId", "date", "questionsUsed", "failedQuestionsUsed", "createdAt", "updatedAt")
              VALUES (gen_random_uuid(), ${user.id}, ${userSubscription.subscriptionId}, ${today}::date, ${questionsUsed}, ${failedQuestionsUsed}, NOW(), NOW())
            `;
            
            console.log(`‚úÖ TRACKING: Nuevo registro creado con subscriptionId = ${userSubscription.subscriptionId}`);
          }
          
          console.log(`‚úÖ Cuota incrementada: ${studyCommand.quantity} ${featureType}`);
        } catch (quotaError) {
          console.error('‚ö†Ô∏è Error incrementando cuota (no cr√≠tico):', quotaError);
          // No bloquear la funcionalidad si falla el tracking
        }
      } else {
        console.log('‚ÑπÔ∏è Usuario sin suscripci√≥n - no se hace tracking de cuota');
      }
    }

    return result.message;

  } catch (error) {
    console.error('‚ùå Error en handleStudyCommand:', error);
    return `‚ùå <b>Error interno</b>\n\nInt√©ntalo de nuevo en unos segundos.`;
  }
}

async function handleStopStudySession(userid: string, message: any): Promise<string | null> {
  try {
    console.log(`üõë STOP STUDY SESSION - Usuario: ${userid}`);

    // Verificar que es un chat privado
    if (message.chat && message.chat.type !== 'private') {
      return `‚ö†Ô∏è <b>Solo chat privado</b>\n\n` +
             `üîí Los comandos de estudio solo funcionan en <b>chat privado</b> con el bot.`;
    }

    const studyService = new StudySessionService();
    const result = await studyService.stopSession(userid);
    return result.message;

  } catch (error) {
    console.error('‚ùå Error en handleStopStudySession:', error);
    return `‚ùå <b>Error interno</b>\n\nInt√©ntalo de nuevo en unos segundos.`;
  }
}

async function handleStudyProgress(userid: string, message: any): Promise<string | null> {
  try {
    console.log(`üìä STUDY PROGRESS - Usuario: ${userid}`);

    // Verificar que es un chat privado
    if (message.chat && message.chat.type !== 'private') {
      return `‚ö†Ô∏è <b>Solo chat privado</b>\n\n` +
             `üîí Los comandos de estudio solo funcionan en <b>chat privado</b> con el bot.`;
    }

    const studyService = new StudySessionService();
    const result = await studyService.getSessionProgress(userid);
    return result.message;

  } catch (error) {
    console.error('‚ùå Error en handleStudyProgress:', error);
    return `‚ùå <b>Error interno</b>\n\nInt√©ntalo de nuevo en unos segundos.`;
  }
}

async function sendStudyPoll(userid: string, questionData: any): Promise<boolean> {
  try {
    console.log(`üìä ENVIANDO POLL DE ESTUDIO - Usuario: ${userid}, Pregunta: ${questionData.id}`);

    const question = questionData.question || questionData.pregunta || 'Pregunta no disponible';
    
    // Las opciones pueden venir como array de strings o campos individuales
    let options: string[] = [];
    if (Array.isArray(questionData.options)) {
      // Limpiar opciones eliminando porcentajes al inicio (ej: "%100%texto" -> "texto")
      options = questionData.options.map((option: string) => {
        // Eliminar porcentajes al inicio como "%100%" o "%-33.33333%"
        return option.replace(/^%[-\d.]+%/, '').trim();
      }).filter((option: string) => option && option.length > 0);
    } else {
      // Fallback para formato anterior
      options = [
        questionData.a || questionData.option1,
        questionData.b || questionData.option2, 
        questionData.c || questionData.option3,
        questionData.d || questionData.option4
      ].filter(option => option && option.trim() !== '');
    }

    if (options.length < 2) {
      console.error('‚ùå Opciones insuficientes para la pregunta:', questionData.id);
      return false;
    }

    // üìè VERIFICAR L√çMITE DE CARACTERES DE TELEGRAM (100 caracteres por opci√≥n)
    const maxOptionLength = options.reduce((max, option) => Math.max(max, option.length), 0);
    if (maxOptionLength > 100) {
      console.log(`‚ö†Ô∏è PREGUNTA SALTADA: Opci√≥n muy larga (${maxOptionLength} caracteres, m√°ximo 100)`);
      console.log('üìã Opciones problem√°ticas:', options.map((opt, i) => `${i+1}. ${opt.length} chars: ${opt.substring(0, 50)}...`));
      
      // Buscar siguiente pregunta autom√°ticamente
      // TODO: Implementar skipCurrentAndGetNext en StudySessionService
      console.log('üîÑ Funcionalidad de saltar pregunta deshabilitada temporalmente');
      await sendTelegramMessage(userid.toString(), 
        '‚ùå <b>Error t√©cnico</b>\n\n' +
        'Esta pregunta tiene opciones muy largas para Telegram.\n' +
        'Usa /stop y vuelve a intentar.'
      );
      return false;
      /*
      try {
        const nextQuestionResult = await StudySessionService.skipCurrentAndGetNext(userid.toString());
        if (nextQuestionResult.success && nextQuestionResult.nextQuestion) {
          console.log('üîÑ Saltando a siguiente pregunta autom√°ticamente...');
          // Llamada recursiva con la siguiente pregunta
          return await sendStudyPoll(userid, nextQuestionResult.nextQuestion);
        } else if (nextQuestionResult.sessionComplete) {
          // Si se complet√≥ la sesi√≥n, enviar resumen
          if (nextQuestionResult.message) {
            await sendTelegramMessage(userid.toString(), nextQuestionResult.message);
          }
          return true;
        } else {
          console.error('‚ùå No se pudo obtener siguiente pregunta despu√©s de saltar');
          await sendTelegramMessage(userid.toString(), 
            '‚ùå <b>Error t√©cnico</b>\n\n' +
            'Esta pregunta tiene opciones muy largas para Telegram.\n' +
            'Usa /parar_estudio y vuelve a intentar.'
          );
          return false;
        }
      } catch (skipError) {
        console.error('‚ùå Error saltando pregunta:', skipError);
        await sendTelegramMessage(userid.toString(), 
          '‚ùå <b>Error t√©cnico</b>\n\n' +
          'Problema saltando pregunta con opciones largas.\n' +
          'Usa /parar_estudio y vuelve a intentar.'
        );
        return false;
      }
      */
    }

    // El correctAnswerIndex ya viene 0-indexed desde la base de datos
    const originalCorrectIndex = questionData.correctanswerindex !== undefined ? 
      questionData.correctanswerindex : 
      (questionData.correcta ? questionData.correcta - 1 : 0);

    // üé≤ RANDOMIZAR OPCIONES PARA EVITAR QUE LA RESPUESTA CORRECTA SIEMPRE SEA LA A
    // Crear array con opciones y sus √≠ndices originales
    const optionsWithIndex = options.map((option: string, index: number) => ({
      option,
      originalIndex: index
    }));

    // Mezclar las opciones aleatoriamente
    const shuffledOptions = [...optionsWithIndex].sort(() => Math.random() - 0.5);
    
    // Encontrar la nueva posici√≥n de la respuesta correcta despu√©s del shuffle
    const newCorrectIndex = shuffledOptions.findIndex(
      item => item.originalIndex === originalCorrectIndex
    );

    // Extraer solo las opciones mezcladas para el poll
    const finalOptions = shuffledOptions.map(item => item.option);

    console.log('üé≤ Opciones randomizadas:', {
      original: options,
      shuffled: finalOptions,
      originalCorrectIndex,
      newCorrectIndex,
      correctAnswer: finalOptions[newCorrectIndex]
    });

    // Formatear header con informaci√≥n de progreso
    const header = `üéØ PREGUNTA ${questionData.currentIndex}/${questionData.totalQuestions}\n` +
                  `üìö ${StudySessionService.getDisplayName(questionData.subject)}\n` +
                  `‚è±Ô∏è Tiempo l√≠mite: 1 minuto\n\n`;

    const fullQuestion = truncatePollQuestion(header, question, 280);

    const pollData = {
      chat_id: userid,
      question: fullQuestion,
      options: JSON.stringify(finalOptions), // Usar opciones mezcladas
      type: 'quiz',
      correct_option_id: newCorrectIndex, // Usar nuevo √≠ndice despu√©s del shuffle
      is_anonymous: false,
      allows_multiple_answers: false,
      explanation: `‚úÖ La respuesta correcta es: ${finalOptions[newCorrectIndex]}`,
      open_period: 60 // 1 minuto l√≠mite
    };

    const response = await fetch(`https://api.telegram.org/bot${BOT_TOKEN}/sendPoll`, {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json',
      },
      body: JSON.stringify(pollData),
    });

    if (!response.ok) {
      const errorData = await response.json();
      console.error('‚ùå Error enviando poll de estudio:', errorData);
      return false;
    }

    const data = await response.json();
    const pollid = data.result.poll.id;

    // Guardar mapping temporal en memoria para poder procesar respuesta despu√©s
    // TODO: Implementar con Redis o tabla espec√≠fica para producci√≥n
    global.studyPollMappings = global.studyPollMappings || new Map();
    const mappingData = {
      questionid: questionData.id.toString(),
      userid: userid,
      subject: questionData.subject,
      timestamp: Date.now(),
      // üé≤ Guardar el √≠ndice correcto despu√©s del shuffle para validar respuestas
      correctanswerindex: newCorrectIndex,
      originalCorrectIndex: originalCorrectIndex
    };
    global.studyPollMappings.set(pollid, mappingData);

    // ‚è∞ PROGRAMAR TIMEOUT PARA ENVIAR SIGUIENTE PREGUNTA SI NO HAY RESPUESTA
    setTimeout(async () => {
      try {
        // Verificar si el poll a√∫n est√° en el mapping (no fue respondido)
        if (global.studyPollMappings && global.studyPollMappings.has(pollid)) {
          console.log(`‚è∞ TIMEOUT: Poll ${pollid} no fue respondido en 65 segundos, procesando autom√°ticamente...`);
          
          // Procesar timeout como respuesta no respondida usando el StudySessionService
          console.log('‚è∞ Procesando timeout autom√°ticamente con StudySessionService...');
          
          // Usar el m√©todo processPollAnswer con opci√≥n inv√°lida (-1) para indicar timeout
          await studySessionService.processPollAnswer(
            pollid,
            userid.toString(),
            -1 // Opci√≥n inv√°lida para indicar timeout
          );
          
          // Limpiar mapping despu√©s del procesamiento
          global.studyPollMappings.delete(pollid);
          
          console.log('‚úÖ Timeout procesado exitosamente por StudySessionService');
        }
      } catch (error) {
        console.error('‚ùå Error procesando timeout de poll:', error);
      }
    }, 65000); // 65 segundos (5 segundos despu√©s del l√≠mite de Telegram)

    console.log(`‚úÖ Poll de estudio enviado - ID: ${pollid}`);
    return true;

  } catch (error) {
    console.error('‚ùå Error enviando poll de estudio:', error);
    return false;
  }
}

// ==============================================
// üìä HANDLERS DE COMANDOS DE ESTAD√çSTICAS PERSONALES
// ==============================================

async function handleMiProgresoCommand(userid: string, fromtelegramuser: any): Promise<string | null> {
  try {
    console.log('üìä MI PROGRESO COMMAND - Ver progreso personal de graduaciones');

    // Verificar usuario registrado
    const user = await prisma.telegramuser.findUnique({
      where: { telegramUserId: userid }
    });

    if (!user) {
      return `‚ùå <b>Usuario no registrado</b>\n\nüîß Env√≠a <code>/start</code> primero para registrarte.`;
    }

    // Obtener estad√≠sticas de graduaci√≥n usando el servicio de estudio
    const studyService = new StudySessionService();
    
    // Contar total de preguntas falladas y graduadas por materia
    const subjectMappings = StudySessionService.getSubjectMappings();
    const stats: Record<string, { total: number, graduated: number }> = {};
    
    for (const [command, subjectName] of Object.entries(subjectMappings)) {
      const subjectKey = command.replace('/', '');
      
      // Contar preguntas falladas (no graduadas)
      const failedCount = await studyService.getFailedQuestionsCount(userid, subjectKey);
      
      // Contar total de respuestas incorrectas √∫nicamente (estimado de preguntas que han fallado alguna vez)
      const uniqueFailedQuestions = await prisma.studyresponse.findMany({
        where: {
          userid: userid,
          subject: subjectKey,
          iscorrect: false
        },
        select: {
          questionid: true
        },
        distinct: ['questionId']
      });
      const totalFailedEver = uniqueFailedQuestions.length;
      
      // Graduadas = Total que fallaron alguna vez - Actuales falladas
      const graduated = Math.max(0, totalFailedEver - failedCount);
      
      if (totalFailedEver > 0) {
        stats[subjectName] = {
          total: totalFailedEver,
          graduated: graduated
        };
      }
    }

    if (Object.keys(stats).length === 0) {
      return `üìä <b>MI PROGRESO</b>

üë§ <b>${user.firstName || user.username || 'Usuario'}</b>

‚ùå <b>A√∫n no tienes preguntas graduadas</b>

üí° <b>¬øC√≥mo funciona la graduaci√≥n?</b>
‚Ä¢ Cuando fallas una pregunta, va a tu lista de "falladas"
‚Ä¢ Cuando aciertas 1 vez esa pregunta ‚Üí ¬°Se grad√∫a! üéì
‚Ä¢ Las preguntas graduadas ya no aparecen en /falladas

üéØ <b>Para empezar:</b>
‚Ä¢ Responde preguntas en el grupo
‚Ä¢ Usa <code>/falladas</code> para repasar las que hayas fallado
‚Ä¢ ¬°Observa c√≥mo van gradu√°ndose!

üìö <b>Comandos √∫tiles:</b>
‚Ä¢ <code>/estadisticas</code> - Ver precisi√≥n por materia
‚Ä¢ <code>/graduadas</code> - Ver lista de preguntas graduadas`;
    }

    let message = `üìä <b>MI PROGRESO DE GRADUACI√ìN</b>\n\n`;
    message += `üë§ <b>${user.firstName || user.username || 'Usuario'}</b>\n\n`;

    // Calcular estad√≠sticas generales
    const totalFailed = Object.values(stats).reduce((sum, s) => sum + s.total, 0);
    const totalGraduated = Object.values(stats).reduce((sum, s) => sum + s.graduated, 0);
    const graduationRate = totalFailed > 0 ? Math.round((totalGraduated / totalFailed) * 100) : 0;

    message += `üéì <b>RESUMEN GENERAL:</b>\n`;
    message += `üìö Total preguntas falladas alguna vez: ${totalFailed}\n`;
    message += `‚úÖ Preguntas graduadas: ${totalGraduated}\n`;
    message += `üìä Tasa de graduaci√≥n: ${graduationRate}%\n\n`;

    // Mostrar desglose por materia
    message += `üìã <b>DESGLOSE POR MATERIA:</b>\n`;
    
    const sortedStats = Object.entries(stats).sort((a, b) => b[1].graduated - a[1].graduated);
    
    sortedStats.forEach(([subject, data]) => {
      const rate = data.total > 0 ? Math.round((data.graduated / data.total) * 100) : 0;
      const emoji = rate >= 80 ? 'üéØ' : rate >= 60 ? 'üìà' : rate >= 40 ? '‚ö°' : 'üìö';
      
      message += `${emoji} <b>${subject}</b>\n`;
      message += `   üéì Graduadas: ${data.graduated}/${data.total} (${rate}%)\n`;
      message += `   üìù Pendientes: ${data.total - data.graduated}\n\n`;
    });

    // Motivaci√≥n personalizada
    if (graduationRate >= 80) {
      message += `üèÜ <b>¬°EXCELENTE!</b> Tienes una tasa de graduaci√≥n muy alta.\n`;
    } else if (graduationRate >= 60) {
      message += `üëç <b>¬°MUY BIEN!</b> Est√°s en buen camino con tus graduaciones.\n`;
    } else if (graduationRate >= 40) {
      message += `üí™ <b>¬°SIGUE AS√ç!</b> Vas progresando en tus graduaciones.\n`;
    } else {
      message += `üöÄ <b>¬°A POR ELLO!</b> Practica con /falladas para graduar m√°s preguntas.\n`;
    }

    message += `\nüìö <b>COMANDOS √öTILES:</b>\n`;
    message += `‚Ä¢ <code>/falladas</code> - Repasar preguntas pendientes\n`;
    message += `‚Ä¢ <code>/estadisticas</code> - Ver precisi√≥n por materia\n`;
    message += `‚Ä¢ <code>/graduadas</code> - Ver lista detallada`;

    return message;

  } catch (error) {
    console.error('‚ùå Error en handleMiProgresoCommand:', error);
    return `‚ùå <b>Error interno</b>\n\nInt√©ntalo de nuevo en unos segundos.`;
  }
}

async function handleEstadisticasCommand(userid: string, fromtelegramuser: any): Promise<string | null> {
  try {
    console.log('üìà ESTADISTICAS COMMAND - Ver estad√≠sticas por materia');

    // Verificar usuario registrado
    const user = await prisma.telegramuser.findUnique({
      where: { telegramUserId: userid }
    });

    if (!user) {
      return `‚ùå <b>Usuario no registrado</b>\n\nüîß Env√≠a <code>/start</code> primero para registrarte.`;
    }

    // Obtener estad√≠sticas por materia
    const subjectMappings = StudySessionService.getSubjectMappings();
    const stats: Record<string, { total: number, correct: number, accuracy: number }> = {};
    
    for (const [command, subjectName] of Object.entries(subjectMappings)) {
      const subjectKey = command.replace('/', '');
      
      // Contar respuestas por materia
      const responses = await prisma.studyresponse.groupBy({
        by: ['isCorrect'],
        where: {
          userid: userid,
          subject: subjectKey
        },
        _count: {
          _all: true
        }
      });
      
      let total = 0;
      let correct = 0;
      
      responses.forEach(r => {
        total += r._count._all;
        if (r.iscorrect) {
          correct += r._count._all;
        }
      });
      
      if (total > 0) {
        const accuracy = Math.round((correct / total) * 100);
        stats[subjectName] = { total, correct, accuracy };
      }
    }

    if (Object.keys(stats).length === 0) {
      return `üìà <b>ESTAD√çSTICAS POR MATERIA</b>

üë§ <b>${user.firstName || user.username || 'Usuario'}</b>

‚ùå <b>A√∫n no tienes estad√≠sticas</b>

üéØ <b>Para generar estad√≠sticas:</b>
‚Ä¢ Responde preguntas en el grupo
‚Ä¢ Usa comandos de estudio como <code>/constitucion5</code>
‚Ä¢ Practica con <code>/falladas</code>

üìö <b>Comandos de estudio disponibles:</b>
‚Ä¢ <code>/constitucion10</code> - Preguntas de Constituci√≥n
‚Ä¢ <code>/defensanacional5</code> - Preguntas de Defensa Nacional
‚Ä¢ <code>/falladas</code> - Repasar preguntas falladas`;
    }

    let message = `üìà <b>ESTAD√çSTICAS POR MATERIA</b>\n\n`;
    message += `üë§ <b>${user.firstName || user.username || 'Usuario'}</b>\n\n`;

    // Calcular estad√≠sticas generales
    const totalResponses = Object.values(stats).reduce((sum, s) => sum + s.total, 0);
    const totalCorrect = Object.values(stats).reduce((sum, s) => sum + s.correct, 0);
    const overallAccuracy = totalResponses > 0 ? Math.round((totalCorrect / totalResponses) * 100) : 0;

    message += `üéØ <b>RESUMEN GENERAL:</b>\n`;
    message += `üìä Total respuestas: ${totalResponses}\n`;
    message += `‚úÖ Respuestas correctas: ${totalCorrect}\n`;
    message += `üéØ Precisi√≥n general: ${overallAccuracy}%\n\n`;

    // Mostrar estad√≠sticas por materia (ordenadas por precisi√≥n)
    message += `üìã <b>DESGLOSE POR MATERIA:</b>\n`;
    
    const sortedStats = Object.entries(stats).sort((a, b) => b[1].accuracy - a[1].accuracy);
    
    sortedStats.forEach(([subject, data]) => {
      let emoji = 'üìö';
      if (data.accuracy >= 90) emoji = 'üèÜ';
      else if (data.accuracy >= 80) emoji = 'ü•á';
      else if (data.accuracy >= 70) emoji = 'ü•à';
      else if (data.accuracy >= 60) emoji = 'ü•â';
      else if (data.accuracy >= 50) emoji = 'üìà';
      else emoji = '‚ö°';
      
      message += `${emoji} <b>${subject}</b>\n`;
      message += `   üéØ Precisi√≥n: ${data.accuracy}% (${data.correct}/${data.total})\n`;
      message += `   üìä Total respuestas: ${data.total}\n\n`;
    });

    // Consejos personalizados
    const worstSubject = sortedStats[sortedStats.length - 1];
    const bestSubject = sortedStats[0];
    
    if (overallAccuracy >= 80) {
      message += `üéâ <b>¬°EXCELENTE RENDIMIENTO!</b> Tu precisi√≥n general es muy alta.\n`;
    } else if (overallAccuracy >= 70) {
      message += `üëç <b>¬°BUEN TRABAJO!</b> Tienes una precisi√≥n s√≥lida.\n`;
    } else if (overallAccuracy >= 60) {
      message += `üí™ <b>¬°SIGUE MEJORANDO!</b> Vas por buen camino.\n`;
    } else {
      message += `üöÄ <b>¬°A POR ELLO!</b> Cada respuesta te hace mejorar.\n`;
    }

    if (worstSubject && worstSubject[1].accuracy < 70) {
      message += `üí° <b>TIP:</b> Considera repasar m√°s ${worstSubject[0]} (${worstSubject[1].accuracy}%)\n`;
    }

    message += `\nüìö <b>COMANDOS √öTILES:</b>\n`;
    message += `‚Ä¢ <code>/miprogreso</code> - Ver preguntas graduadas\n`;
    message += `‚Ä¢ <code>/falladas</code> - Repasar preguntas falladas\n`;
    message += `‚Ä¢ <code>/graduadas</code> - Lista de preguntas graduadas`;

    return message;

  } catch (error) {
    console.error('‚ùå Error en handleEstadisticasCommand:', error);
    return `‚ùå <b>Error interno</b>\n\nInt√©ntalo de nuevo en unos segundos.`;
  }
}

async function handleGraduadasCommand(userid: string, fromtelegramuser: any): Promise<string | null> {
  try {
    console.log('üéì GRADUADAS COMMAND - Ver preguntas graduadas');

    // Verificar usuario registrado
    const user = await prisma.telegramuser.findUnique({
      where: { telegramUserId: userid }
    });

    if (!user) {
      return `‚ùå <b>Usuario no registrado</b>\n\nüîß Env√≠a <code>/start</code> primero para registrarte.`;
    }

    // Obtener preguntas graduadas (que han tenido >= 1 acierto desde √∫ltimo fallo)
    const graduatedQuestions = await prisma.$queryRaw`
      WITH failed_questions AS (
        SELECT 
          "questionid",
          subject,
          MAX("answeredAt") as last_failed_at
        FROM "StudyResponse" 
        WHERE "userid" = ${userid} 
          AND "iscorrect" = false
        GROUP BY "questionid", subject
      ),
      total_successes AS (
        SELECT 
          fq."questionid",
          fq.subject,
          fq.last_failed_at,
          COUNT(sr2.id) as total_successes_since_last_fail
        FROM failed_questions fq
        LEFT JOIN "StudyResponse" sr2 ON sr2."questionid" = fq."questionid" 
          AND sr2."userid" = ${userid} 
          AND sr2."iscorrect" = true 
          AND sr2."answeredAt" > fq.last_failed_at
          AND sr2.subject = fq.subject
        GROUP BY fq."questionid", fq.subject, fq.last_failed_at
      )
      SELECT * FROM total_successes 
      WHERE total_successes_since_last_fail >= 1
      ORDER BY subject, "questionid"
    `;

    if (!graduatedQuestions || (graduatedQuestions as any[]).length === 0) {
      return `üéì <b>PREGUNTAS GRADUADAS</b>

üë§ <b>${user.firstName || user.username || 'Usuario'}</b>

‚ùå <b>A√∫n no tienes preguntas graduadas</b>

üí° <b>¬øC√≥mo graduar preguntas?</b>
1. Al fallar una pregunta, va a tu lista de "falladas"
2. Usa <code>/falladas</code> para repasarla
3. Al acertarla 1 vez ‚Üí ¬°Se grad√∫a! üéì
4. Ya no aparecer√° m√°s en /falladas

üéØ <b>Para empezar:</b>
‚Ä¢ Responde preguntas en el grupo
‚Ä¢ Usa <code>/falladas</code> para repasar
‚Ä¢ ¬°Observa c√≥mo se grad√∫an!

üìö <b>Comandos √∫tiles:</b>
‚Ä¢ <code>/miprogreso</code> - Ver progreso general
‚Ä¢ <code>/estadisticas</code> - Ver precisi√≥n por materia`;
    }

    const questions = graduatedQuestions as any[];
    
    let message = `üéì <b>PREGUNTAS GRADUADAS</b>\n\n`;
    message += `üë§ <b>${user.firstName || user.username || 'Usuario'}</b>\n\n`;
    
    message += `‚úÖ <b>Total graduadas: ${questions.length}</b>\n\n`;

    // Agrupar por materia
    const questionsBySubject: Record<string, any[]> = {};
    const subjectMappings = StudySessionService.getSubjectMappings();
    
    questions.forEach(q => {
      const subjectName = Object.entries(subjectMappings)
        .find(([cmd, name]) => cmd.replace('/', '') === q.subject)?.[1] || q.subject;
      
      if (!questionsBySubject[subjectName]) {
        questionsBySubject[subjectName] = [];
      }
      questionsBySubject[subjectName].push(q);
    });

    // Mostrar por materia
    message += `üìã <b>POR MATERIA:</b>\n`;
    
    Object.entries(questionsBySubject)
      .sort((a, b) => b[1].length - a[1].length)
      .forEach(([subject, subjectQuestions]) => {
        message += `üìö <b>${subject}</b>: ${subjectQuestions.length} graduadas\n`;
        
        // Mostrar las primeras 3 preguntas como ejemplo
        const samplesToShow = Math.min(3, subjectQuestions.length);
                 for (let i = 0; i < samplesToShow; i++) {
           const q = subjectQuestions[i];
           message += `   üéì ID: ${q.questionid} (${Number(q.total_successes_since_last_fail)} aciertos)\n`;
         }
        
        if (subjectQuestions.length > 3) {
          message += `   üìä ... y ${subjectQuestions.length - 3} m√°s\n`;
        }
        
        message += `\n`;
      });

    // Estad√≠sticas adicionales (convertir BigInt a number)
    const successCounts = questions.map(q => Number(q.total_successes_since_last_fail));
    const avgSuccesses = successCounts.length > 0 ? 
      Math.round(successCounts.reduce((sum, count) => sum + count, 0) / successCounts.length * 10) / 10 : 0;

    message += `üìä <b>ESTAD√çSTICAS:</b>\n`;
    message += `üéØ Promedio aciertos por pregunta: ${avgSuccesses}\n`;
    message += `üìÖ √öltima actualizaci√≥n: ${new Date().toLocaleDateString('es-ES')}\n\n`;

    message += `üéâ <b>¬°Felicidades por tu progreso!</b>\n`;
    message += `Cada pregunta graduada es una victoria. üèÜ\n\n`;

    message += `üìö <b>COMANDOS √öTILES:</b>\n`;
    message += `‚Ä¢ <code>/falladas</code> - Repasar preguntas pendientes\n`;
    message += `‚Ä¢ <code>/miprogreso</code> - Ver progreso general\n`;
    message += `‚Ä¢ <code>/reiniciar_graduacion</code> - Reset para repasar`;

    return message;

  } catch (error) {
    console.error('‚ùå Error en handleGraduadasCommand:', error);
    return `‚ùå <b>Error interno</b>\n\nInt√©ntalo de nuevo en unos segundos.`;
  }
}

async function handleReiniciarGraduacionCommand(userid: string, fromtelegramuser: any): Promise<string | null> {
  try {
    console.log('üîÑ REINICIAR_GRADUACION COMMAND - Reset de graduaciones');

    // Verificar usuario registrado
    const user = await prisma.telegramuser.findUnique({
      where: { telegramUserId: userid }
    });

    if (!user) {
      return `‚ùå <b>Usuario no registrado</b>\n\nüîß Env√≠a <code>/start</code> primero para registrarte.`;
    }

    // Contar preguntas que ser√≠an afectadas
    const graduatedCount = await prisma.$queryRaw`
      WITH failed_questions AS (
        SELECT 
          "questionid",
          subject,
          MAX("answeredAt") as last_failed_at
        FROM "StudyResponse" 
        WHERE "userid" = ${userid} 
          AND "iscorrect" = false
        GROUP BY "questionid", subject
      ),
      total_successes AS (
        SELECT 
          fq."questionid",
          fq.subject,
          COUNT(sr2.id) as total_successes_since_last_fail
        FROM failed_questions fq
        LEFT JOIN "StudyResponse" sr2 ON sr2."questionid" = fq."questionid" 
          AND sr2."userid" = ${userid} 
          AND sr2."iscorrect" = true 
          AND sr2."answeredAt" > fq.last_failed_at
          AND sr2.subject = fq.subject
        GROUP BY fq."questionid", fq.subject
      )
      SELECT COUNT(*) as count FROM total_successes 
      WHERE total_successes_since_last_fail >= 1
    `;

    const count = Number((graduatedCount as any[])[0]?.count || 0);

    if (count === 0) {
      return `üîÑ <b>REINICIAR GRADUACI√ìN</b>

üë§ <b>${user.firstName || user.username || 'Usuario'}</b>

‚ÑπÔ∏è <b>No hay preguntas graduadas que reiniciar</b>

üí° <b>¬øQu√© hace este comando?</b>
‚Ä¢ Resetea todas las graduaciones
‚Ä¢ Las preguntas "graduadas" vuelven a aparecer en /falladas
‚Ä¢ √ötil para repasar todo desde cero

üéØ <b>Para tener graduaciones que resetear:</b>
‚Ä¢ Usa <code>/falladas</code> para repasar preguntas
‚Ä¢ Acierta preguntas para graduarlas
‚Ä¢ Luego podr√°s usar este reset

üìö <b>Comandos √∫tiles:</b>
‚Ä¢ <code>/miprogreso</code> - Ver progreso actual
‚Ä¢ <code>/graduadas</code> - Ver preguntas graduadas`;
    }

    return `üîÑ <b>REINICIAR GRADUACI√ìN</b>

üë§ <b>${user.firstName || user.username || 'Usuario'}</b>

‚ö†Ô∏è <b>CONFIRMACI√ìN REQUERIDA</b>

üìä <b>Preguntas graduadas encontradas: ${count}</b>

üí° <b>¬øQu√© pasar√° si confirmas?</b>
‚Ä¢ Se borrar√°n todas las respuestas correctas de preguntas falladas
‚Ä¢ Las ${count} preguntas graduadas volver√°n a aparecer en /falladas
‚Ä¢ Podr√°s repasarlas desde cero
‚Ä¢ No se perder√°n las estad√≠sticas generales

‚ö†Ô∏è <b>IMPORTANTE:</b> Esta acci√≥n NO se puede deshacer.

ü§î <b>¬øEst√°s seguro?</b>
Este comando est√° dise√±ado para casos especiales de repaso intensivo.

üí° <b>Alternativas recomendadas:</b>
‚Ä¢ <code>/falladas</code> - Repasar solo preguntas pendientes
‚Ä¢ <code>/constitucionfalladas5</code> - Repasar por materia espec√≠fica
‚Ä¢ <code>/miprogreso</code> - Ver estado actual

üîÑ <b>Para confirmar el reset completo:</b>
Usa <code>/reiniciar_graduacion_confirmar</code>

‚ùå <b>Para cancelar:</b>
Simplemente ignora este mensaje.`;

  } catch (error) {
    console.error('‚ùå Error en handleReiniciarGraduacionCommand:', error);
    return `‚ùå <b>Error interno</b>\n\nInt√©ntalo de nuevo en unos segundos.`;
  }
}

async function handleReiniciarGraduacionConfirmarCommand(userid: string, fromtelegramuser: any): Promise<string | null> {
  try {
    console.log('‚úÖ REINICIAR_GRADUACION_CONFIRMAR COMMAND - Ejecutar reset de graduaciones');

    // Verificar usuario registrado
    const user = await prisma.telegramuser.findUnique({
      where: { telegramUserId: userid }
    });

    if (!user) {
      return `‚ùå <b>Usuario no registrado</b>\n\nüîß Env√≠a <code>/start</code> primero para registrarte.`;
    }

    // Ejecutar el reset en una transacci√≥n
    const result = await prisma.$transaction(async (tx) => {
      // Contar preguntas afectadas antes del reset
      const beforeCount = await tx.$queryRaw`
        WITH failed_questions AS (
          SELECT 
            "questionid",
            subject,
            MAX("answeredAt") as last_failed_at
          FROM "StudyResponse" 
          WHERE "userid" = ${userid} 
            AND "iscorrect" = false
          GROUP BY "questionid", subject
        ),
        total_successes AS (
          SELECT 
            fq."questionid",
            fq.subject,
            COUNT(sr2.id) as total_successes_since_last_fail
          FROM failed_questions fq
          LEFT JOIN "StudyResponse" sr2 ON sr2."questionid" = fq."questionid" 
            AND sr2."userid" = ${userid} 
            AND sr2."iscorrect" = true 
            AND sr2."answeredAt" > fq.last_failed_at
            AND sr2.subject = fq.subject
          GROUP BY fq."questionid", fq.subject
        )
        SELECT COUNT(*) as count FROM total_successes 
        WHERE total_successes_since_last_fail >= 1
      `;

      const graduatedCount = Number((beforeCount as any[])[0]?.count || 0);

      if (graduatedCount === 0) {
        return { success: false, count: 0 };
      }

      // Eliminar TODAS las respuestas correctas de preguntas que hab√≠an sido falladas
      // Esto hace que las preguntas "graduadas" vuelvan a ser "falladas"
      const deletedResponses = await tx.$executeRaw`
        DELETE FROM "StudyResponse" 
        WHERE "userid" = ${userid} 
          AND "iscorrect" = true 
          AND "questionid" IN (
            SELECT DISTINCT "questionid" 
            FROM "StudyResponse" 
            WHERE "userid" = ${userid} 
              AND "iscorrect" = false
          )
      `;

      return { success: true, count: graduatedCount, deleted: Number(deletedResponses) };
    });

    if (!result.success) {
      return `üîÑ <b>RESET GRADUACI√ìN</b>

üë§ <b>${user.firstName || user.username || 'Usuario'}</b>

‚ÑπÔ∏è <b>No hay preguntas graduadas para resetear</b>

üí° <b>Estado actual:</b>
‚Ä¢ No tienes preguntas graduadas actualmente
‚Ä¢ Todas las preguntas falladas ya est√°n disponibles para repaso

üéØ <b>Puedes usar:</b>
‚Ä¢ <code>/falladas</code> - Ver preguntas pendientes de repaso
‚Ä¢ <code>/miprogreso</code> - Ver tu progreso actual`;
    }

    return `‚úÖ <b>GRADUACI√ìN RESETEADA</b>

üë§ <b>${user.firstName || user.username || 'Usuario'}</b>

üéâ <b>Reset completado exitosamente</b>

üìä <b>Resultados:</b>
‚Ä¢ ${result.count} preguntas des-graduadas
‚Ä¢ ${result.deleted} respuestas correctas eliminadas
‚Ä¢ Todas las preguntas vuelven a estar disponibles para repaso

üí° <b>¬øQu√© significa esto?</b>
‚Ä¢ Las preguntas que hab√≠as "graduado" vuelven a aparecer en /falladas
‚Ä¢ Puedes repasarlas desde cero
‚Ä¢ Tus estad√≠sticas generales se mantienen intactas

üéØ <b>Pr√≥ximos pasos:</b>
‚Ä¢ Usa <code>/falladas</code> para empezar el repaso intensivo
‚Ä¢ Usa <code>/miprogreso</code> para ver el nuevo estado
‚Ä¢ Usa <code>/estadisticas</code> para ver tu rendimiento

üöÄ <b>¬°Ideal para repaso intensivo pre-examen!</b>

üí° <b>Consejo:</b> Ahora tienes la oportunidad de repasar todo desde cero y consolidar tu conocimiento.`;

  } catch (error) {
    console.error('‚ùå Error en handleReiniciarGraduacionConfirmarCommand:', error);
    return `‚ùå <b>Error interno</b>\n\nNo se pudo completar el reset. Int√©ntalo de nuevo en unos segundos.`;
  }
}

async function handleConfigurarNotificacionesCommand(userid: string, fromtelegramuser: any): Promise<string | null> {
  try {
    console.log('‚öôÔ∏è CONFIGURAR_NOTIFICACIONES COMMAND - Configurar sistema de notificaciones');

    // Verificar usuario registrado
    const user = await prisma.telegramuser.findUnique({
      where: { telegramUserId: userid }
    });

    if (!user) {
      return `‚ùå <b>Usuario no registrado</b>\n\nüîß Env√≠a <code>/start</code> primero para registrarte.`;
    }

    // Obtener configuraciones actuales
    const { NotificationService } = await import('@/services/notificationService');
    const notificationService = new NotificationService();
    const settings = await notificationService.getUserNotificationSettings(user.id);

    const graduationEnabled = settings?.graduationNotifications !== false;
    const milestoneEnabled = settings?.milestoneNotifications !== false;
    const reminderEnabled = settings?.reminderNotifications !== false;
    const weeklyEnabled = settings?.weeklyReportNotifications !== false;

    const startHour = settings?.notificationStartHour || 8;
    const endHour = settings?.notificationEndHour || 22;
    const reminderDays = settings?.reminderDaysThreshold || 3;

    return `‚öôÔ∏è <b>CONFIGURACI√ìN DE NOTIFICACIONES</b>

üë§ ${fromtelegramuser.first_name || 'Usuario'}

üîî <b>TIPOS DE NOTIFICACIONES:</b>
üéì Graduaciones: ${graduationEnabled ? '‚úÖ Activada' : '‚ùå Desactivada'}
üèÜ Logros: ${milestoneEnabled ? '‚úÖ Activada' : '‚ùå Desactivada'}
‚è∞ Recordatorios: ${reminderEnabled ? '‚úÖ Activada' : '‚ùå Desactivada'}
üìä Reportes semanales: ${weeklyEnabled ? '‚úÖ Activada' : '‚ùå Desactivada'}

‚è∞ <b>HORARIO:</b>
üïê Desde: ${startHour}:00
üïô Hasta: ${endHour}:00

‚ö†Ô∏è <b>RECORDATORIOS:</b>
üìÖ Cada ${reminderDays} d√≠as sin estudiar

üîß <b>COMANDOS DE CONFIGURACI√ìN:</b>
‚Ä¢ <code>/notificaciones_graduacion on/off</code>
‚Ä¢ <code>/notificaciones_logros on/off</code>
‚Ä¢ <code>/notificaciones_recordatorios on/off</code>
‚Ä¢ <code>/notificaciones_semanales on/off</code>
‚Ä¢ <code>/horario_notificaciones 8 22</code>

üí° <b>Ejemplo:</b>
<code>/notificaciones_graduacion off</code> - Desactivar notificaciones de graduaci√≥n
<code>/horario_notificaciones 9 21</code> - Recibir notificaciones de 9:00 a 21:00`;

  } catch (error) {
    console.error('‚ùå Error en handleConfigurarNotificacionesCommand:', error);
    return `‚ùå <b>Error interno</b>\n\nInt√©ntalo de nuevo en unos segundos.`;
  }
}

// ==========================================
// üîî FUNCIONES DE COMANDOS ESPEC√çFICOS DE NOTIFICACIONES
// ==========================================

async function handleNotificacionesGraduacionCommand(userid: string, fromtelegramuser: any, messageText: string): Promise<string | null> {
  try {
    console.log('üéì NOTIFICACIONES_GRADUACION COMMAND - Configurar notificaciones de graduaci√≥n');

    // Verificar usuario registrado
    const user = await prisma.telegramuser.findUnique({
      where: { telegramUserId: userid }
    });

    if (!user) {
      return `‚ùå <b>Usuario no registrado</b>\n\nüîß Env√≠a <code>/start</code> primero para registrarte.`;
    }

    // Parsear comando
    const parts = messageText.trim().split(' ');
    if (parts.length < 2) {
      return `‚ùå <b>Uso incorrecto</b>\n\nüîß <b>Uso correcto:</b>\n<code>/notificaciones_graduacion on</code> - Activar\n<code>/notificaciones_graduacion off</code> - Desactivar\n\nüí° <b>Ejemplo:</b>\n<code>/notificaciones_graduacion on</code>`;
    }

    const setting = parts[1].toLowerCase();
    if (setting !== 'on' && setting !== 'off') {
      return `‚ùå <b>Par√°metro inv√°lido</b>\n\n‚úÖ <b>Opciones v√°lidas:</b>\n‚Ä¢ <code>on</code> - Activar\n‚Ä¢ <code>off</code> - Desactivar\n\nüí° <b>Ejemplo:</b>\n<code>/notificaciones_graduacion on</code>`;
    }

    const enabled = setting === 'on';

    // Actualizar configuraci√≥n
    const { NotificationService } = await import('@/services/notificationService');
    const notificationService = new NotificationService();
    await notificationService.updateUserNotificationSettings(user.id, {
      graduationNotifications: enabled
    });

    const status = enabled ? '‚úÖ activadas' : '‚ùå desactivadas';
    const emoji = enabled ? 'üéâ' : 'üò¥';
    
    return `${emoji} <b>NOTIFICACIONES DE GRADUACI√ìN ${status.toUpperCase()}</b>

üë§ ${fromtelegramuser.first_name || 'Usuario'}

üéì <b>Estado:</b> ${status}

${enabled ? 
  `üîî <b>Recibir√°s notificaciones cuando:</b>\n‚Ä¢ Grad√∫es una pregunta fallada\n‚Ä¢ Alcances hitos de graduaci√≥n (5, 10, 25, etc.)\n‚Ä¢ Completes sesiones exitosas de repaso\n\nüí° <b>Tip:</b> Las notificaciones respetan tu horario configurado.` :
  `üò¥ <b>No recibir√°s notificaciones de:</b>\n‚Ä¢ Preguntas graduadas\n‚Ä¢ Hitos de graduaci√≥n\n‚Ä¢ Sesiones de repaso completadas\n\nüí° <b>Tip:</b> Puedes reactivarlas cuando quieras.`
}

üîß <b>Otros comandos:</b>
‚Ä¢ <code>/configurar_notificaciones</code> - Ver todas las configuraciones
‚Ä¢ <code>/notificaciones_logros ${enabled ? 'off' : 'on'}</code> - ${enabled ? 'Desactivar' : 'Activar'} notificaciones de logros`;

  } catch (error) {
    console.error('‚ùå Error en handleNotificacionesGraduacionCommand:', error);
    return `‚ùå <b>Error interno</b>\n\nInt√©ntalo de nuevo en unos segundos.`;
  }
}

async function handleNotificacionesLogrosCommand(userid: string, fromtelegramuser: any, messageText: string): Promise<string | null> {
  try {
    console.log('üèÜ NOTIFICACIONES_LOGROS COMMAND - Configurar notificaciones de logros');

    // Verificar usuario registrado
    const user = await prisma.telegramuser.findUnique({
      where: { telegramUserId: userid }
    });

    if (!user) {
      return `‚ùå <b>Usuario no registrado</b>\n\nüîß Env√≠a <code>/start</code> primero para registrarte.`;
    }

    // Parsear comando
    const parts = messageText.trim().split(' ');
    if (parts.length < 2) {
      return `‚ùå <b>Uso incorrecto</b>\n\nüîß <b>Uso correcto:</b>\n<code>/notificaciones_logros on</code> - Activar\n<code>/notificaciones_logros off</code> - Desactivar\n\nüí° <b>Ejemplo:</b>\n<code>/notificaciones_logros on</code>`;
    }

    const setting = parts[1].toLowerCase();
    if (setting !== 'on' && setting !== 'off') {
      return `‚ùå <b>Par√°metro inv√°lido</b>\n\n‚úÖ <b>Opciones v√°lidas:</b>\n‚Ä¢ <code>on</code> - Activar\n‚Ä¢ <code>off</code> - Desactivar\n\nüí° <b>Ejemplo:</b>\n<code>/notificaciones_logros on</code>`;
    }

    const enabled = setting === 'on';

    // Actualizar configuraci√≥n
    const { NotificationService } = await import('@/services/notificationService');
    const notificationService = new NotificationService();
    await notificationService.updateUserNotificationSettings(user.id, {
      milestoneNotifications: enabled
    });

    const status = enabled ? '‚úÖ activadas' : '‚ùå desactivadas';
    const emoji = enabled ? 'üèÜ' : 'üò¥';
    
    return `${emoji} <b>NOTIFICACIONES DE LOGROS ${status.toUpperCase()}</b>

üë§ ${fromtelegramuser.first_name || 'Usuario'}

üèÜ <b>Estado:</b> ${status}

${enabled ? 
  `üîî <b>Recibir√°s notificaciones cuando:</b>\n‚Ä¢ Alcances hitos importantes (5, 10, 25, 50, 100 graduaciones)\n‚Ä¢ Consigas rachas destacadas\n‚Ä¢ Desbloquees nuevos niveles\n‚Ä¢ Logres precisi√≥n excepcional\n\nüéâ <b>¬°Celebra tus logros!</b>` :
  `üò¥ <b>No recibir√°s notificaciones de:</b>\n‚Ä¢ Hitos de graduaci√≥n\n‚Ä¢ Rachas destacadas\n‚Ä¢ Nuevos niveles\n‚Ä¢ Logros desbloqueados\n\nüí° <b>Tip:</b> Puedes reactivarlas cuando quieras.`
}

üîß <b>Otros comandos:</b>
‚Ä¢ <code>/configurar_notificaciones</code> - Ver todas las configuraciones
‚Ä¢ <code>/notificaciones_graduacion ${enabled ? 'off' : 'on'}</code> - ${enabled ? 'Desactivar' : 'Activar'} notificaciones de graduaci√≥n`;

  } catch (error) {
    console.error('‚ùå Error en handleNotificacionesLogrosCommand:', error);
    return `‚ùå <b>Error interno</b>\n\nInt√©ntalo de nuevo en unos segundos.`;
  }
}

async function handleNotificacionesRecordatoriosCommand(userid: string, fromtelegramuser: any, messageText: string): Promise<string | null> {
  try {
    console.log('‚è∞ NOTIFICACIONES_RECORDATORIOS COMMAND - Configurar recordatorios');

    // Verificar usuario registrado
    const user = await prisma.telegramuser.findUnique({
      where: { telegramUserId: userid }
    });

    if (!user) {
      return `‚ùå <b>Usuario no registrado</b>\n\nüîß Env√≠a <code>/start</code> primero para registrarte.`;
    }

    // Parsear comando
    const parts = messageText.trim().split(' ');
    if (parts.length < 2) {
      return `‚ùå <b>Uso incorrecto</b>\n\nüîß <b>Uso correcto:</b>\n<code>/notificaciones_recordatorios on</code> - Activar\n<code>/notificaciones_recordatorios off</code> - Desactivar\n\nüí° <b>Ejemplo:</b>\n<code>/notificaciones_recordatorios on</code>`;
    }

    const setting = parts[1].toLowerCase();
    if (setting !== 'on' && setting !== 'off') {
      return `‚ùå <b>Par√°metro inv√°lido</b>\n\n‚úÖ <b>Opciones v√°lidas:</b>\n‚Ä¢ <code>on</code> - Activar\n‚Ä¢ <code>off</code> - Desactivar\n\nüí° <b>Ejemplo:</b>\n<code>/notificaciones_recordatorios on</code>`;
    }

    const enabled = setting === 'on';

    // Actualizar configuraci√≥n
    const { NotificationService } = await import('@/services/notificationService');
    const notificationService = new NotificationService();
    await notificationService.updateUserNotificationSettings(user.id, {
      reminderNotifications: enabled
    });

    const status = enabled ? '‚úÖ activados' : '‚ùå desactivados';
    const emoji = enabled ? '‚è∞' : 'üò¥';
    
    return `${emoji} <b>RECORDATORIOS ${status.toUpperCase()}</b>

üë§ ${fromtelegramuser.first_name || 'Usuario'}

‚è∞ <b>Estado:</b> ${status}

${enabled ? 
  `üîî <b>Recibir√°s recordatorios cuando:</b>\n‚Ä¢ Pases 3 d√≠as sin estudiar\n‚Ä¢ Tengas preguntas falladas pendientes\n‚Ä¢ Haya sido mucho tiempo desde tu √∫ltima sesi√≥n\n\nüí° <b>Frecuencia:</b> M√°ximo 1 recordatorio cada 3 d√≠as\n‚è∞ <b>Horario:</b> Respeta tu horario configurado` :
  `üò¥ <b>No recibir√°s recordatorios de:</b>\n‚Ä¢ Inactividad prolongada\n‚Ä¢ Preguntas pendientes\n‚Ä¢ Sesiones de estudio\n\nüí° <b>Tip:</b> Puedes reactivarlos cuando quieras.`
}

üîß <b>Otros comandos:</b>
‚Ä¢ <code>/configurar_notificaciones</code> - Ver todas las configuraciones
‚Ä¢ <code>/horario_notificaciones 8 22</code> - Configurar horario
‚Ä¢ <code>/notificaciones_semanales ${enabled ? 'off' : 'on'}</code> - ${enabled ? 'Desactivar' : 'Activar'} reportes semanales`;

  } catch (error) {
    console.error('‚ùå Error en handleNotificacionesRecordatoriosCommand:', error);
    return `‚ùå <b>Error interno</b>\n\nInt√©ntalo de nuevo en unos segundos.`;
  }
}

async function handleNotificacionesSemanalesCommand(userid: string, fromtelegramuser: any, messageText: string): Promise<string | null> {
  try {
    console.log('üìä NOTIFICACIONES_SEMANALES COMMAND - Configurar reportes semanales');

    // Verificar usuario registrado
    const user = await prisma.telegramuser.findUnique({
      where: { telegramUserId: userid }
    });

    if (!user) {
      return `‚ùå <b>Usuario no registrado</b>\n\nüîß Env√≠a <code>/start</code> primero para registrarte.`;
    }

    // Parsear comando
    const parts = messageText.trim().split(' ');
    if (parts.length < 2) {
      return `‚ùå <b>Uso incorrecto</b>\n\nüîß <b>Uso correcto:</b>\n<code>/notificaciones_semanales on</code> - Activar\n<code>/notificaciones_semanales off</code> - Desactivar\n\nüí° <b>Ejemplo:</b>\n<code>/notificaciones_semanales on</code>`;
    }

    const setting = parts[1].toLowerCase();
    if (setting !== 'on' && setting !== 'off') {
      return `‚ùå <b>Par√°metro inv√°lido</b>\n\n‚úÖ <b>Opciones v√°lidas:</b>\n‚Ä¢ <code>on</code> - Activar\n‚Ä¢ <code>off</code> - Desactivar\n\nüí° <b>Ejemplo:</b>\n<code>/notificaciones_semanales on</code>`;
    }

    const enabled = setting === 'on';

    // Actualizar configuraci√≥n
    const { NotificationService } = await import('@/services/notificationService');
    const notificationService = new NotificationService();
    await notificationService.updateUserNotificationSettings(user.id, {
      weeklyReportNotifications: enabled
    });

    const status = enabled ? '‚úÖ activados' : '‚ùå desactivados';
    const emoji = enabled ? 'üìä' : 'üò¥';
    
    return `${emoji} <b>REPORTES SEMANALES ${status.toUpperCase()}</b>

üë§ ${fromtelegramuser.first_name || 'Usuario'}

üìä <b>Estado:</b> ${status}

${enabled ? 
  `üîî <b>Recibir√°s cada domingo:</b>\n‚Ä¢ Resumen de tu progreso semanal\n‚Ä¢ Preguntas graduadas en la semana\n‚Ä¢ Estad√≠sticas de precisi√≥n\n‚Ä¢ Comparativa con semana anterior\n‚Ä¢ Recomendaciones personalizadas\n\nüìÖ <b>Cu√°ndo:</b> Domingos por la ma√±ana\n‚è∞ <b>Horario:</b> Respeta tu horario configurado` :
  `üò¥ <b>No recibir√°s:</b>\n‚Ä¢ Res√∫menes semanales\n‚Ä¢ Estad√≠sticas de progreso\n‚Ä¢ Comparativas semanales\n‚Ä¢ Recomendaciones personalizadas\n\nüí° <b>Tip:</b> Puedes reactivarlos cuando quieras.`
}

üîß <b>Otros comandos:</b>
‚Ä¢ <code>/configurar_notificaciones</code> - Ver todas las configuraciones
‚Ä¢ <code>/notificaciones_recordatorios ${enabled ? 'off' : 'on'}</code> - ${enabled ? 'Desactivar' : 'Activar'} recordatorios
‚Ä¢ <code>/estadisticas</code> - Ver tus estad√≠sticas actuales`;

  } catch (error) {
    console.error('‚ùå Error en handleNotificacionesSemanalesCommand:', error);
    return `‚ùå <b>Error interno</b>\n\nInt√©ntalo de nuevo en unos segundos.`;
  }
}

// ==============================================
// üìä HANDLER DE COMANDO DE QUOTAS Y L√çMITES
// ==============================================

async function handleMiQuotaCommand(userid: string, fromtelegramuser: any): Promise<string | null> {
  try {
    console.log('üìä MI QUOTA COMMAND - Ver l√≠mites y uso actual');

    // Verificar usuario registrado
    const user = await prisma.telegramuser.findUnique({
      where: { telegramUserId: userid }
    });

    if (!user) {
      return `‚ùå <b>Usuario no registrado</b>\n\nüîß Env√≠a <code>/start</code> primero para registrarte.`;
    }

    // Obtener suscripci√≥n actual usando SQL directo
    const subscriptionCheck = await prisma.$queryRaw`
      SELECT 
        tu."telegramUserId",
        tu."firstName",
        s."status",
        s."endDate",
        p."name" as "planName",
        p."displayName" as "planDisplayName",
        p."price",
        p."dailyQuestionsLimit",
        p."maxSimulationsPerDay",
        p."canUseFailedQuestions",
        p."canUseAdvancedStats",
        p."canUseSimulations",
        p."canUseAIAnalysis",
        p."canUseMoodleIntegration"
      FROM "TelegramUser" tu
      LEFT JOIN "UserSubscription" s ON tu."id" = s."userid" AND s."status" = 'active' AND s."endDate" >= NOW()
      LEFT JOIN "SubscriptionPlan" p ON s."planId" = p."id"
      WHERE tu."telegramUserId" = ${userid}
      LIMIT 1
    ` as any[];
    
    const userSubscription = subscriptionCheck[0];
    
    if (!userSubscription || !userSubscription.planName) {
      return `üîí <b>SIN SUSCRIPCI√ìN ACTIVA</b>

üë§ <b>${user.firstName || user.username || 'Usuario'}</b>

‚ùå <b>No tienes una suscripci√≥n activa</b>

üÜì <b>L√≠mites actuales (gratuito):</b>
‚Ä¢ üìö Preguntas privadas: 0/d√≠a
‚Ä¢ üîÑ Preguntas falladas: No disponible
‚Ä¢ üéØ Simulacros: No disponible
‚Ä¢ üìä Estad√≠sticas avanzadas: No disponible

üí° <b>¬øQuieres m√°s funcionalidades?</b>

üí∞ <b>PLAN B√ÅSICO (‚Ç¨4.99/mes):</b>
‚Ä¢ üìö 100 preguntas diarias en privado
‚Ä¢ üîÑ Sistema de preguntas falladas
‚Ä¢ üìä Estad√≠sticas b√°sicas

üíé <b>PLAN PREMIUM (‚Ç¨9.99/mes):</b>
‚Ä¢ ‚ôæÔ∏è Preguntas ilimitadas
‚Ä¢ üéØ Simulacros personalizados
‚Ä¢ üìä Estad√≠sticas avanzadas
‚Ä¢ üîó Integraci√≥n Moodle
‚Ä¢ ü§ñ An√°lisis con IA

üöÄ <b>Suscr√≠bete ahora:</b>
‚Ä¢ <code>/basico</code> - Plan B√°sico
‚Ä¢ <code>/premium</code> - Plan Premium
‚Ä¢ <code>/planes</code> - Comparar todos los planes`;
    }

    // Obtener uso actual del d√≠a usando SQL directo
    const today = new Date().toISOString().split('T')[0]; // Formato YYYY-MM-DD
    
    const usageStats = await prisma.$queryRaw`
      SELECT 
        "questionsUsed",
        "failedQuestionsUsed",
        "simulationsUsed"
      FROM "UserQuotaUsage"
      WHERE "userid" = ${user.id} AND "date" = ${today}::date
      LIMIT 1
    ` as any[];
    
    const todayUsage = usageStats[0] || {
      questionsUsed: 0,
      failedQuestionsUsed: 0,
      simulationsUsed: 0
    };

    const questionsUsed = (todayUsage.questionsUsed || 0) + (todayUsage.failedQuestionsUsed || 0);
    const simulationsUsed = todayUsage.simulationsUsed || 0;

    // Calcular d√≠as restantes de suscripci√≥n
    const endDate = userSubscription.endDate ? new Date(userSubscription.endDate) : null;
    const daysRemaining = endDate ? Math.ceil((endDate.getTime() - Date.now()) / (1000 * 60 * 60 * 24)) : null;

    let message = `üìä <b>MI ESTADO DE SUSCRIPCI√ìN</b>\n\n`;
    message += `üë§ <b>${user.firstName || user.username || 'Usuario'}</b>\n\n`;

    // Estado de la suscripci√≥n
    message += `üíé <b>PLAN ACTUAL:</b> ${userSubscription.planDisplayName}\n`;
    message += `üí∞ <b>Precio:</b> ‚Ç¨${userSubscription.price}/mes\n`;
    message += `üìã <b>Estado:</b> ‚úÖ Activa\n`;
    
    if (daysRemaining !== null) {
      message += `üìÖ <b>Renovaci√≥n:</b> ${daysRemaining} d√≠as\n`;
    }
    
    message += `\nüìä <b>USO DE HOY:</b>\n`;

    // Mostrar l√≠mites y uso actual
    if (userSubscription.dailyQuestionsLimit === null) {
      message += `üìö <b>Preguntas:</b> ‚ôæÔ∏è ILIMITADAS\n`;
    } else {
      const questionsLimit = userSubscription.dailyQuestionsLimit || 100;
      const remaining = Math.max(0, questionsLimit - questionsUsed);
      message += `üìö <b>Preguntas:</b> ${questionsUsed}/${questionsLimit} (${remaining} restantes)\n`;
    }

    if (userSubscription.maxSimulationsPerDay === null) {
      message += `üéØ <b>Simulacros:</b> ‚ôæÔ∏è ILIMITADOS\n`;
    } else {
      const simulationsLimit = userSubscription.maxSimulationsPerDay || 1;
      const remainingSimulations = Math.max(0, simulationsLimit - simulationsUsed);
      message += `üéØ <b>Simulacros:</b> ${simulationsUsed}/${simulationsLimit} (${remainingSimulations} restantes)\n`;
    }

    // Funcionalidades disponibles
    message += `\nüéÆ <b>FUNCIONALIDADES ACTIVAS:</b>\n`;
    message += `${userSubscription.canUseFailedQuestions ? '‚úÖ' : '‚ùå'} Preguntas falladas\n`;
    message += `${userSubscription.canUseAdvancedStats ? '‚úÖ' : '‚ùå'} Estad√≠sticas avanzadas\n`;
    message += `${userSubscription.canUseSimulations ? '‚úÖ' : '‚ùå'} Simulacros personalizados\n`;
    message += `${userSubscription.canUseAIAnalysis ? '‚úÖ' : '‚ùå'} An√°lisis con IA\n`;
    message += `${userSubscription.canUseMoodleIntegration ? '‚úÖ' : '‚ùå'} Integraci√≥n Moodle\n`;

    // Motivaci√≥n y acciones
    if (userSubscription.planName === 'basic') {
      const remainingQuestions = userSubscription.dailyQuestionsLimit ? Math.max(0, userSubscription.dailyQuestionsLimit - questionsUsed) : 0;
      if (remainingQuestions <= 10) {
        message += `\n‚ö†Ô∏è <b>POCAS PREGUNTAS RESTANTES</b>\n`;
        message += `Te quedan solo ${remainingQuestions} preguntas hoy.\n\n`;
        message += `üöÄ <b>¬øQuieres m√°s?</b>\n`;
        message += `‚Ä¢ <code>/premium</code> - Actualizar a Premium (ilimitado)`;
      } else {
        message += `\nüí° <b>¬øQuieres m√°s funcionalidades?</b>\n`;
        message += `‚Ä¢ <code>/premium</code> - Actualizar a Premium`;
      }
    } else if (userSubscription.planName === 'premium') {
      message += `\nüéâ <b>¬°Tienes acceso completo!</b>\n`;
      message += `Disfruta de todas las funcionalidades sin l√≠mites.`;
    }

    message += `\n\nüìû <b>GESTIONAR SUSCRIPCI√ìN:</b>\n`;
    message += `‚Ä¢ <code>/mi_plan</code> - Detalles completos\n`;
    message += `‚Ä¢ <code>/facturas</code> - Historial de pagos\n`;
    message += `‚Ä¢ <code>/cancelar</code> - Cancelar suscripci√≥n`;

    return message;

  } catch (error) {
    console.error('‚ùå Error en handleMiQuotaCommand:', error);
    return `‚ùå <b>Error interno</b>\n\nInt√©ntalo de nuevo en unos segundos.`;
  }
}

async function handleHorarioNotificacionesCommand(userid: string, fromtelegramuser: any, messageText: string): Promise<string | null> {
  try {
    console.log('üïê HORARIO_NOTIFICACIONES COMMAND - Configurar horario');

    // Verificar usuario registrado
    const user = await prisma.telegramuser.findUnique({
      where: { telegramUserId: userid }
    });

    if (!user) {
      return `‚ùå <b>Usuario no registrado</b>\n\nüîß Env√≠a <code>/start</code> primero para registrarte.`;
    }

    // Parsear comando
    const parts = messageText.trim().split(' ');
    if (parts.length < 3) {
      return `‚ùå <b>Uso incorrecto</b>\n\nüîß <b>Uso correcto:</b>\n<code>/horario_notificaciones [hora_inicio] [hora_fin]</code>\n\nüí° <b>Ejemplos:</b>\n<code>/horario_notificaciones 8 22</code> - De 8:00 a 22:00\n<code>/horario_notificaciones 9 21</code> - De 9:00 a 21:00\n<code>/horario_notificaciones 7 23</code> - De 7:00 a 23:00\n\nüìù <b>Nota:</b> Usa formato 24 horas (0-23)`;
    }

    const startHour = parseInt(parts[1]);
    const endHour = parseInt(parts[2]);

    // Validar horas
    if (isNaN(startHour) || isNaN(endHour)) {
      return `‚ùå <b>Horas inv√°lidas</b>\n\nüîß <b>Formato correcto:</b>\nUsa n√∫meros enteros de 0 a 23\n\nüí° <b>Ejemplos v√°lidos:</b>\n<code>/horario_notificaciones 8 22</code>\n<code>/horario_notificaciones 9 21</code>`;
    }

    if (startHour < 0 || startHour > 23 || endHour < 0 || endHour > 23) {
      return `‚ùå <b>Horas fuera de rango</b>\n\n‚è∞ <b>Rango v√°lido:</b> 0 a 23 horas\n\nüí° <b>Ejemplos v√°lidos:</b>\n‚Ä¢ <code>/horario_notificaciones 8 22</code> - 8:00 AM a 10:00 PM\n‚Ä¢ <code>/horario_notificaciones 9 21</code> - 9:00 AM a 9:00 PM\n‚Ä¢ <code>/horario_notificaciones 0 23</code> - 12:00 AM a 11:00 PM`;
    }

    if (startHour >= endHour) {
      return `‚ùå <b>Horario inv√°lido</b>\n\nüïê <b>Problema:</b> La hora de inicio debe ser menor que la hora de fin\n\nüí° <b>Ejemplos correctos:</b>\n‚Ä¢ <code>/horario_notificaciones 8 22</code> ‚úÖ\n‚Ä¢ <code>/horario_notificaciones 9 21</code> ‚úÖ\n\n‚ùå <b>Ejemplos incorrectos:</b>\n‚Ä¢ <code>/horario_notificaciones 22 8</code> ‚ùå\n‚Ä¢ <code>/horario_notificaciones 15 15</code> ‚ùå`;
    }

    // Actualizar configuraci√≥n
    const { NotificationService } = await import('@/services/notificationService');
    const notificationService = new NotificationService();
    await notificationService.updateUserNotificationSettings(user.id, {
      notificationStartHour: startHour,
      notificationEndHour: endHour
    });

    const startTime = `${startHour.toString().padStart(2, '0')}:00`;
    const endTime = `${endHour.toString().padStart(2, '0')}:00`;
    const duration = endHour - startHour;
    
    return `üïê <b>HORARIO DE NOTIFICACIONES ACTUALIZADO</b>

üë§ ${fromtelegramuser.first_name || 'Usuario'}

‚è∞ <b>Nuevo horario:</b>
üåÖ Inicio: ${startTime}
üåô Fin: ${endTime}
‚è±Ô∏è Duraci√≥n: ${duration} horas

üîî <b>¬øQu√© significa esto?</b>
‚Ä¢ Solo recibir√°s notificaciones entre ${startTime} y ${endTime}
‚Ä¢ Notificaciones fuera de este horario se pospondr√°n
‚Ä¢ Recordatorios y reportes respetar√°n este horario
‚Ä¢ Notificaciones urgentes (como duelos) pueden llegar en cualquier momento

üí° <b>Recomendaciones por horario:</b>
${startHour <= 8 && endHour >= 20 ? 
  '‚úÖ <b>Horario amplio</b> - Ideal para recibir todas las notificaciones' :
  startHour >= 9 && endHour <= 21 ? 
  '‚è∞ <b>Horario moderado</b> - Perfecto para horario laboral/estudios' :
  'üåô <b>Horario restringido</b> - Algunas notificaciones pueden posponerse'
}

üîß <b>Otros comandos:</b>
‚Ä¢ <code>/configurar_notificaciones</code> - Ver todas las configuraciones
‚Ä¢ <code>/notificaciones_recordatorios on/off</code> - Configurar recordatorios
‚Ä¢ <code>/notificaciones_semanales on/off</code> - Configurar reportes semanales`;

  } catch (error) {
    console.error('‚ùå Error en handleHorarioNotificacionesCommand:', error);
    return `‚ùå <b>Error interno</b>\n\nInt√©ntalo de nuevo en unos segundos.`;
  }
}


