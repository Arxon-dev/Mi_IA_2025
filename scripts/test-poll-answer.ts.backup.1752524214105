import fetch from 'node-fetch';

const BOT_TOKEN = process.env.TELEGRAM_BOT_TOKEN || '8039179482:AAG6bugxwgsmWLVHGoWpE5nih_PQpD3KPBs';

async function checkWebhookInfo() {
  try {
    console.log('üîç VERIFICANDO INFORMACI√ìN DEL WEBHOOK');
    console.log('=====================================');
    
    const response = await fetch(`https://api.telegram.org/bot${BOT_TOKEN}/getWebhookInfo`);
    const result = await response.json() as any;
    
    if (result.ok) {
      const info = result.result;
      console.log('üìã Estado del webhook:');
      console.log(`   üåê URL: ${info.url}`);
      console.log(`   üì§ Actualizaciones pendientes: ${info.pending_update_count}`);
      console.log(`   ‚ùå √öltimo error: ${info.last_error_message || 'Ninguno'}`);
      console.log(`   üìÖ √öltimo error (fecha): ${info.last_error_date ? new Date(info.last_error_date * 1000) : 'N/A'}`);
      console.log(`   üéõÔ∏è  Actualizaciones permitidas: ${info.allowed_updates?.join(', ') || 'Todas'}`);
      console.log(`   üìä Conexiones m√°ximas: ${info.max_connections || 'Default'}`);
      
      if (info.pending_update_count > 0) {
        console.log(`\n‚ö†Ô∏è  HAY ${info.pending_update_count} ACTUALIZACIONES PENDIENTES`);
        console.log('   Estas pueden incluir poll_answers que no se han procesado.');
      }
      
      if (info.last_error_message) {
        console.log(`\n‚ùå √öLTIMO ERROR DETECTADO:`);
        console.log(`   Mensaje: ${info.last_error_message}`);
        console.log(`   Fecha: ${new Date(info.last_error_date * 1000)}`);
      }
      
      // Verificar si poll_answer est√° en allowed_updates
      if (info.allowed_updates && !info.allowed_updates.includes('poll_answer')) {
        console.log('\nüö® PROBLEMA DETECTADO:');
        console.log('   poll_answer NO est√° en allowed_updates');
        console.log('   Esto explica por qu√© no llegan las respuestas de polls');
        
        return false;
      } else {
        console.log('\n‚úÖ poll_answer est√° configurado correctamente en allowed_updates');
        return true;
      }
      
    } else {
      console.error('‚ùå Error obteniendo informaci√≥n del webhook:', result);
      return false;
    }
    
  } catch (error) {
    console.error('‚ùå Error:', error);
    return false;
  }
}

async function sendTestPoll() {
  try {
    console.log('\nüéØ ENVIANDO POLL DE PRUEBA');
    console.log('==========================');
    
    // ID de chat de prueba (reemplaza con tu ID de usuario)
    const CHAT_ID = '5793286375'; // Carlos
    
    const pollData = {
      chat_id: CHAT_ID,
      question: 'üß™ TEST: ¬øFunciona el sistema de poll answers?',
      options: ['S√≠, funciona', 'No funciona', 'No estoy seguro'],
      type: 'quiz',
      correct_option_id: 0,
      is_anonymous: false,
      allows_multiple_answers: false
    };
    
    console.log('üì§ Enviando poll a chat ID:', CHAT_ID);
    
    const response = await fetch(`https://api.telegram.org/bot${BOT_TOKEN}/sendPoll`, {
      method: 'POST',
      headers: { 'Content-Type': 'application/json' },
      body: JSON.stringify(pollData)
    });
    
    const result = await response.json() as any;
    
    if (result.ok) {
      console.log('‚úÖ Poll enviado exitosamente!');
      console.log(`   üìä Poll ID: ${result.result.poll.id}`);
      console.log(`   üìù Message ID: ${result.result.message_id}`);
      
      console.log('\nüìã INSTRUCCIONES:');
      console.log('1. Ve a tu chat privado con el bot');
      console.log('2. Responde al poll que acabas de recibir');
      console.log('3. Verifica en los logs del servidor si llega poll_answer');
      console.log('4. Ejecuta: tail -f npm-debug.log | grep poll_answer');
      
      return result.result.poll.id;
    } else {
      console.error('‚ùå Error enviando poll:', result);
      return null;
    }
    
  } catch (error) {
    console.error('‚ùå Error enviando poll:', error);
    return null;
  }
}

async function main() {
  console.log('üß™ DIAGN√ìSTICO DE POLL ANSWERS');
  console.log('==============================\n');
  
  // Paso 1: Verificar configuraci√≥n del webhook
  const webhookOk = await checkWebhookInfo();
  
  if (!webhookOk) {
    console.log('\nüîß Para arreglar el problema de configuraci√≥n:');
    console.log('   1. Ejecuta: npx tsx scripts/setup-webhook.ts');
    console.log('   2. O ejecuta este script de nuevo');
    return;
  }
  
  // Paso 2: Enviar poll de prueba
  const pollId = await sendTestPoll();
  
  if (pollId) {
    console.log('\n‚è∞ ESPERANDO RESPUESTA...');
    console.log('==========================');
    console.log('Responde al poll en Telegram y verifica que llegue poll_answer al webhook.');
    console.log('Si no llega nada, el problema est√° en la configuraci√≥n del webhook.');
  }
}

main(); 