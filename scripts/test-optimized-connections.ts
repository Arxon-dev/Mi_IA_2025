import { prisma, testPrismaConnection, getConnectionStats, closePrismaConnection } from '../src/lib/prisma';

async function testOptimizedConnections() {
  try {
    console.log('üß™ ===== TESTING CONEXIONES OPTIMIZADAS =====\n');

    // 1. Prueba b√°sica de conexi√≥n
    console.log('üì° 1. PRUEBA B√ÅSICA DE CONEXI√ìN...');
    const connectionWorking = await testPrismaConnection();
    
    if (!connectionWorking) {
      console.log('‚ùå La conexi√≥n b√°sica fall√≥');
      return;
    }

    // 2. Probar m√∫ltiples queries simult√°neas (simular carga)
    console.log('\n‚ö° 2. PRUEBA DE M√öLTIPLES QUERIES SIMULT√ÅNEAS...');
    const startTime = Date.now();
    
    const queries = [
      prisma.emad.count(),
      prisma.constitucion.count(),
      prisma.defensaNacional.count(),
      prisma.rio.count(),
      prisma.minsdef.count()
    ];
    
    try {
      const results = await Promise.all(queries);
      const endTime = Date.now();
      
      console.log('‚úÖ Todas las queries ejecutadas exitosamente');
      console.log(`‚è±Ô∏è Tiempo total: ${endTime - startTime}ms`);
      console.log('üìä Resultados:');
      console.log(`   ‚Ä¢ EMAD: ${results[0]} preguntas`);
      console.log(`   ‚Ä¢ Constituci√≥n: ${results[1]} preguntas`);
      console.log(`   ‚Ä¢ Defensa Nacional: ${results[2]} preguntas`);
      console.log(`   ‚Ä¢ RIO: ${results[3]} preguntas`);
      console.log(`   ‚Ä¢ MINSDEF: ${results[4]} preguntas`);
      
    } catch (error) {
      console.log('‚ùå Error en queries simult√°neas:', error);
      return;
    }

    // 3. Verificar estad√≠sticas de conexiones
    console.log('\nüìä 3. VERIFICANDO ESTAD√çSTICAS DE CONEXIONES...');
    const stats = await getConnectionStats();
    
    if (stats) {
      console.log('üîç Estad√≠sticas actuales:');
      if (Array.isArray(stats)) {
        stats.forEach((stat: any) => {
          console.log(`   ‚Ä¢ ${stat.state}: ${stat.count} conexiones`);
        });
      }
    }

    // 4. Probar creaci√≥n de registros en lotes
    console.log('\nüîÑ 4. PRUEBA DE OPERACIONES EN LOTES...');
    
    // Crear algunos registros de prueba
    const testData = Array.from({ length: 10 }, (_, i) => ({
      questionnumber: 9999 + i,
      question: `Pregunta de prueba ${i + 1}`,
      options: ['Opci√≥n A', 'Opci√≥n B', 'Opci√≥n C', 'Opci√≥n D'],
      correctanswerindex: i % 4,
      category: 'TEST',
      difficulty: 'TEST',
      isactive: true,
      feedback: 'Feedback de prueba',
      type: 'test',
      title: `Prueba ${i + 1}`,
      titleSourceReference: 'TEST',
      titleSourceDocument: 'Documento de prueba'
    }));

    try {
      // Crear en lotes
      await prisma.emad.createMany({
        data: testData,
        skipDuplicates: true
      });
      
      console.log('‚úÖ Creaci√≥n en lotes exitosa');
      
      // Limpiar los datos de prueba
      await prisma.emad.deleteMany({
        where: {
          category: 'TEST'
        }
      });
      
      console.log('üßπ Datos de prueba limpiados');
      
    } catch (error) {
      console.log('‚ùå Error en operaciones en lotes:', error);
    }

    // 5. Prueba de conexiones r√°pidas sucesivas
    console.log('\nüèÉ 5. PRUEBA DE CONEXIONES R√ÅPIDAS SUCESIVAS...');
    
    const rapidQueries = [];
    for (let i = 0; i < 5; i++) {
      rapidQueries.push(
        prisma.$queryRaw`SELECT COUNT(*) as count FROM "Emad" WHERE "isActive" = true`
      );
    }
    
    try {
      const rapidResults = await Promise.all(rapidQueries);
      console.log('‚úÖ Conexiones r√°pidas sucesivas: OK');
      console.log(`üìä Resultados consistentes: ${rapidResults.every(r => Array.isArray(r) && (r[0] as any).count > 0)}`);
    } catch (error) {
      console.log('‚ùå Error en conexiones r√°pidas:', error);
    }

    // 6. Reporte final
    console.log('\nüéØ 6. REPORTE FINAL...');
    const finalStats = await getConnectionStats();
    
    if (finalStats && Array.isArray(finalStats)) {
      const totalConnections = finalStats.reduce((total, stat: any) => total + parseInt(stat.count), 0);
      console.log(`üìä Total de conexiones despu√©s de las pruebas: ${totalConnections}`);
      
      if (totalConnections <= 5) {
        console.log('‚úÖ EXCELENTE: N√∫mero de conexiones muy bajo');
      } else if (totalConnections <= 10) {
        console.log('üü¢ BUENO: N√∫mero de conexiones razonable');
      } else {
        console.log('‚ö†Ô∏è ADVERTENCIA: N√∫mero de conexiones alto');
      }
    }

    console.log('\nüéâ ===== PRUEBA COMPLETADA EXITOSAMENTE =====');
    console.log('‚úÖ La configuraci√≥n optimizada funciona correctamente');
    console.log('üöÄ Puedes usar scripts de importaci√≥n sin problemas de conexiones');
    console.log('üìã Recomendaci√≥n: Ejecutar este test peri√≥dicamente para monitorear el rendimiento');

  } catch (error) {
    console.error('‚ùå Error durante la prueba:', error);
    
    if (error instanceof Error) {
      if (error.message.includes('too many clients')) {
        console.log('\nüÜò DETECCI√ìN DE PROBLEMA:');
        console.log('El error "too many clients" indica que necesitas:');
        console.log('1. Cerrar otras conexiones de aplicaciones');
        console.log('2. Reiniciar el servidor Next.js');
        console.log('3. Verificar la configuraci√≥n de Supabase');
      }
    }
  } finally {
    // Cerrar conexiones correctamente
    await closePrismaConnection();
  }
}

// Manejar interrupciones
process.on('SIGINT', async () => {
  console.log('\nüîå Cerrando conexiones de prueba...');
  await closePrismaConnection();
  process.exit(0);
});

// Ejecutar prueba
if (require.main === module) {
  testOptimizedConnections().catch(console.error);
}

export { testOptimizedConnections }; 