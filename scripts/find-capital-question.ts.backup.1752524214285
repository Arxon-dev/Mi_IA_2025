#!/usr/bin/env tsx

import { PrismaClient } from '@prisma/client';

const prisma = new PrismaClient();

async function findCapitalQuestion() {
  try {
    console.log('üîç BUSCANDO PREGUNTA DE LA CAPITAL EN ExamenOficial2018...\n');
    
    // Buscar pregunta que contenga "capital"
    const madridQuestion = await prisma.examenOficial2018.findFirst({
      where: {
        question: { contains: 'capital', mode: 'insensitive' }
      }
    });
    
    if (madridQuestion) {
      console.log('‚ùå PROBLEMA ENCONTRADO:');
      console.log(`   N√∫mero: ${madridQuestion.questionNumber}`);
      console.log(`   ID: ${madridQuestion.id}`);
      console.log(`   Pregunta: ${madridQuestion.question}`);
      console.log(`   Opciones: ${madridQuestion.options}`);
      console.log(`   Respuesta correcta: ${madridQuestion.correctAnswerIndex} (${madridQuestion.options[madridQuestion.correctAnswerIndex]})`);
      console.log(`   Categor√≠a: ${madridQuestion.category || 'N/A'}`);
      console.log(`   Activa: ${madridQuestion.isActive}`);
      console.log(`   Enviada ${madridQuestion.sendCount} veces`);
    } else {
      console.log('‚úÖ NO SE ENCONTR√ì pregunta de capital');
    }
    
    // Mostrar estad√≠sticas generales
    const total = await prisma.examenOficial2018.count();
    const active = await prisma.examenOficial2018.count({ where: { isActive: true } });
    
    console.log(`\nüìä ESTAD√çSTICAS GENERALES:`);
    console.log(`   Total preguntas: ${total}`);
    console.log(`   Activas: ${active}`);
    
    // Mostrar primera pregunta para comparar
    const firstQuestion = await prisma.examenOficial2018.findFirst({
      where: { questionNumber: 1 }
    });
    
    if (firstQuestion) {
      console.log(`\nüîç PRIMERA PREGUNTA (para comparar):`);
      console.log(`   Pregunta: ${firstQuestion.question.substring(0, 100)}...`);
      console.log(`   Opciones: ${firstQuestion.options.length}`);
    }
    
    // Buscar preguntas con geograf√≠a b√°sica
    const basicGeoQuestions = await prisma.examenOficial2018.findMany({
      where: {
        OR: [
          { question: { contains: 'Madrid', mode: 'insensitive' } },
          { question: { contains: 'Barcelona', mode: 'insensitive' } },
          { question: { contains: 'Valencia', mode: 'insensitive' } },
          { question: { contains: 'Sevilla', mode: 'insensitive' } }
        ]
      },
      take: 5
    });
    
    if (basicGeoQuestions.length > 0) {
      console.log(`\n‚ö†Ô∏è PREGUNTAS DE GEOGRAF√çA B√ÅSICA ENCONTRADAS (${basicGeoQuestions.length}):`);
      basicGeoQuestions.forEach((q, i) => {
        console.log(`   ${i+1}. [${q.questionNumber}] ${q.question.substring(0, 80)}...`);
      });
    }
    
  } catch (error) {
    console.error('‚ùå Error:', error);
  } finally {
    await prisma.$disconnect();
  }
}

findCapitalQuestion(); 