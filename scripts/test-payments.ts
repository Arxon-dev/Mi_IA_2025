#!/usr/bin/env ts-node

/**
 * Script de prueba para el sistema de pagos
 */

import { PaymentService } from '../src/services/paymentServiceSimple';

async function testPaymentSystem() {
  console.log('üß™ ==========================================');
  console.log('üß™ PRUEBA DEL SISTEMA DE PAGOS');
  console.log('üß™ ==========================================\n');

  try {
    // 1. Verificar variables de entorno
    console.log('üîë Verificando variables de entorno...');
    console.log(`   STRIPE_SECRET_KEY: ${process.env.STRIPE_SECRET_KEY ? '‚úÖ Configurado' : '‚ùå NO configurado'}`);
    console.log(`   TELEGRAM_BOT_TOKEN: ${process.env.TELEGRAM_BOT_TOKEN ? '‚úÖ Configurado' : '‚ùå NO configurado'}`);
    
    if (!process.env.STRIPE_SECRET_KEY) {
      console.log('\n‚ùå STRIPE_SECRET_KEY no est√° configurado');
      console.log('üí° Soluci√≥n: Aseg√∫rate de que est√© en .env y reinicia el servidor');
      return;
    }
    
    if (!process.env.TELEGRAM_BOT_TOKEN) {
      console.log('\n‚ùå TELEGRAM_BOT_TOKEN no est√° configurado');
      return;
    }

    // 2. Crear datos de invoice de prueba
    console.log('\nüìÑ Creando datos de invoice de prueba...');
    const testUserId = '123456789';
    const invoiceData = PaymentService.createInvoiceData('basic', testUserId);
    
    console.log('‚úÖ Invoice data creada:', {
      title: invoiceData.title,
      price: invoiceData.prices[0].amount / 100,
      currency: invoiceData.currency,
      provider_token: invoiceData.provider_token ? '‚úÖ Presente' : '‚ùå Falta'
    });

    // 3. Simular validaci√≥n de pre-checkout
    console.log('\nüîç Probando validaci√≥n de pre-checkout...');
    const mockPreCheckout = {
      id: 'test_query_id',
      invoice_payload: invoiceData.payload,
      total_amount: invoiceData.prices[0].amount,
      currency: invoiceData.currency
    };
    
    const isValid = await PaymentService.validatePreCheckout(mockPreCheckout);
    console.log(`   Validaci√≥n: ${isValid ? '‚úÖ V√ÅLIDA' : '‚ùå INV√ÅLIDA'}`);

    // 4. Probar procesamiento de pago exitoso
    console.log('\nüí∞ Probando procesamiento de pago exitoso...');
    const mockPayment = {
      invoice_payload: invoiceData.payload,
      total_amount: invoiceData.prices[0].amount,
      currency: invoiceData.currency,
      telegram_payment_charge_id: 'test_telegram_id',
      provider_payment_charge_id: 'test_provider_id'
    };
    
    const success = await PaymentService.processSuccessfulPayment(testUserId, mockPayment);
    console.log(`   Procesamiento: ${success ? '‚úÖ EXITOSO' : '‚ùå FALL√ì'}`);

    // 5. Probar mensaje de confirmaci√≥n
    console.log('\nüì® Generando mensaje de confirmaci√≥n...');
    const confirmation = PaymentService.generatePaymentConfirmation('basic', invoiceData.prices[0].amount);
    console.log('‚úÖ Mensaje generado correctamente');
    console.log(`   Longitud: ${confirmation.length} caracteres`);

    console.log('\nüéâ ¬°TODAS LAS PRUEBAS PASARON!');
    console.log('‚úÖ El sistema de pagos est√° configurado correctamente');
    
    console.log('\nüîß PR√ìXIMO PASO:');
    console.log('   Configura los pagos en Telegram con @BotFather');
    console.log('   1. Contacta @BotFather');
    console.log('   2. /mybots -> Tu bot -> Payments');
    console.log('   3. Conecta con Stripe usando tu STRIPE_SECRET_KEY');

  } catch (error) {
    console.error('‚ùå Error en las pruebas:', error);
    console.log('\nüîß POSIBLES SOLUCIONES:');
    console.log('   1. Verificar que .env est√© en la ra√≠z del proyecto');
    console.log('   2. Reiniciar el servidor de desarrollo');
    console.log('   3. Verificar que STRIPE_SECRET_KEY sea v√°lido');
  }
}

// Ejecutar si se llama directamente
if (require.main === module) {
  testPaymentSystem();
}

export { testPaymentSystem }; 