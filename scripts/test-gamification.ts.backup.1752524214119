import GamificationService from '../src/services/gamificationService';

async function testGamificationSystem() {
  console.log('🧪 Iniciando pruebas del sistema de gamificación...\n');

  try {
    // Test 1: Procesar respuesta de usuario
    console.log('📝 Test 1: Procesando respuesta de usuario...');
    const userResponse = await GamificationService.processUserResponse({
      telegramUserId: '123456789',
      username: 'test_user',
      firstName: 'Usuario',
      lastName: 'Prueba',
      questionId: 'test-question-1',
      telegramMsgId: '1001',
      isCorrect: true,
      responseTime: 15
    });

    console.log('✅ Respuesta procesada:', {
      puntos: userResponse.totalPoints,
      nivel: userResponse.level,
      racha: userResponse.streak,
      ranking: userResponse.rank
    });

    // Test 2: Obtener estadísticas del usuario
    console.log('\n📊 Test 2: Obteniendo estadísticas del usuario...');
    const userStats = await GamificationService.getUserStats('123456789');
    
    if (userStats) {
      console.log('✅ Estadísticas obtenidas:', {
        totalResponses: userStats.totalResponses,
        correctResponses: userStats.correctResponses,
        accuracy: userStats.accuracy,
        level: userStats.level
      });
    }

    // Test 3: Obtener ranking general
    console.log('\n🏆 Test 3: Obteniendo ranking general...');
    const leaderboard = await GamificationService.getLeaderboard(5);
    console.log('✅ Top 5 usuarios:', leaderboard.map(entry => ({
      rank: entry.rank,
      user: entry.user.username || entry.user.firstName,
      points: entry.points,
      level: entry.level
    })));

    // Test 4: Procesar más respuestas para probar rachas
    console.log('\n🔥 Test 4: Probando sistema de rachas...');
    
    // Simular respuestas en días consecutivos
    const yesterday = new Date();
    yesterday.setDate(yesterday.getDate() - 1);
    
    await GamificationService.processUserResponse({
      telegramUserId: '123456789',
      username: 'test_user',
      firstName: 'Usuario',
      lastName: 'Prueba',
      questionId: 'test-question-2',
      telegramMsgId: '1002',
      isCorrect: true,
      responseTime: 12,
      responseDate: yesterday
    });

    const updatedStats = await GamificationService.getUserStats('123456789');
    console.log('✅ Racha actualizada:', {
      racha: updatedStats?.streak,
      mejorRacha: updatedStats?.bestStreak
    });

    // Test 5: Verificar logros
    console.log('\n🏅 Test 5: Verificando logros desbloqueados...');
    const achievements = await GamificationService.getUserAchievements('123456789');
    console.log('✅ Logros desbloqueados:', achievements.map(ach => ({
      name: ach.achievement.name,
      points: ach.achievement.points,
      unlockedAt: ach.unlockedAt.toLocaleDateString()
    })));

    // Test 6: Ranking semanal
    console.log('\n📅 Test 6: Obteniendo ranking semanal...');
    const weeklyLeaderboard = await GamificationService.getWeeklyLeaderboard(3);
    console.log('✅ Top 3 semanal:', weeklyLeaderboard.map(entry => ({
      rank: entry.rank,
      user: entry.user.username || entry.user.firstName,
      points: entry.points
    })));

    // Test 7: Estadísticas generales
    console.log('\n📈 Test 7: Obteniendo estadísticas generales...');
    const generalStats = await GamificationService.getGeneralStats();
    console.log('✅ Estadísticas generales:', {
      totalUsers: generalStats.totalUsers,
      totalResponses: generalStats.totalResponses,
      averageAccuracy: `${generalStats.averageAccuracy}%`,
      activeStreaks: generalStats.activeStreaks
    });

    console.log('\n🎉 ¡Todas las pruebas completadas exitosamente!');
    console.log('\n📋 Resumen del sistema:');
    console.log('- ✅ Procesamiento de respuestas');
    console.log('- ✅ Sistema de puntos y niveles');
    console.log('- ✅ Rachas diarias');
    console.log('- ✅ Logros automáticos');
    console.log('- ✅ Rankings múltiples');
    console.log('- ✅ Estadísticas completas');

  } catch (error) {
    console.error('❌ Error en las pruebas:', error);
    
    if (error instanceof Error) {
      console.error('Detalles del error:', error.message);
      console.error('Stack trace:', error.stack);
    }
    
    process.exit(1);
  }
}

// Función para limpiar datos de prueba
async function cleanupTestData() {
  console.log('\n🧹 Limpiando datos de prueba...');
  
  try {
    const { PrismaClient } = await import('@prisma/client');
    const prisma = new PrismaClient();

    // Eliminar datos de prueba
    await prisma.userAchievement.deleteMany({
      where: {
        user: {
          telegramUserId: '123456789'
        }
      }
    });

    await prisma.telegramResponse.deleteMany({
      where: {
        user: {
          telegramUserId: '123456789'
        }
      }
    });

    await prisma.weeklyStats.deleteMany({
      where: {
        user: {
          telegramUserId: '123456789'
        }
      }
    });

    await prisma.telegramUser.deleteMany({
      where: {
        telegramUserId: '123456789'
      }
    });

    console.log('✅ Datos de prueba eliminados');
    await prisma.$disconnect();
    
  } catch (error) {
    console.error('❌ Error limpiando datos:', error);
  }
}

// Ejecutar pruebas
async function runTests() {
  await testGamificationSystem();
  
  // Preguntar si limpiar datos de prueba
  console.log('\n❓ ¿Deseas limpiar los datos de prueba? (y/N)');
  
  // En un entorno real, podrías usar readline para input del usuario
  // Por ahora, comentamos la limpieza automática
  // await cleanupTestData();
  
  console.log('\n💡 Para limpiar manualmente los datos de prueba, ejecuta:');
  console.log('npx tsx scripts/cleanup-test-data.ts');
}

runTests(); 