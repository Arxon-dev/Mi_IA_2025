import { PrismaClient } from '@prisma/client';
import { SubscriptionService } from '../src/services/subscriptionService';

const prisma = new PrismaClient();

async function testSubscriptionSystem() {
  console.log('üß™ ======================================');
  console.log('üß™ PRUEBA SIMPLE DEL SISTEMA DE SUSCRIPCIONES');
  console.log('üß™ ======================================\n');

  const testUserId = '999888777';

  try {
    // 1. Limpiar datos de prueba previos
    console.log('üßπ Limpiando datos de prueba previos...');
    
    // 2. Verificar planes disponibles
    console.log('üìã Verificando planes disponibles...');
    const plans = await SubscriptionService.getAvailablePlans();
    console.log(`   ‚úÖ Encontrados ${plans.length} planes`);
    
    if (plans.length === 0) {
      console.log('‚ö†Ô∏è No hay planes disponibles. Ejecuta: npm run script:create-plans');
      return;
    }

    // 3. Crear usuario de prueba
    console.log('üë§ Creando usuario de prueba...');
    try {
      await prisma.telegramuser.upsert({
        where: { telegramuserid: testUserId },
        update: {},
        create: {
          telegramuserid: testUserId,
          username: 'test_user',
          firstname: 'Usuario',
          lastname: 'Test',
          totalpoints: 0
        }
      });
      console.log('   ‚úÖ Usuario de prueba creado');
    } catch (error) {
      console.log('   ‚ö†Ô∏è Usuario ya existe o error:', error);
    }

    // 4. Verificar acceso sin suscripci√≥n
    console.log('üö´ Verificando restricciones sin suscripci√≥n...');
    const noSubAccess = await SubscriptionService.canUserAccessFeature(testUserId, 'failed_questions');
    if (!noSubAccess.allowed) {
      console.log('   ‚úÖ Acceso correctamente bloqueado sin suscripci√≥n');
    } else {
      console.log('   ‚ùå Error: acceso permitido sin suscripci√≥n');
    }

    // 5. Suscribir a plan b√°sico
    console.log('ü•â Suscribiendo a plan b√°sico...');
    const basicPlan = plans.find(p => p.name === 'basic');
    if (basicPlan) {
      const subscribed = await SubscriptionService.upgradeSubscription(testUserId, basicPlan.id);
      if (subscribed) {
        console.log('   ‚úÖ Suscripci√≥n b√°sica creada');
        
        // Verificar acceso con suscripci√≥n b√°sica
        const basicAccess = await SubscriptionService.canUserAccessFeature(testUserId, 'failed_questions');
        if (basicAccess.allowed) {
          console.log('   ‚úÖ Acceso b√°sico funcionando');
        } else {
          console.log('   ‚ùå Error: acceso b√°sico no funciona');
        }
      } else {
        console.log('   ‚ùå Error creando suscripci√≥n b√°sica');
      }
    } else {
      console.log('   ‚ùå Plan b√°sico no encontrado');
    }

    // 6. Upgrade a Premium
    console.log('ü•à Upgrading a plan Premium...');
    const premiumPlan = plans.find(p => p.name === 'premium');
    if (premiumPlan) {
      const upgraded = await SubscriptionService.upgradeSubscription(testUserId, premiumPlan.id);
      if (upgraded) {
        console.log('   ‚úÖ Upgrade a Premium exitoso');
        
        // Verificar acceso Premium
        const premiumAccess = await SubscriptionService.canUserAccessFeature(testUserId, 'moodle_integration');
        if (premiumAccess.allowed) {
          console.log('   ‚úÖ Funcionalidades Premium funcionando');
        } else {
          console.log('   ‚ùå Error: funcionalidades Premium no funcionan');
        }
      } else {
        console.log('   ‚ùå Error haciendo upgrade a Premium');
      }
    } else {
      console.log('   ‚ùå Plan Premium no encontrado');
    }

    // 7. Verificar estad√≠sticas
    console.log('üìä Verificando sistema de cuotas...');
    const subscription = await SubscriptionService.getCurrentSubscription(testUserId);
    if (subscription) {
      console.log(`   ‚úÖ Suscripci√≥n activa: ${subscription.plan.displayname}`);
      console.log(`   üìÖ Estado: ${subscription.status}`);
    } else {
      console.log('   ‚ùå No se encontr√≥ suscripci√≥n activa');
    }

    // 8. Probar cancelaci√≥n
    console.log('üö´ Probando cancelaci√≥n...');
    const cancelled = await SubscriptionService.cancelSubscription(testUserId, 'Prueba de cancelaci√≥n');
    if (cancelled) {
      console.log('   ‚úÖ Cancelaci√≥n funcionando');
    } else {
      console.log('   ‚ùå Error en cancelaci√≥n');
    }

    console.log('\nüéâ ¬°TODAS LAS PRUEBAS COMPLETADAS!');
    console.log('‚úÖ El sistema de suscripciones est√° funcionando correctamente');

  } catch (error) {
    console.error('üí• Error en las pruebas:', error);
  } finally {
    await prisma.$disconnect();
  }
}

// Ejecutar si se llama directamente
if (require.main === module) {
  testSubscriptionSystem().catch(console.error);
}

export { testSubscriptionSystem }; 