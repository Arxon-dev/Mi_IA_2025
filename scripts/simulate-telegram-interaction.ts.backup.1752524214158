import GamificationService from '../src/services/gamificationService';

// Simulador de interacciones de Telegram para testing
interface SimulatedTelegramUser {
  id: string;
  username?: string;
  firstName: string;
  lastName?: string;
}

interface SimulatedQuestion {
  id: string;
  text: string;
  correctAnswer: string;
  options: string[];
}

class TelegramSimulator {
  private users: SimulatedTelegramUser[] = [
    { id: '123456789', username: 'juan_estudiante', firstName: 'Juan', lastName: 'Pérez' },
    { id: '987654321', username: 'maria_quiz', firstName: 'María', lastName: 'García' },
    { id: '456789123', firstName: 'Carlos', lastName: 'López' },
    { id: '789123456', username: 'ana_smart', firstName: 'Ana', lastName: 'Martín' },
    { id: '321654987', firstName: 'Luis', lastName: 'Rodriguez' }
  ];

  private questions: SimulatedQuestion[] = [
    {
      id: 'q1',
      text: '¿Cuál es la capital de España?',
      correctAnswer: 'A',
      options: ['Madrid', 'Barcelona', 'Valencia', 'Sevilla']
    },
    {
      id: 'q2',
      text: '¿En qué año se descubrió América?',
      correctAnswer: 'B',
      options: ['1491', '1492', '1493', '1494']
    },
    {
      id: 'q3',
      text: '¿Cuál es el planeta más grande del sistema solar?',
      correctAnswer: 'C',
      options: ['Tierra', 'Marte', 'Júpiter', 'Saturno']
    },
    {
      id: 'q4',
      text: '¿Quién escribió Don Quijote?',
      correctAnswer: 'A',
      options: ['Cervantes', 'García Lorca', 'Machado', 'Góngora']
    },
    {
      id: 'q5',
      text: '¿Cuántos continentes hay?',
      correctAnswer: 'D',
      options: ['5', '6', '8', '7']
    }
  ];

  private getRandomUser(): SimulatedTelegramUser {
    return this.users[Math.floor(Math.random() * this.users.length)];
  }

  private getRandomQuestion(): SimulatedQuestion {
    return this.questions[Math.floor(Math.random() * this.questions.length)];
  }

  private getRandomResponseTime(): number {
    // Simular diferentes velocidades de respuesta (5-60 segundos)
    return Math.floor(Math.random() * 55) + 5;
  }

  private getRandomAnswer(): string {
    const answers = ['A', 'B', 'C', 'D'];
    return answers[Math.floor(Math.random() * answers.length)];
  }

  async simulateUserResponse(user?: SimulatedTelegramUser, question?: SimulatedQuestion, forceCorrect?: boolean): Promise<void> {
    const selectedUser = user || this.getRandomUser();
    const selectedQuestion = question || this.getRandomQuestion();
    const responseTime = this.getRandomResponseTime();
    
    let userAnswer: string;
    if (forceCorrect !== undefined) {
      userAnswer = forceCorrect ? selectedQuestion.correctAnswer : this.getRandomAnswer();
    } else {
      // 70% de probabilidad de respuesta correcta
      userAnswer = Math.random() < 0.7 ? selectedQuestion.correctAnswer : this.getRandomAnswer();
    }
    
    const isCorrect = userAnswer === selectedQuestion.correctAnswer;

    console.log(`📝 ${selectedUser.firstName} responde "${userAnswer}" a: ${selectedQuestion.text}`);
    console.log(`   ${isCorrect ? '✅ Correcto!' : '❌ Incorrecto'} (respuesta: ${selectedQuestion.correctAnswer}) - ${responseTime}s`);

    const result = await GamificationService.processUserResponse({
      telegramUserId: selectedUser.id,
      username: selectedUser.username,
      firstName: selectedUser.firstName,
      lastName: selectedUser.lastName,
      questionId: selectedQuestion.id,
      telegramMsgId: Date.now().toString(),
      isCorrect,
      responseTime
    });

    console.log(`   📊 Resultado: ${result.totalPoints} pts, Nivel ${result.level}, Ranking #${result.rank}\n`);
  }

  async simulateMultipleResponses(count: number = 10): Promise<void> {
    console.log(`🎲 Simulando ${count} respuestas aleatorias...\n`);
    
    for (let i = 0; i < count; i++) {
      await this.simulateUserResponse();
      // Pequeña pausa para simular tiempo real
      await new Promise(resolve => setTimeout(resolve, 100));
    }
  }

  async simulateStreak(user: SimulatedTelegramUser, days: number = 5): Promise<void> {
    console.log(`🔥 Simulando racha de ${days} días para ${user.firstName}...\n`);
    
    for (let day = 0; day < days; day++) {
      console.log(`--- Día ${day + 1} ---`);
      
      // Simular 1-3 respuestas por día
      const responsesPerDay = Math.floor(Math.random() * 3) + 1;
      
      for (let resp = 0; resp < responsesPerDay; resp++) {
        // Simular que las respuestas fueron en días diferentes
        const originalProcessUserResponse = GamificationService.processUserResponse;
        
        // Temporalmente modificar la fecha para simular días diferentes
        // (En un caso real esto no sería necesario)
        
        await this.simulateUserResponse(user, undefined, true); // Forzar respuestas correctas para la racha
        await new Promise(resolve => setTimeout(resolve, 50));
      }
      
      console.log('');
    }
  }

  async showLeaderboard(): Promise<void> {
    console.log('🏆 RANKING ACTUAL 🏆\n');
    
    const leaderboard = await GamificationService.getLeaderboard(10);
    
    leaderboard.forEach((entry, index) => {
      const medal = index === 0 ? '🥇' : index === 1 ? '🥈' : index === 2 ? '🥉' : '🔸';
      const name = entry.user.username || entry.user.firstName || 'Usuario';
      
      console.log(`${medal} ${entry.rank}. ${name}`);
      console.log(`   📊 ${entry.points} pts | 🎯 Nv.${entry.level} | 🔥 ${entry.streak} días\n`);
    });
  }

  async showWeeklyLeaderboard(): Promise<void> {
    console.log('📅 RANKING SEMANAL 📅\n');
    
    const weeklyLeaderboard = await GamificationService.getWeeklyLeaderboard(5);
    
    weeklyLeaderboard.forEach((entry, index) => {
      const medal = index === 0 ? '🥇' : index === 1 ? '🥈' : index === 2 ? '🥉' : '🔸';
      const name = entry.user.username || entry.user.firstName || 'Usuario';
      
      console.log(`${medal} ${entry.rank}. ${name}`);
      console.log(`   📊 ${entry.points} pts esta semana\n`);
    });
  }

  async showUserStats(userId: string): Promise<void> {
    const stats = await GamificationService.getUserStats(userId);
    
    if (!stats) {
      console.log(`❌ No se encontraron estadísticas para el usuario ${userId}`);
      return;
    }

    const user = this.users.find(u => u.id === userId);
    const name = user ? (user.username || user.firstName) : 'Usuario';

    console.log(`📊 ESTADÍSTICAS DE ${name.toUpperCase()} 📊\n`);
    console.log(`🏆 Puntos totales: ${stats.totalPoints}`);
    console.log(`🎯 Nivel: ${stats.level}`);
    console.log(`🔥 Racha actual: ${stats.streak} días`);
    console.log(`🏅 Mejor racha: ${stats.bestStreak} días`);
    console.log(`📈 Ranking: #${stats.rank}`);
    console.log(`📝 Respuestas totales: ${stats.totalResponses}`);
    console.log(`✅ Respuestas correctas: ${stats.correctResponses}`);
    console.log(`🎯 Precisión: ${stats.accuracy}%\n`);
  }
}

// Script principal
async function runSimulation() {
  const simulator = new TelegramSimulator();
  
  console.log('🎮 SIMULADOR DE INTERACCIONES DE TELEGRAM 🎮\n');
  console.log('Este simulador te permite probar el sistema de gamificación sin necesidad del webhook real.\n');

  try {
    // 1. Simular actividad inicial
    console.log('='.repeat(50));
    console.log('🎯 FASE 1: Actividad inicial');
    console.log('='.repeat(50));
    await simulator.simulateMultipleResponses(15);

    // 2. Mostrar ranking inicial
    console.log('='.repeat(50));
    console.log('🏆 FASE 2: Ranking después de actividad inicial');
    console.log('='.repeat(50));
    await simulator.showLeaderboard();

    // 3. Simular racha para un usuario específico
    console.log('='.repeat(50));
    console.log('🔥 FASE 3: Simulando racha de usuario dedicado');
    console.log('='.repeat(50));
    const dedicatedUser = { id: '123456789', username: 'juan_estudiante', firstName: 'Juan', lastName: 'Pérez' };
    await simulator.simulateStreak(dedicatedUser, 7);

    // 4. Mostrar estadísticas del usuario dedicado
    console.log('='.repeat(50));
    console.log('📊 FASE 4: Estadísticas del usuario dedicado');
    console.log('='.repeat(50));
    await simulator.showUserStats('123456789');

    // 5. Más actividad general
    console.log('='.repeat(50));
    console.log('🎲 FASE 5: Más actividad general');
    console.log('='.repeat(50));
    await simulator.simulateMultipleResponses(20);

    // 6. Rankings finales
    console.log('='.repeat(50));
    console.log('🏆 FASE 6: Rankings finales');
    console.log('='.repeat(50));
    await simulator.showLeaderboard();
    console.log('');
    await simulator.showWeeklyLeaderboard();

    console.log('='.repeat(50));
    console.log('🎉 ¡SIMULACIÓN COMPLETADA!');
    console.log('='.repeat(50));
    console.log('✅ Sistema de gamificación funcionando correctamente');
    console.log('📊 Revisa el dashboard en: http://localhost:3000/dashboard/gamification');
    console.log('🤖 Cuando tengas el webhook configurado, el sistema funcionará automáticamente');

  } catch (error) {
    console.error('❌ Error en la simulación:', error);
  }
}

// Ejecutar si es llamado directamente
if (require.main === module) {
  runSimulation();
}

export { TelegramSimulator }; 