import { config } from 'dotenv';

config();

async function diagnoseDatabaseConnection() {
  try {
    console.log('üîç DIAGN√ìSTICO DE CONEXI√ìN A BASE DE DATOS');
    console.log('=' .repeat(60));
    
    // 1. Verificar variables de entorno
    console.log('\nüìã 1. VERIFICANDO VARIABLES DE ENTORNO...');
    const databaseUrl = process.env.DATABASE_URL;
    const directUrl = process.env.DIRECT_URL;
    
    if (!databaseUrl) {
      console.log('‚ùå DATABASE_URL no encontrada');
      return;
    }
    
    console.log('‚úÖ DATABASE_URL encontrada');
    console.log('   üìù Longitud:', databaseUrl.length, 'caracteres');
    
    // Extraer informaci√≥n de la URL sin mostrar credenciales
    try {
      const url = new URL(databaseUrl);
      console.log('   üåê Host:', url.hostname);
      console.log('   üîå Puerto:', url.port || '5432');
      console.log('   üóÑÔ∏è Base de datos:', url.pathname.slice(1));
      console.log('   üë§ Usuario:', url.username ? '***' + url.username.slice(-3) : 'no encontrado');
    } catch (error) {
      console.log('‚ùå ERROR: DATABASE_URL malformada');
      console.log('   üí° SOLUCI√ìN: Verifica el formato de la URL');
      return;
    }
    
    if (directUrl) {
      console.log('‚úÖ DIRECT_URL tambi√©n encontrada');
    } else {
      console.log('‚ö†Ô∏è DIRECT_URL no encontrada (opcional)');
    }
    
    // 2. Probar conexi√≥n con Prisma
    console.log('\nüîó 2. PROBANDO CONEXI√ìN CON PRISMA...');
    
    try {
      const { PrismaClient } = await import('@prisma/client');
      const prisma = new PrismaClient({
        log: ['error'],
        datasources: {
          db: {
            url: databaseUrl
          }
        }
      });
      
      console.log('   üöÄ Cliente Prisma creado');
      
      // Intentar conectar con timeout
      console.log('   ‚è≥ Intentando conectar...');
      const connectPromise = prisma.$connect();
      const timeoutPromise = new Promise((_, reject) => 
        setTimeout(() => reject(new Error('Timeout')), 10000)
      );
      
      await Promise.race([connectPromise, timeoutPromise]);
      console.log('   ‚úÖ Conexi√≥n exitosa');
      
      // Probar una query simple
      console.log('   üìä Probando query simple...');
      const result = await prisma.$queryRaw`SELECT 1 as test`;
      console.log('   ‚úÖ Query simple exitosa:', result);
      
      // Verificar tablas espec√≠ficas
      console.log('   üèóÔ∏è Verificando tabla ExamenOficial2018...');
      const count = await prisma.examenOficial2018.count();
      console.log('   ‚úÖ Tabla accesible, registros:', count);
      
      await prisma.$disconnect();
      console.log('   üîå Desconectado exitosamente');
      
    } catch (error: any) {
      console.log('   ‚ùå ERROR EN CONEXI√ìN PRISMA:');
      console.log('   üí•', error.message);
      
      if (error.message.includes('Can\'t reach database server')) {
        console.log('\nüîß POSIBLES SOLUCIONES:');
        console.log('   1Ô∏è‚É£ Base de datos pausada en Supabase');
        console.log('   2Ô∏è‚É£ Problema de conectividad de red');
        console.log('   3Ô∏è‚É£ L√≠mite de conexiones alcanzado');
        console.log('   4Ô∏è‚É£ Credenciales incorrectas');
      }
      
      return;
    }
    
    // 3. Verificar estado de Supabase
    console.log('\nüåê 3. VERIFICANDO ESTADO DE SUPABASE...');
    
    try {
      // Extraer el proyecto ID de la URL
      const url = new URL(databaseUrl);
      const projectMatch = url.hostname.match(/^([^.]+)\.supabase/);
      
      if (projectMatch) {
        const projectId = projectMatch[1];
        console.log('   üÜî Project ID detectado:', projectId);
        
        // Verificar si podemos hacer ping al host
        console.log('   üèì Verificando conectividad al host...');
        
        // Intentar hacer una conexi√≥n TCP simple
        const net = await import('net');
        const socket = new net.Socket();
        
        await new Promise((resolve, reject) => {
          const timeout = setTimeout(() => {
            socket.destroy();
            reject(new Error('Timeout conectando al servidor'));
          }, 5000);
          
          socket.connect(5432, url.hostname, () => {
            clearTimeout(timeout);
            socket.destroy();
            console.log('   ‚úÖ Servidor responde en puerto 5432');
            resolve(true);
          });
          
          socket.on('error', (err) => {
            clearTimeout(timeout);
            console.log('   ‚ùå Error conectando al servidor:', err.message);
            reject(err);
          });
        });
        
      } else {
        console.log('   ‚ö†Ô∏è No se pudo extraer Project ID de la URL');
      }
      
    } catch (error: any) {
      console.log('   ‚ùå Error verificando Supabase:', error.message);
    }
    
    console.log('\n‚úÖ DIAGN√ìSTICO COMPLETADO');
    
  } catch (error) {
    console.error('‚ùå ERROR GENERAL EN DIAGN√ìSTICO:', error);
  }
}

diagnoseDatabaseConnection(); 