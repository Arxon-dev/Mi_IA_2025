import { PrismaClient } from '@prisma/client';

const prisma = new PrismaClient();

// Copiar la funci√≥n truncatePollQuestion del webhook
function truncatePollQuestion(header: string, question: string, maxLength: number = 300): string {
  const fullText = `${header}${question}`;
  
  if (fullText.length <= maxLength) {
    return fullText;
  }
  
  // Calculate how much space we have for the question after the header
  const availableSpace = maxLength - header.length - 3; // -3 for "..."
  
  if (availableSpace < 50) {
    // If header is too long, truncate it too
    const shortHeader = header.substring(0, Math.floor(maxLength * 0.3));
    const questionSpace = maxLength - shortHeader.length - 3;
    return `${shortHeader}${question.substring(0, questionSpace)}...`;
  }
  
  // Truncate question and add ellipsis
  return `${header}${question.substring(0, availableSpace)}...`;
}

async function testTruncateFunction() {
  try {
    console.log('üß™ PROBANDO FUNCI√ìN DE TRUNCADO AUTOM√ÅTICO');
    console.log('==========================================');

    // 1. Probar con pregunta 34 (ya solucionada)
    const pregunta34 = await prisma.examenOficial2018.findFirst({
      where: { questionNumber: 34 }
    });

    if (pregunta34) {
      const header34 = `üéØ SIMULACRO 34/100 ‚è±Ô∏è2h30m\n\n`;
      const result34 = truncatePollQuestion(header34, pregunta34.question);
      console.log(`\n‚úÖ PREGUNTA 34 (ya solucionada):`);
      console.log(`   Original: ${header34.length + pregunta34.question.length} chars`);
      console.log(`   Truncado: ${result34.length} chars`);
      console.log(`   ¬øV√°lido?: ${result34.length <= 300 ? '‚úÖ S√ç' : '‚ùå NO'}`);
      console.log(`   Resultado: "${result34.substring(0, 100)}..."`);
    }

    // 2. Probar con pregunta 57 (problem√°tica)
    const pregunta57 = await prisma.examenOficial2018.findFirst({
      where: { questionNumber: 57 }
    });

    if (pregunta57) {
      const header57 = `üéØ SIMULACRO 57/100 ‚è±Ô∏è2h10m\n\n`;
      const result57 = truncatePollQuestion(header57, pregunta57.question);
      console.log(`\nüö® PREGUNTA 57 (muy larga):`);
      console.log(`   Original: ${header57.length + pregunta57.question.length} chars`);
      console.log(`   Truncado: ${result57.length} chars`);
      console.log(`   ¬øV√°lido?: ${result57.length <= 300 ? '‚úÖ S√ç' : '‚ùå NO'}`);
      console.log(`   Resultado: "${result57.substring(0, 150)}..."`);
      console.log(`   Pregunta original: "${pregunta57.question.substring(0, 100)}..."`);
    }

    // 3. Probar con algunas preguntas aleatorias
    const randomQuestions = await prisma.examenOficial2018.findMany({
      where: { questionNumber: { in: [1, 25, 50, 75, 100] } }
    });

    console.log(`\nüé≤ PRUEBAS CON PREGUNTAS ALEATORIAS:`);
    for (const question of randomQuestions) {
      const header = `üéØ SIMULACRO ${question.questionNumber}/100 ‚è±Ô∏è2h15m\n\n`;
      const result = truncatePollQuestion(header, question.question);
      const originalLength = header.length + question.question.length;
      const wasTruncated = result.length < originalLength;
      
      console.log(`   Pregunta ${question.questionNumber}: ${originalLength} ‚Üí ${result.length} chars ${wasTruncated ? '(TRUNCADA)' : '(√çNTEGRA)'} ${result.length <= 300 ? '‚úÖ' : '‚ùå'}`);
    }

    // 4. Verificar que todas las preguntas funcionar√°n
    const allQuestions = await prisma.examenOficial2018.findMany({
      orderBy: { questionNumber: 'asc' }
    });

    console.log(`\nüîç VERIFICACI√ìN COMPLETA:`);
    let allValid = true;
    let truncatedCount = 0;
    
    for (const question of allQuestions) {
      const header = `üéØ SIMULACRO ${question.questionNumber}/100 ‚è±Ô∏è2h15m\n\n`;
      const result = truncatePollQuestion(header, question.question);
      const originalLength = header.length + question.question.length;
      
      if (result.length > 300) {
        console.log(`   ‚ùå PREGUNTA ${question.questionNumber}: ${result.length} chars (SIGUE SIENDO MUY LARGA)`);
        allValid = false;
      }
      
      if (result.length < originalLength) {
        truncatedCount++;
      }
    }

    console.log(`\nüìä RESUMEN FINAL:`);
    console.log(`   Total preguntas: ${allQuestions.length}`);
    console.log(`   Preguntas truncadas: ${truncatedCount}`);
    console.log(`   ¬øTodas v√°lidas?: ${allValid ? '‚úÖ S√ç' : '‚ùå NO'}`);
    
    if (allValid) {
      console.log(`\nüéâ ¬°SOLUCI√ìN COMPLETA! Todas las preguntas del simulacro funcionar√°n correctamente.`);
    } else {
      console.log(`\nüö® A√∫n hay problemas que resolver.`);
    }

  } catch (error) {
    console.error('‚ùå Error en test:', error);
  } finally {
    await prisma.$disconnect();
  }
}

testTruncateFunction().catch(console.error); 