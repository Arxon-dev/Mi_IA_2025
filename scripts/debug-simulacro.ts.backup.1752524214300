import { PrismaClient } from '@prisma/client';

const prisma = new PrismaClient();

async function debugSimulacro() {
  try {
    console.log('üîç DEBUGGING SIMULACRO STATE');
    console.log('=============================');

    // 1. Buscar usuario Carlos
    const user = await prisma.telegramUser.findUnique({
      where: { telegramUserId: '5793286375' }
    });

    if (!user) {
      console.error('‚ùå Usuario no encontrado');
      return;
    }

    console.log('‚úÖ Usuario encontrado:', {
      id: user.id,
      telegramUserId: user.telegramUserId,
      firstName: user.firstName,
      username: user.username
    });

    // 2. Buscar simulacros del usuario
    const simulacros = await prisma.simulacro.findMany({
      where: { userId: user.id },
      orderBy: { startedAt: 'desc' },
      take: 3
    });

    console.log('\nüìã SIMULACROS DEL USUARIO:');
    console.log('==========================');

    simulacros.forEach((sim, index) => {
      console.log(`${index + 1}. ID: ${sim.id}`);
      console.log(`   Status: ${sim.status}`);
      console.log(`   Started: ${sim.startedAt}`);
      console.log(`   Completed: ${sim.completedAt || 'null'}`);
      console.log(`   Current Question Index: ${sim.currentQuestionIndex}`);
      console.log(`   Total Questions: ${sim.totalQuestions}`);
      console.log(`   Final Score: ${sim.finalScore}`);
      console.log('   ---');
    });

    // 3. Enfocarse en el simulacro activo (en progreso)
    const activeSimulacro = simulacros.find(s => s.status === 'in_progress');

    if (!activeSimulacro) {
      console.log('\n‚ùå No hay simulacro activo');
      return;
    }

    console.log('\nüéØ SIMULACRO ACTIVO DETECTADO:');
    console.log('===============================');
    console.log('ID:', activeSimulacro.id);
    console.log('Status:', activeSimulacro.status);
    console.log('Iniciado:', activeSimulacro.startedAt);
    console.log('Current Question Index:', activeSimulacro.currentQuestionIndex);

    // 4. Analizar las respuestas del simulacro activo
    const responses = await prisma.simulacroResponse.findMany({
      where: { simulacroId: activeSimulacro.id },
      orderBy: { questionNumber: 'asc' },
      include: {
        question: true
      }
    });

    console.log('\nüìä AN√ÅLISIS DE RESPUESTAS:');
    console.log('==========================');
    console.log('Total responses creadas:', responses.length);

    const answeredResponses = responses.filter(r => r.answeredAt !== null);
    const unansweredResponses = responses.filter(r => r.answeredAt === null && !r.skipped);
    const skippedResponses = responses.filter(r => r.skipped);

    console.log('Respondidas:', answeredResponses.length);
    console.log('Sin responder:', unansweredResponses.length);
    console.log('Saltadas:', skippedResponses.length);

    // 5. Mostrar primeras 5 respondidas
    if (answeredResponses.length > 0) {
      console.log('\n‚úÖ PRIMERAS 5 RESPONDIDAS:');
      console.log('===========================');
      answeredResponses.slice(0, 5).forEach(r => {
        console.log(`Q${r.questionNumber}: ${r.isCorrect ? '‚úÖ' : '‚ùå'} | ${r.answeredAt} | Option: ${r.selectedOption}/${r.question.correctAnswerIndex}`);
      });
    }

    // 6. Mostrar primeras 5 sin responder
    if (unansweredResponses.length > 0) {
      console.log('\n‚è≥ PRIMERAS 5 SIN RESPONDER:');
      console.log('============================');
      unansweredResponses.slice(0, 5).forEach(r => {
        console.log(`Q${r.questionNumber}: ${r.question.question.substring(0, 100)}...`);
      });

      // 7. Probar getCurrentQuestion con el simulacroService
      console.log('\nüîÑ PROBANDO getCurrentQuestion():');
      console.log('==================================');
      
      const { SimulacroService } = await import('../src/services/simulacroService');
      const currentQuestion = await SimulacroService.getCurrentQuestion(activeSimulacro.id);
      
      if (currentQuestion) {
        console.log('‚úÖ getCurrentQuestion() devolvi√≥ pregunta:', currentQuestion.questionNumber);
        console.log('   Pregunta:', currentQuestion.question.substring(0, 100) + '...');
      } else {
        console.log('‚ùå getCurrentQuestion() devolvi√≥ null');
      }
    }

    // 8. Verificar si hay problemas en las relaciones de datos
    console.log('\nüîç VERIFICACI√ìN DE INTEGRIDAD:');
    console.log('==============================');
    
    for (const response of responses.slice(0, 3)) {
      if (!response.question) {
        console.log(`‚ùå Response ${response.id} (Q${response.questionNumber}) no tiene question asociada`);
      } else {
        console.log(`‚úÖ Response ${response.id} (Q${response.questionNumber}) tiene question ${response.question.id}`);
      }
    }

    // 9. Verificar estado del simulacro desde diferentes √°ngulos
    console.log('\nüìà VERIFICACIONES FINALES:');
    console.log('==========================');
    
    // Verificar con la misma l√≥gica del webhook
    const webhookLogicCheck = await prisma.$queryRaw`
      SELECT sr."questionNumber", eo.question, eo.options, eo."correctAnswerIndex"
      FROM "SimulacroResponse" sr
      JOIN "ExamenOficial2018" eo ON sr."questionId" = eo.id
      WHERE sr."simulacroId" = ${activeSimulacro.id}
      AND sr."answeredAt" IS NULL
      AND sr.skipped = false
      ORDER BY sr."questionNumber" ASC
      LIMIT 1
    ` as any[];

    console.log('Webhook logic check result:', webhookLogicCheck.length > 0 ? `Q${webhookLogicCheck[0].questionNumber}` : 'No questions found');

    if (webhookLogicCheck.length === 0) {
      console.log('üö® PROBLEMA ENCONTRADO: La consulta del webhook no encuentra preguntas sin responder');
      console.log('   Esto explica por qu√© dice "SIMULACRO COMPLETADO"');
      
      // Verificar si hay desincronizaci√≥n
      console.log('\nüîç INVESTIGANDO DESINCRONIZACI√ìN:');
      const allResponsesRaw = await prisma.$queryRaw`
        SELECT sr.id, sr."questionNumber", sr."answeredAt", sr.skipped, sr."isCorrect", sr."selectedOption"
        FROM "SimulacroResponse" sr
        WHERE sr."simulacroId" = ${activeSimulacro.id}
        ORDER BY sr."questionNumber" ASC
        LIMIT 10
      ` as any[];

      console.log('Primeras 10 respuestas (raw query):');
      allResponsesRaw.forEach(r => {
        console.log(`  Q${r.questionNumber}: answeredAt=${r.answeredAt}, skipped=${r.skipped}, correct=${r.isCorrect}, option=${r.selectedOption}`);
      });
    }

  } catch (error) {
    console.error('‚ùå Error en debug:', error);
  } finally {
    await prisma.$disconnect();
  }
}

// Ejecutar el debug
debugSimulacro(); 