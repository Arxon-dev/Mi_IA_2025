import { DocumentSectionService, ProcessingMode } from '../src/services/documentSectionService';
import fs from 'fs';
import path from 'path';

async function testArticulosConstitucion() {
  console.log('üß™ PRUEBA DE PROCESAMIENTO POR ART√çCULOS - CONSTITUCI√ìN ESPA√ëOLA');
  console.log('=' .repeat(80));
  
  try {
    // 1. CARGAR EL DOCUMENTO DE LA CONSTITUCI√ìN
    const documentPath = path.join(process.cwd(), 'f:/Permanencia/Perma2024/OPOMELILLA/TEMARIO TXT/B1/ORG_TEMA1_LA CONTITUCI√ìN ESPA√ëOLA 1978 (T√≠tulos III, IV, V, VI Y VIII)_Copy.txt');
    
    if (!fs.existsSync(documentPath)) {
      console.log('‚ùå No se encontr√≥ el archivo del documento');
      console.log(`   Ruta buscada: ${documentPath}`);
      return;
    }
    
    const content = fs.readFileSync(documentPath, 'utf-8');
    console.log(`‚úÖ Documento cargado: ${content.length} caracteres`);
    
    // 2. CREAR DOCUMENTO DE PRUEBA
    const document = {
      id: 'test-constitucion-' + Date.now(),
      title: 'Constituci√≥n Espa√±ola 1978 - Test',
      content: content,
      date: new Date(),
      type: 'text/plain',
      questionCount: 0,
      createdAt: new Date(),
      updatedAt: new Date(),
      processingTime: null,
      tokens: null
    };
    
    console.log(`üìÑ Documento de prueba creado: ${document.id}`);
    
    // 3. CONFIGURAR MODO JER√ÅRQUICO CON ART√çCULOS
    const config = {
      mode: ProcessingMode.HIERARCHICAL,
      options: {
        minSectionLength: 100,
        maxSectionLength: 10000,
        hierarchical: {
          levels: ['Art√≠culo', 'ART√çCULO'],
          maxDepth: 1
        }
      }
    };
    
    console.log('\nüîß Configuraci√≥n aplicada:');
    console.log(`   Modo: ${config.mode}`);
    console.log(`   Niveles jer√°rquicos: ${config.options.hierarchical?.levels.join(', ')}`);
    
    // 4. GUARDAR CONFIGURACI√ìN
    DocumentSectionService.saveProcessingConfig(document.id, config);
    
    // 5. EXTRAER SECCIONES
    console.log('\nüîç Extrayendo secciones...');
    const sections = DocumentSectionService.extractSections(document);
    
    console.log(`\n‚úÖ Secciones extra√≠das: ${sections.length}`);
    
    // 6. AN√ÅLISIS DETALLADO
    if (sections.length > 0) {
      console.log('\nüìä AN√ÅLISIS DE SECCIONES:');
      console.log('-' .repeat(50));
      
      const articuloSections = sections.filter(s => s.title.toLowerCase().includes('art√≠culo'));
      const otherSections = sections.filter(s => !s.title.toLowerCase().includes('art√≠culo'));
      
      console.log(`   üìú Art√≠culos detectados: ${articuloSections.length}`);
      console.log(`   üìù Otras secciones: ${otherSections.length}`);
      
      // Mostrar primeros 10 art√≠culos
      console.log('\nüî¢ PRIMEROS 10 ART√çCULOS DETECTADOS:');
      articuloSections.slice(0, 10).forEach((section, idx) => {
        console.log(`   ${idx + 1}. "${section.title}" (${section.content.length} chars)`);
      });
      
      // Mostrar otras secciones si las hay
      if (otherSections.length > 0) {
        console.log('\nüìã OTRAS SECCIONES DETECTADAS:');
        otherSections.slice(0, 5).forEach((section, idx) => {
          console.log(`   ${idx + 1}. [${section.type}] "${section.title}" (${section.content.length} chars)`);
        });
      }
      
      // Verificar contenido de una muestra
      if (articuloSections.length > 0) {
        const sampleArticle = articuloSections[0];
        console.log('\nüìÑ MUESTRA DEL PRIMER ART√çCULO:');
        console.log(`   T√≠tulo: ${sampleArticle.title}`);
        console.log(`   Tipo: ${sampleArticle.type}`);
        console.log(`   Contenido (primeros 300 chars):`);
        console.log(`   ${sampleArticle.content.substring(0, 300)}...`);
      }
      
      // Verificar si se est√°n procesando correctamente
      const expectedArticles = content.match(/Art√≠culo\s*\d+/gi);
      console.log('\nüéØ VERIFICACI√ìN:');
      console.log(`   Art√≠culos esperados (regex): ${expectedArticles?.length || 0}`);
      console.log(`   Art√≠culos procesados: ${articuloSections.length}`);
      console.log(`   Coincidencia: ${articuloSections.length === (expectedArticles?.length || 0) ? '‚úÖ S√ç' : '‚ùå NO'}`);
      
      if (expectedArticles && expectedArticles.length > 0) {
        console.log('\nüìù PRIMEROS ART√çCULOS ESPERADOS:');
        expectedArticles.slice(0, 10).forEach((article, idx) => {
          console.log(`   ${idx + 1}. ${article}`);
        });
      }
      
    } else {
      console.log('\n‚ùå NO SE EXTRAJERON SECCIONES');
      console.log('   Posibles causas:');
      console.log('   - El patr√≥n regex no coincide con el formato del documento');
      console.log('   - El contenido no tiene la estructura esperada');
      console.log('   - Error en la configuraci√≥n jer√°rquica');
      
      // Debug: mostrar muestra del contenido
      console.log('\nüîç MUESTRA DEL CONTENIDO (primeros 1000 chars):');
      console.log(content.substring(0, 1000));
    }
    
    // 7. LIMPIAR
    DocumentSectionService.deleteProcessingConfig(document.id);
    console.log('\nüßπ Configuraci√≥n de prueba eliminada');
    
  } catch (error) {
    console.error('\n‚ùå ERROR DURANTE LA PRUEBA:', error);
  }
}

// Ejecutar la prueba
testArticulosConstitucion().catch(console.error); 