import { NotificationPreferencesService } from '../src/services/notificationPreferencesService';
import { prisma } from '../src/lib/prisma';

/**
 * üîî Comandos de Telegram para Preferencias de Notificaciones
 * 
 * Maneja los comandos /alertas_on, /alertas_off y /notificaciones
 * para que los usuarios puedan controlar sus alertas inteligentes.
 */

const notificationPreferencesService = new NotificationPreferencesService();

/**
 * üîß Activar alertas inteligentes
 */
export async function handleAlertsOnCommand(telegramUserId: string): Promise<void> {
  try {
    console.log(`üîî Procesando comando /alertas_on para usuario: ${telegramUserId}`);
    
    // Buscar usuario en la base de datos
    const user = await prisma.telegramuser.findUnique({
      where: { telegramuserid: telegramUserId },
      select: { id: true, firstname: true, username: true }
    });

    if (!user) {
      console.error(`‚ùå Usuario no encontrado: ${telegramUserId}`);
      await notificationPreferencesService.sendNotificationMessage(
        telegramUserId,
        '‚ùå <b>Error</b>\n\nNo se pudo encontrar tu perfil de usuario. Aseg√∫rate de estar registrado en el sistema.'
      );
      return;
    }

    // Activar alertas inteligentes
    const result = await notificationPreferencesService.enableIntelligentAlerts(user.id);
    
    // Enviar respuesta al usuario
    await notificationPreferencesService.sendNotificationMessage(telegramUserId, result.message);
    
    console.log(`‚úÖ Alertas activadas para ${user.firstname || user.username}`);
  } catch (error) {
    console.error('‚ùå Error procesando comando /alertas_on:', error);
    await notificationPreferencesService.sendNotificationMessage(
      telegramUserId,
      '‚ùå <b>Error interno</b>\n\nOcurri√≥ un error al procesar tu solicitud. Int√©ntalo de nuevo m√°s tarde.'
    );
  }
}

/**
 * üîï Desactivar alertas inteligentes
 */
export async function handleAlertsOffCommand(telegramUserId: string): Promise<void> {
  try {
    console.log(`üîï Procesando comando /alertas_off para usuario: ${telegramUserId}`);
    
    // Buscar usuario en la base de datos
    const user = await prisma.telegramuser.findUnique({
      where: { telegramuserid: telegramUserId },
      select: { id: true, firstname: true, username: true }
    });

    if (!user) {
      console.error(`‚ùå Usuario no encontrado: ${telegramUserId}`);
      await notificationPreferencesService.sendNotificationMessage(
        telegramUserId,
        '‚ùå <b>Error</b>\n\nNo se pudo encontrar tu perfil de usuario. Aseg√∫rate de estar registrado en el sistema.'
      );
      return;
    }

    // Desactivar alertas inteligentes
    const result = await notificationPreferencesService.disableIntelligentAlerts(user.id);
    
    // Enviar respuesta al usuario
    await notificationPreferencesService.sendNotificationMessage(telegramUserId, result.message);
    
    console.log(`üîï Alertas desactivadas para ${user.firstname || user.username}`);
  } catch (error) {
    console.error('‚ùå Error procesando comando /alertas_off:', error);
    await notificationPreferencesService.sendNotificationMessage(
      telegramUserId,
      '‚ùå <b>Error interno</b>\n\nOcurri√≥ un error al procesar tu solicitud. Int√©ntalo de nuevo m√°s tarde.'
    );
  }
}

/**
 * üìä Mostrar estado de notificaciones
 */
export async function handleNotificationsStatusCommand(telegramUserId: string): Promise<void> {
  try {
    console.log(`üìä Procesando comando /notificaciones para usuario: ${telegramUserId}`);
    
    // Buscar usuario en la base de datos
    const user = await prisma.telegramuser.findUnique({
      where: { telegramuserid: telegramUserId },
      select: { id: true, firstname: true, username: true }
    });

    if (!user) {
      console.error(`‚ùå Usuario no encontrado: ${telegramUserId}`);
      await notificationPreferencesService.sendNotificationMessage(
        telegramUserId,
        '‚ùå <b>Error</b>\n\nNo se pudo encontrar tu perfil de usuario. Aseg√∫rate de estar registrado en el sistema.'
      );
      return;
    }

    // Obtener estado de notificaciones
    const result = await notificationPreferencesService.getNotificationStatus(user.id);
    
    // Enviar respuesta al usuario
    await notificationPreferencesService.sendNotificationMessage(telegramUserId, result.message);
    
    console.log(`üìä Estado de notificaciones enviado a ${user.firstname || user.username}`);
  } catch (error) {
    console.error('‚ùå Error procesando comando /notificaciones:', error);
    await notificationPreferencesService.sendNotificationMessage(
      telegramUserId,
      '‚ùå <b>Error interno</b>\n\nOcurri√≥ un error al procesar tu solicitud. Int√©ntalo de nuevo m√°s tarde.'
    );
  }
}

/**
 * üß™ Funci√≥n de prueba para comandos de notificaciones
 */
export async function testNotificationCommands(telegramUserId: string): Promise<void> {
  console.log('üß™ Iniciando prueba de comandos de notificaciones...');
  
  try {
    // Probar comando de estado
    console.log('üìä Probando comando /notificaciones...');
    await handleNotificationsStatusCommand(telegramUserId);
    
    // Esperar un poco
    await new Promise(resolve => setTimeout(resolve, 2000));
    
    // Probar desactivaci√≥n
    console.log('üîï Probando comando /alertas_off...');
    await handleAlertsOffCommand(telegramUserId);
    
    // Esperar un poco
    await new Promise(resolve => setTimeout(resolve, 2000));
    
    // Probar activaci√≥n
    console.log('üîî Probando comando /alertas_on...');
    await handleAlertsOnCommand(telegramUserId);
    
    console.log('‚úÖ Prueba de comandos completada');
  } catch (error) {
    console.error('‚ùå Error en prueba de comandos:', error);
  }
}

// Funci√≥n principal para ejecutar desde l√≠nea de comandos
if (require.main === module) {
  const args = process.argv.slice(2);
  
  if (args.length < 2) {
    console.log('üìã Uso: node notification-preferences-commands.js <comando> <telegramUserId>');
    console.log('üìã Comandos disponibles:');
    console.log('   ‚Ä¢ on - Activar alertas inteligentes');
    console.log('   ‚Ä¢ off - Desactivar alertas inteligentes');
    console.log('   ‚Ä¢ status - Ver estado de notificaciones');
    console.log('   ‚Ä¢ test - Probar todos los comandos');
    console.log('üìã Ejemplo: node notification-preferences-commands.js on 5793286375');
    process.exit(1);
  }
  
  const [command, telegramUserId] = args;
  
  (async () => {
    try {
      switch (command.toLowerCase()) {
        case 'on':
          await handleAlertsOnCommand(telegramUserId);
          break;
        case 'off':
          await handleAlertsOffCommand(telegramUserId);
          break;
        case 'status':
          await handleNotificationsStatusCommand(telegramUserId);
          break;
        case 'test':
          await testNotificationCommands(telegramUserId);
          break;
        default:
          console.error(`‚ùå Comando desconocido: ${command}`);
          console.log('üìã Comandos v√°lidos: on, off, status, test');
          process.exit(1);
      }
      
      console.log('‚úÖ Comando ejecutado exitosamente');
      process.exit(0);
    } catch (error) {
      console.error('‚ùå Error ejecutando comando:', error);
      process.exit(1);
    }
  })();
}