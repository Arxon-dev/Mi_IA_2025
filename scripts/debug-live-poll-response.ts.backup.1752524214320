// Script para debuggear en tiempo real las respuestas a polls
import { PrismaClient } from '@prisma/client';

const prisma = new PrismaClient();

async function debugLivePollResponse() {
  try {
    console.log('üîç DEBUG: Respuestas a polls en TIEMPO REAL');
    console.log('============================================');
    console.log('Este script te ayudar√° a debuggear qu√© pasa cuando respondes una pregunta.\n');
    
    // 1. Mostrar el poll m√°s reciente enviado
    console.log('üìä 1. √öLTIMO POLL ENVIADO:');
    console.log('===========================');
    
    const latestPoll = await prisma.telegramPoll.findFirst({
      orderBy: { createdAt: 'desc' }
    });
    
    if (!latestPoll) {
      console.log('‚ùå No hay polls en la base de datos');
      return;
    }
    
    console.log(`üó≥Ô∏è Poll ID: ${latestPoll.pollId}`);
    console.log(`üìÖ Enviado: ${latestPoll.createdAt.toLocaleString('es-ES')}`);
    console.log(`üìã Source: ${latestPoll.sourceModel}`);
    console.log(`‚ùì Poll ID disponible para debug`);
    console.log(`‚úÖ Source Model: ${latestPoll.sourceModel}`);
    
    // 2. Verificar si hay respuestas recientes a este poll
    console.log('\nüì® 2. RESPUESTAS A ESTE POLL:');
    console.log('==============================');
    
    const responses = await prisma.response.findMany({
      where: {
        telegramMsgId: latestPoll.pollId
      },
      include: {
        user: {
          select: {
            firstName: true,
            telegramUserId: true
          }
        }
      },
      orderBy: { createdAt: 'desc' }
    });
    
    console.log(`üìä Total respuestas: ${responses.length}`);
    
    if (responses.length > 0) {
      responses.forEach((resp, i) => {
        console.log(`   ${i + 1}. ${resp.user.firstName} - ${resp.isCorrect ? '‚úÖ Correcto' : '‚ùå Incorrecto'}`);
        console.log(`      Puntos ganados: ${resp.pointsEarned || 0}`);
        console.log(`      Hora: ${resp.createdAt.toLocaleString('es-ES')}`);
        console.log('');
      });
    } else {
      console.log('‚ùå No hay respuestas registradas para este poll');
      
      // 3. Debuggear por qu√© no hay respuestas
      console.log('\nüîç 3. POSIBLES PROBLEMAS:');
      console.log('==========================');
      
      // Verificar si el poll aparece en TournamentResponse por error
      const tournamentCheck = await prisma.tournamentResponse.findMany({
        where: {
          pollId: latestPoll.pollId
        },
        include: {
          participant: {
            include: {
              user: { select: { firstName: true } },
              tournament: { select: { name: true } }
            }
          }
        }
      });
      
      if (tournamentCheck.length > 0) {
        console.log('üö® PROBLEMA ENCONTRADO: Este poll aparece en TournamentResponse!');
        tournamentCheck.forEach((resp, i) => {
          console.log(`   ${i + 1}. Usuario: ${resp.participant.user.firstName}`);
          console.log(`      Torneo: ${resp.participant.tournament.name}`);
          console.log(`      Pregunta #: ${resp.questionNumber}`);
        });
        console.log('üí° ESTO EXPLICAR√çA por qu√© handleTournamentPollAnswer devuelve TRUE');
      } else {
        console.log('‚úÖ El poll NO aparece err√≥neamente en TournamentResponse');
      }
    }
    
    // 4. Instrucciones para la prueba
    console.log('\nüß™ 4. INSTRUCCIONES PARA LA PRUEBA:');
    console.log('====================================');
    console.log('1. üì± Ve al grupo de Telegram');
    console.log('2. üó≥Ô∏è Responde la pregunta m√°s reciente (si a√∫n est√° activa)');
    console.log('3. ‚è±Ô∏è Espera 10 segundos');
    console.log('4. üîÑ Ejecuta este script de nuevo para ver si se registr√≥ la respuesta');
    console.log('5. üìä Tambi√©n puedes verificar con /stats para ver si subieron tus puntos');
    
    // 5. Mostrar el estado actual del usuario (si se proporciona telegramUserId)
    console.log('\nüë§ 5. PARA VERIFICAR TU ESTADO ACTUAL:');
    console.log('======================================');
    console.log('Si quieres verificar tu estado actual, ejecuta:');
    console.log('npx tsx scripts/check-user-stats.ts [tu_telegram_user_id]');
    
    return {
      latestPollId: latestPoll.pollId,
      responses: responses.length,
      hasTournamentConflict: false
    };
    
  } catch (error) {
    console.error('‚ùå Error en debug:', error);
    return null;
  } finally {
    await prisma.$disconnect();
  }
}

// Funci√≥n adicional para verificar el estado de un usuario espec√≠fico
async function checkSpecificUser(telegramUserId: string) {
  try {
    console.log(`\nüë§ ESTADO DEL USUARIO: ${telegramUserId}`);
    console.log('=====================================');
    
    const user = await prisma.telegramUser.findFirst({
      where: {
        telegramUserId: telegramUserId
      },
      select: {
        firstName: true,
        totalPoints: true,
        level: true,
        streak: true,
        accuracy: true,
        responseCount: true,
        correctResponses: true
      }
    });
    
    if (!user) {
      console.log('‚ùå Usuario no encontrado en la base de datos');
      return;
    }
    
    console.log(`üìä Nombre: ${user.firstName}`);
    console.log(`üí∞ Puntos totales: ${user.totalPoints}`);
    console.log(`üìà Nivel: ${user.level}`);
    console.log(`üî• Racha: ${user.streak}`);
    console.log(`üéØ Precisi√≥n: ${user.accuracy}%`);
    console.log(`üìã Respuestas totales: ${user.responseCount}`);
    console.log(`‚úÖ Respuestas correctas: ${user.correctResponses}`);
    
    // Verificar respuestas recientes
    const recentResponses = await prisma.userResponse.findMany({
      where: {
        user: {
          telegramUserId: telegramUserId
        }
      },
      orderBy: { createdAt: 'desc' },
      take: 5,
      select: {
        isCorrect: true,
        pointsEarned: true,
        createdAt: true,
        telegramMsgId: true
      }
    });
    
    console.log(`\nüìù √öltimas 5 respuestas:`);
    if (recentResponses.length > 0) {
      recentResponses.forEach((resp, i) => {
        console.log(`   ${i + 1}. ${resp.isCorrect ? '‚úÖ' : '‚ùå'} ${resp.pointsEarned} pts - ${resp.createdAt.toLocaleString('es-ES')}`);
      });
    } else {
      console.log('‚ùå No hay respuestas recientes registradas');
    }
    
  } catch (error) {
    console.error('‚ùå Error verificando usuario:', error);
  }
}

async function main() {
  const args = process.argv.slice(2);
  
  if (args.length > 0) {
    // Si se proporciona un telegramUserId, verificar ese usuario espec√≠fico
    await checkSpecificUser(args[0]);
  } else {
    // Debug general
    await debugLivePollResponse();
  }
}

main(); 