import { PrismaClient } from '@prisma/client';

const prisma = new PrismaClient();

async function verifyHeaderFix() {
  try {
    console.log('üîß VERIFICANDO SOLUCI√ìN DEL HEADER ACORTADO');
    console.log('==========================================');

    // 1. Buscar la pregunta 34 problem√°tica
    const pregunta34 = await prisma.examenOficial2018.findFirst({
      where: { questionNumber: 34 }
    });

    if (!pregunta34) {
      console.error('‚ùå Pregunta 34 no encontrada');
      return;
    }

    console.log('‚úÖ Pregunta 34 encontrada');
    console.log(`   Longitud de pregunta: ${pregunta34.question.length} caracteres`);

    // 2. Comparar headers anterior vs nuevo
    const oldHeader = `üéØ <b>SIMULACRO</b> ‚è∞ 34/100\n‚è±Ô∏è 2h 30m\n\n`;
    const newHeader = `üéØ SIMULACRO 34/100 ‚è±Ô∏è2h30m\n\n`;
    
    console.log(`\nüìè COMPARACI√ìN DE HEADERS:`);
    console.log(`   Header anterior: "${oldHeader.replace(/\n/g, '\\n')}" (${oldHeader.length} chars)`);
    console.log(`   Header nuevo:    "${newHeader.replace(/\n/g, '\\n')}" (${newHeader.length} chars)`);
    console.log(`   Reducci√≥n: ${oldHeader.length - newHeader.length} caracteres`);

    // 3. Verificar total con pregunta 34
    const oldTotal = oldHeader.length + pregunta34.question.length;
    const newTotal = newHeader.length + pregunta34.question.length;
    
    console.log(`\nüéØ VERIFICACI√ìN CON PREGUNTA 34:`);
    console.log(`   Total anterior: ${oldTotal} chars (${oldTotal > 300 ? '‚ùå EXCEDE' : '‚úÖ V√ÅLIDO'})`);
    console.log(`   Total nuevo:    ${newTotal} chars (${newTotal > 300 ? '‚ùå EXCEDE' : '‚úÖ V√ÅLIDO'})`);
    console.log(`   Diferencia: ${oldTotal - newTotal} caracteres menos`);

    // 4. Verificar otras preguntas que podr√≠an ser problem√°ticas
    const allQuestions = await prisma.examenOficial2018.findMany({
      orderBy: { questionNumber: 'asc' }
    });

    console.log(`\nüîç VERIFICACI√ìN COMPLETA DE TODAS LAS PREGUNTAS:`);
    let problematicas = 0;
    let maxLength = 0;
    let questionWithMaxLength = 0;

    for (const question of allQuestions) {
      const totalWithNewHeader = newHeader.length + question.question.length;
      if (totalWithNewHeader > 300) {
        problematicas++;
        console.log(`   ‚ùå Pregunta ${question.questionNumber}: ${totalWithNewHeader} chars (excede por ${totalWithNewHeader - 300})`);
      }
      
      if (totalWithNewHeader > maxLength) {
        maxLength = totalWithNewHeader;
        questionWithMaxLength = question.questionNumber;
      }
    }

    console.log(`\nüìä RESUMEN:`);
    console.log(`   Total preguntas: ${allQuestions.length}`);
    console.log(`   Preguntas problem√°ticas: ${problematicas}`);
    console.log(`   Pregunta m√°s larga: ${questionWithMaxLength} (${maxLength} chars)`);
    console.log(`   ¬øSoluci√≥n exitosa?: ${problematicas === 0 ? '‚úÖ S√ç' : '‚ùå NO'}`);

    if (problematicas > 0) {
      console.log(`\nüö® PREGUNTAS PROBLEM√ÅTICAS RESTANTES:`);
      for (const question of allQuestions) {
        const totalWithNewHeader = newHeader.length + question.question.length;
        if (totalWithNewHeader > 300) {
          console.log(`   ${question.questionNumber}: "${question.question.substring(0, 50)}..." (${totalWithNewHeader} chars)`);
        }
      }
    }

  } catch (error) {
    console.error('‚ùå Error en verificaci√≥n:', error);
  } finally {
    await prisma.$disconnect();
  }
}

verifyHeaderFix().catch(console.error); 