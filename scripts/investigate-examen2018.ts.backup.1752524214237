#!/usr/bin/env tsx

import { PrismaClient } from '@prisma/client';

const prisma = new PrismaClient();

async function investigateExamenOficial2018() {
  try {
    console.log('üîç INVESTIGANDO TABLA ExamenOficial2018\n');
    
    // Contar total
    const count = await prisma.examenOficial2018.count();
    console.log(`üìä Total de preguntas en ExamenOficial2018: ${count}\n`);
    
    // Mostrar primeras 5 preguntas
    console.log('üìã PRIMERAS 5 PREGUNTAS:');
    const samples = await prisma.examenOficial2018.findMany({ 
      take: 5,
      select: {
        id: true,
        questionNumber: true,
        question: true,
        options: true,
        correctAnswerIndex: true,
        category: true
      },
      orderBy: { questionNumber: 'asc' }
    });
    
    samples.forEach((q, i) => {
      console.log(`${i+1}. ID: ${q.id} | N√∫mero: ${q.questionNumber}`);
      console.log(`   Pregunta: ${q.question.substring(0, 100)}...`);
      console.log(`   Opciones: ${q.options.length} opciones`);
      console.log(`   Respuesta correcta: ${q.correctAnswerIndex} (${q.options[q.correctAnswerIndex]})`);
      console.log(`   Categor√≠a: ${q.category || 'N/A'}\n`);
    });
    
    // Buscar espec√≠ficamente la pregunta de la captura
    console.log('üîç BUSCANDO PREGUNTA "CAPITAL DE ESPA√ëA":');
    const madridQuestion = await prisma.examenOficial2018.findFirst({
      where: {
        OR: [
          { question: { contains: 'capital de Espa√±a', mode: 'insensitive' } },
          { question: { contains: 'Madrid', mode: 'insensitive' } },
          { question: { contains: 'Barcelona', mode: 'insensitive' } }
        ]
      }
    });
    
    if (madridQuestion) {
      console.log('‚ùå PROBLEMA ENCONTRADO: Pregunta sospechosa en ExamenOficial2018');
      console.log(`ID: ${madridQuestion.id}`);
      console.log(`N√∫mero: ${madridQuestion.questionNumber}`);
      console.log(`Pregunta: ${madridQuestion.question}`);
      console.log(`Opciones: ${madridQuestion.options}`);
      console.log(`Respuesta correcta: ${madridQuestion.correctAnswerIndex}`);
    } else {
      console.log('‚úÖ La pregunta "capital de Espa√±a" NO est√° en ExamenOficial2018');
    }
    
    // Mostrar √∫ltimas 5 preguntas tambi√©n
    console.log('\nüìã √öLTIMAS 5 PREGUNTAS:');
    const lastSamples = await prisma.examenOficial2018.findMany({ 
      take: 5,
      orderBy: { questionNumber: 'desc' },
      select: {
        id: true,
        questionNumber: true,
        question: true,
        options: true,
        correctAnswerIndex: true,
        category: true
      }
    });
    
    lastSamples.forEach((q, i) => {
      console.log(`${i+1}. ID: ${q.id} | N√∫mero: ${q.questionNumber}`);
      console.log(`   Pregunta: ${q.question.substring(0, 100)}...`);
      console.log(`   Opciones: ${q.options.length} opciones`);
      console.log(`   Respuesta correcta: ${q.correctAnswerIndex} (${q.options[q.correctAnswerIndex]})`);
      console.log(`   Categor√≠a: ${q.category || 'N/A'}\n`);
    });
    
    // Buscar todas las preguntas que contengan palabras sospechosas
    console.log('üîç BUSCANDO PREGUNTAS SOSPECHOSAS (geograf√≠a b√°sica):');
    const suspiciousQuestions = await prisma.examenOficial2018.findMany({
      where: {
        OR: [
          { question: { contains: 'capital', mode: 'insensitive' } },
          { question: { contains: 'Espa√±a', mode: 'insensitive' } },
          { question: { contains: 'Madrid', mode: 'insensitive' } },
          { question: { contains: 'Barcelona', mode: 'insensitive' } },
          { question: { contains: 'Sevilla', mode: 'insensitive' } },
          { question: { contains: 'Valencia', mode: 'insensitive' } }
        ]
      }
    });
    
    if (suspiciousQuestions.length > 0) {
      console.log(`‚ùå ${suspiciousQuestions.length} preguntas sospechosas encontradas:`);
      suspiciousQuestions.forEach((q, i) => {
        console.log(`${i+1}. [${q.questionNumber}] ${q.question.substring(0, 150)}...`);
      });
    } else {
      console.log('‚úÖ No se encontraron preguntas de geograf√≠a b√°sica');
    }
    
    // Buscar qu√© pregunta es la n√∫mero 1
    console.log('\nüîç VERIFICANDO PREGUNTA N√öMERO 1:');
    const firstQuestion = await prisma.examenOficial2018.findFirst({
      where: { questionNumber: 1 },
      select: {
        id: true,
        questionNumber: true,
        question: true,
        options: true,
        correctAnswerIndex: true,
        category: true
      }
    });
    
    if (firstQuestion) {
      console.log(`Pregunta 1:`);
      console.log(`   ID: ${firstQuestion.id}`);
      console.log(`   Pregunta: ${firstQuestion.question}`);
      console.log(`   Opciones: ${firstQuestion.options}`);
      console.log(`   Respuesta correcta: ${firstQuestion.correctAnswerIndex} (${firstQuestion.options[firstQuestion.correctAnswerIndex]})`);
      console.log(`   Categor√≠a: ${firstQuestion.category || 'N/A'}`);
    }
    
  } catch (error) {
    console.error('‚ùå Error:', error);
  } finally {
    await prisma.$disconnect();
  }
}

investigateExamenOficial2018(); 