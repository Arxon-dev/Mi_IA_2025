import { PrismaClient } from '@prisma/client';

const prisma = new PrismaClient();

async function checkPregunta34Detalle() {
  try {
    console.log('üîç AN√ÅLISIS DETALLADO DE LA PREGUNTA 34');
    console.log('=====================================');

    // 1. Buscar la pregunta 34 espec√≠fica de ExamenOficial2018
    const pregunta34 = await prisma.examenOficial2018.findFirst({
      where: { questionNumber: 34 }
    });

    if (!pregunta34) {
      console.error('‚ùå Pregunta 34 no encontrada en ExamenOficial2018');
      return;
    }

    console.log('‚úÖ Pregunta 34 encontrada:');
    console.log(`   ID: ${pregunta34.id}`);
    console.log(`   N√∫mero: ${pregunta34.questionNumber}`);
    console.log(`   Categor√≠a: ${pregunta34.category}`);
    console.log(`   Dificultad: ${pregunta34.difficulty}`);
    console.log(`   Activa: ${pregunta34.isActive}`);
    
    console.log(`\nüìù CONTENIDO COMPLETO:`);
    console.log(`"${pregunta34.question}"`);
    
    console.log(`\nüéØ OPCIONES:`);
    console.log(`   Total opciones: ${pregunta34.options.length}`);
    console.log(`   √çndice respuesta correcta: ${pregunta34.correctAnswerIndex}`);
    
    pregunta34.options.forEach((option, index) => {
      const isCorrect = index === pregunta34.correctAnswerIndex;
      const marker = isCorrect ? '‚úÖ' : '‚ùå';
      console.log(`   ${index + 1}. ${marker} "${option}" (${option.length} chars)`);
    });

    // 2. Verificar si alguna opci√≥n excede el l√≠mite de Telegram (100 chars)
    console.log(`\nüö® VERIFICACI√ìN DE L√çMITES DE TELEGRAM:`);
    const longOptions = pregunta34.options.filter(opt => opt.length > 100);
    if (longOptions.length > 0) {
      console.log(`   ‚ùå ${longOptions.length} opciones exceden 100 caracteres:`);
      longOptions.forEach((opt, idx) => {
        console.log(`      "${opt}" (${opt.length} chars)`);
      });
    } else {
      console.log(`   ‚úÖ Todas las opciones son v√°lidas (<= 100 chars)`);
    }

    // 3. Verificar el total del poll
    const header = `üéØ <b>SIMULACRO</b> ‚è∞ 34/100\n‚è±Ô∏è 2h 30m\n\n`;
    const totalLength = header.length + pregunta34.question.length;
    console.log(`\nüìè VERIFICACI√ìN DE LONGITUD TOTAL:`);
    console.log(`   Header: ${header.length} chars`);
    console.log(`   Pregunta: ${pregunta34.question.length} chars`);
    console.log(`   Total: ${totalLength} chars`);
    console.log(`   ¬øExcede 300 chars?: ${totalLength > 300 ? '‚ùå S√ç' : '‚úÖ NO'}`);

    // 4. Simular la llamada a sendTelegramPoll
    console.log(`\nüß™ SIMULACI√ìN DE ENV√çO:`);
    const pollData = {
      question: `${header}${pregunta34.question}`,
      options: pregunta34.options,
      correctAnswerIndex: pregunta34.correctAnswerIndex
    };
    
    console.log(`   Question length: ${pollData.question.length}`);
    console.log(`   Options count: ${pollData.options.length}`);
    console.log(`   Valid options: ${pollData.options.filter(opt => opt.length <= 100).length}`);
    console.log(`   Correct index: ${pollData.correctAnswerIndex}`);
    
    // Validaciones que podr√≠a hacer Telegram
    if (pollData.question.length > 300) {
      console.log(`   ‚ùå FALLO: Pregunta excede 300 caracteres`);
    } else if (pollData.options.length < 2) {
      console.log(`   ‚ùå FALLO: Menos de 2 opciones`);
    } else if (pollData.options.length > 10) {
      console.log(`   ‚ùå FALLO: M√°s de 10 opciones`);
    } else if (pollData.options.some(opt => opt.length > 100)) {
      console.log(`   ‚ùå FALLO: Alguna opci√≥n excede 100 caracteres`);
    } else if (pollData.correctAnswerIndex >= pollData.options.length) {
      console.log(`   ‚ùå FALLO: √çndice de respuesta correcta inv√°lido`);
    } else {
      console.log(`   ‚úÖ TODAS LAS VALIDACIONES PASARON`);
    }

  } catch (error) {
    console.error('‚ùå Error en an√°lisis:', error);
  } finally {
    await prisma.$disconnect();
  }
}

checkPregunta34Detalle().catch(console.error); 