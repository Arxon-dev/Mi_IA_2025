import fetch from 'node-fetch';
import { PrismaClient } from '@prisma/client';

const prisma = new PrismaClient();
const BOT_TOKEN = process.env.TELEGRAM_BOT_TOKEN || '8039179482:AAG6bugxwgsmWLVHGoWpE5nih_PQpD3KPBs';
const CHAT_ID = process.env.TELEGRAM_CHAT_ID || '-1002352049779';

async function sendTestPoll() {
  try {
    console.log('üß™ ENVIANDO POLL DE PRUEBA PARA @Carlos_esp');
    console.log('============================================');
    
    const testQuestion = {
      question: "üß™ POLL DE PRUEBA para @Carlos_esp - ¬øCu√°l es la capital de Espa√±a?",
      options: ["Madrid", "Barcelona", "Valencia", "Sevilla"],
      correct_option_id: 0,
      is_anonymous: false,
      type: "quiz",
      explanation: "‚úÖ ¬°Correcto! Madrid es la capital de Espa√±a. Este es un poll de prueba para verificar que @Carlos_esp pueda aparecer en el ranking."
    };
    
    const url = `https://api.telegram.org/bot${BOT_TOKEN}/sendPoll`;
    
    console.log('üì§ Enviando poll...');
    console.log(`   üéØ Pregunta: ${testQuestion.question}`);
    console.log(`   üìã Opciones: ${testQuestion.options.join(', ')}`);
    console.log(`   ‚úÖ Respuesta correcta: ${testQuestion.options[testQuestion.correct_option_id]}`);
    console.log('');
    
    const response = await fetch(url, {
      method: 'POST',
      headers: { 'Content-Type': 'application/json' },
      body: JSON.stringify({
        chat_id: CHAT_ID,
        question: testQuestion.question,
        options: testQuestion.options,
        correct_option_id: testQuestion.correct_option_id,
        is_anonymous: testQuestion.is_anonymous,
        type: testQuestion.type,
        explanation: testQuestion.explanation
      })
    });
    
    const result = await response.json() as any;
    
    if (result.ok) {
      console.log('‚úÖ POLL ENVIADO EXITOSAMENTE!');
      console.log(`   üÜî Message ID: ${result.result.message_id}`);
      console.log(`   üó≥Ô∏è  Poll ID: ${result.result.poll.id}`);
      console.log('');
      
      // Registrar el poll en la base de datos
      const pollRecord = await prisma.telegramPoll.create({
        data: {
          pollId: result.result.poll.id,
          questionId: 'test-poll-for-carlos',
          sourceModel: 'manual-test',
          correctAnswerIndex: testQuestion.correct_option_id,
          options: testQuestion.options,
          chatId: CHAT_ID
        }
      });
      
      console.log('üìù Poll registrado en base de datos:');
      console.log(`   üÜî ID interno: ${pollRecord.id}`);
      console.log('');
      
      console.log('üéØ INSTRUCCIONES PARA @Carlos_esp:');
      console.log('==================================');
      console.log('1. üì± Ve al grupo de Telegram "OpoMelilla"');
      console.log('2. üîç Busca el poll de prueba que acabamos de enviar');
      console.log('3. üëÜ Haz click en "Madrid" (la respuesta correcta)');
      console.log('4. ‚è±Ô∏è  Espera unos segundos');
      console.log('5. üèÜ Verifica si apareces en el ranking en http://localhost:3000/dashboard');
      console.log('');
      console.log('üîç Si NO apareces despu√©s de responder:');
      console.log('   ‚Ä¢ Verifica que est√©s en el grupo correcto');
      console.log('   ‚Ä¢ Aseg√∫rate de que tu username sea exactamente @Carlos_esp');
      console.log('   ‚Ä¢ Revisa que el webhook est√© funcionando');
      
    } else {
      console.error('‚ùå Error enviando poll:', result);
    }
    
  } catch (error) {
    console.error('‚ùå Error:', error);
  } finally {
    await prisma.$disconnect();
  }
}

async function checkRecentActivity() {
  try {
    console.log('\nüìä ACTIVIDAD RECIENTE (√∫ltimos 10 minutos):');
    console.log('============================================');
    
    const tenMinutesAgo = new Date(Date.now() - 10 * 60 * 1000);
    
    // Polls recientes
    const recentPolls = await prisma.telegramPoll.findMany({
      where: { sentAt: { gte: tenMinutesAgo } },
      orderBy: { sentAt: 'desc' },
      take: 5
    });
    
    console.log(`üó≥Ô∏è  Polls enviados: ${recentPolls.length}`);
    if (recentPolls.length > 0) {
      recentPolls.forEach((poll, index) => {
        console.log(`   ${index + 1}. Poll ID: ${poll.pollId} - ${poll.sentAt.toLocaleTimeString()}`);
      });
    }
    
    // Respuestas recientes
    const recentResponses = await prisma.telegramResponse.findMany({
      where: { answeredAt: { gte: tenMinutesAgo } },
      orderBy: { answeredAt: 'desc' },
      include: {
        user: {
          select: {
            username: true,
            firstName: true,
            lastName: true
          }
        }
      }
    });
    
    console.log(`\nüí¨ Respuestas recibidas: ${recentResponses.length}`);
    if (recentResponses.length > 0) {
      recentResponses.forEach((response, index) => {
        const user = response.user;
        const name = `${user.firstName} ${user.lastName || ''}`.trim();
        const username = user.username ? `@${user.username}` : 'sin username';
        console.log(`   ${index + 1}. ${name} (${username}) - ${response.isCorrect ? '‚úÖ' : '‚ùå'} - ${response.answeredAt.toLocaleTimeString()}`);
      });
    } else {
      console.log('   ‚ö†Ô∏è  No hay respuestas recientes. Esto puede indicar:');
      console.log('      ‚Ä¢ Los usuarios no est√°n respondiendo');
      console.log('      ‚Ä¢ El webhook no est√° funcionando');
      console.log('      ‚Ä¢ Hay un problema de conectividad');
    }
    
  } catch (error) {
    console.error('‚ùå Error verificando actividad:', error);
  }
}

async function main() {
  await sendTestPoll();
  await checkRecentActivity();
}

main(); 