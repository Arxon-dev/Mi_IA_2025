import { PrismaClient } from '@prisma/client';
import fetch from 'node-fetch';

const prisma = new PrismaClient();
const BOT_TOKEN = process.env.TELEGRAM_BOT_TOKEN || '8039179482:AAG6bugxwgsmWLVHGoWpE5nih_PQpD3KPBs';

async function testSendPregunta12() {
  try {
    console.log('üß™ PROBANDO ENV√çO DE PREGUNTA 12 DEL SIMULACRO');
    console.log('=============================================');

    const CARLOS_TELEGRAM_ID = '5793286375';

    // 1. Buscar simulacro activo de Carlos
    const user = await prisma.telegramUser.findUnique({
      where: { telegramUserId: CARLOS_TELEGRAM_ID }
    });

    if (!user) {
      console.error('‚ùå Usuario no encontrado');
      return;
    }

    const activeSimulacro = await prisma.simulacro.findFirst({
      where: {
        userId: user.id,
        status: 'in_progress'
      },
      orderBy: { startedAt: 'desc' }
    });

    if (!activeSimulacro) {
      console.log('‚ùå No hay simulacro activo');
      return;
    }

    console.log('‚úÖ Simulacro activo encontrado:', activeSimulacro.id);

    // 2. Obtener la pregunta 12 del simulacro
    const pregunta12Response = await prisma.simulacroResponse.findFirst({
      where: {
        simulacroId: activeSimulacro.id,
        questionNumber: 12
      },
      include: {
        question: true
      }
    });

    if (!pregunta12Response) {
      console.log('‚ùå Pregunta 12 no encontrada en simulacro');
      return;
    }

    console.log('‚úÖ Pregunta 12 encontrada:', {
      questionNumber: pregunta12Response.questionNumber,
      answeredAt: pregunta12Response.answeredAt,
      questionLength: pregunta12Response.question.question.length,
      optionsCount: pregunta12Response.question.options.length
    });

    // 3. Preparar datos exactos que se enviar√≠an en el webhook
    const timeElapsed = Math.floor((Date.now() - activeSimulacro.startedAt.getTime()) / 1000);
    const timeRemaining = Math.max(0, 10800 - timeElapsed);
    const hoursRemaining = Math.floor(timeRemaining / 3600);
    const minutesRemaining = Math.floor((timeRemaining % 3600) / 60);

    const pollQuestion = `üéØ <b>SIMULACRO EXAMEN OFICIAL 2018</b> ‚è∞\n\nüìù <b>Pregunta ${pregunta12Response.questionNumber}/100</b>\n‚è±Ô∏è <b>Tiempo restante: ${hoursRemaining}h ${minutesRemaining}m</b>\n\n${pregunta12Response.question.question}`;
    const pollOptions = pregunta12Response.question.options;
    const correctAnswerIndex = pregunta12Response.question.correctAnswerIndex;
    const questionId = `simulacro-${activeSimulacro.id}-${pregunta12Response.questionNumber}`;

    console.log('\nüìã DATOS DEL POLL A ENVIAR:');
    console.log('===========================');
    console.log(`üéØ Pregunta (${pollQuestion.length} chars):`);
    console.log(`   "${pollQuestion.substring(0, 100)}..."`);
    console.log(`üìã Opciones (${pollOptions.length} opciones):`);
    pollOptions.forEach((option, index) => {
      console.log(`   ${index}: "${option}" (${option.length} chars)`);
    });
    console.log(`‚úÖ Respuesta correcta: √≠ndice ${correctAnswerIndex}`);
    console.log(`üÜî Question ID: ${questionId}`);
    console.log(`üë§ Chat ID: ${CARLOS_TELEGRAM_ID}`);

    // 4. Verificar l√≠mites de Telegram
    console.log('\nüìè VERIFICACI√ìN DE L√çMITES:');
    console.log('===========================');
    if (pollQuestion.length > 300) {
      console.log(`üö® PROBLEMA: Pregunta muy larga (${pollQuestion.length}/300 chars)`);
    } else {
      console.log(`‚úÖ Pregunta OK (${pollQuestion.length}/300 chars)`);
    }

    pollOptions.forEach((option, index) => {
      if (option.length > 100) {
        console.log(`üö® PROBLEMA: Opci√≥n ${index} muy larga (${option.length}/100 chars)`);
      } else {
        console.log(`‚úÖ Opci√≥n ${index} OK (${option.length}/100 chars)`);
      }
    });

    if (correctAnswerIndex < 0 || correctAnswerIndex >= pollOptions.length) {
      console.log(`üö® PROBLEMA: √çndice de respuesta correcta inv√°lido (${correctAnswerIndex}/${pollOptions.length})`);
    } else {
      console.log(`‚úÖ √çndice correcto OK (${correctAnswerIndex})`);
    }

    // 5. Simular la llamada exacta a la API de Telegram
    console.log('\nüöÄ ENVIANDO POLL A TELEGRAM...');
    console.log('==============================');

    const telegramPayload = {
      chat_id: CARLOS_TELEGRAM_ID,
      question: pollQuestion,
      options: pollOptions,
      type: 'quiz',
      correct_option_id: correctAnswerIndex,
      is_anonymous: false,
      allows_multiple_answers: false,
      explanation: `üí° Explicaci√≥n disponible despu√©s de responder.`,
      explanation_parse_mode: 'HTML'
    };

    console.log('üì§ Payload completo:', JSON.stringify(telegramPayload, null, 2));

    const response = await fetch(`https://api.telegram.org/bot${BOT_TOKEN}/sendPoll`, {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json',
      },
      body: JSON.stringify(telegramPayload),
    });

    const result = await response.json() as any;

    console.log('\nüì• RESPUESTA DE TELEGRAM:');
    console.log('========================');
    console.log('Status:', response.status);
    console.log('OK:', result.ok);
    
    if (result.ok) {
      console.log('‚úÖ ¬°POLL ENVIADO EXITOSAMENTE!');
      console.log('   üì© Message ID:', result.result.message_id);
      console.log('   üó≥Ô∏è Poll ID:', result.result.poll.id);
      console.log('   üìù Pregunta enviada:', result.result.poll.question?.substring(0, 100) + '...');
      
      // Registrar en base de datos como har√≠a el webhook
      try {
        await prisma.telegramPoll.create({
          data: {
            pollId: result.result.poll.id,
            questionId: questionId,
            chatId: CARLOS_TELEGRAM_ID,
            correctAnswerIndex: correctAnswerIndex,
            options: pollOptions,
            sourceModel: 'simulacro',
            createdAt: new Date()
          }
        });
        console.log('‚úÖ Poll registrado en BD exitosamente');
      } catch (dbError) {
        console.error('‚ö†Ô∏è Error registrando en BD:', dbError);
      }
      
    } else {
      console.log('‚ùå ERROR EN EL ENV√çO:');
      console.log('   C√≥digo:', result.error_code);
      console.log('   Descripci√≥n:', result.description);
      console.log('   Par√°metros:', result.parameters);
      
      // Diagnosticar errores comunes
      if (result.description?.includes('POLL_QUESTION_TOO_LONG')) {
        console.log('üö® DIAGN√ìSTICO: La pregunta es demasiado larga');
      } else if (result.description?.includes('POLL_OPTION_TOO_LONG')) {
        console.log('üö® DIAGN√ìSTICO: Una o m√°s opciones son demasiado largas');
      } else if (result.description?.includes('POLL_TOO_MANY_OPTIONS')) {
        console.log('üö® DIAGN√ìSTICO: Demasiadas opciones');
      } else if (result.description?.includes('POLL_QUESTION_TOO_SHORT')) {
        console.log('üö® DIAGN√ìSTICO: La pregunta es demasiado corta');
      } else if (result.description?.includes('Bad Request')) {
        console.log('üö® DIAGN√ìSTICO: Solicitud malformada');
      }
    }

  } catch (error) {
    console.error('‚ùå Error en test:', error);
  } finally {
    await prisma.$disconnect();
  }
}

testSendPregunta12(); 