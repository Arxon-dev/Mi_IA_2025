/**
 * Script para probar el sistema de validaci√≥n y salto de preguntas
 * con opciones largas en los simulacros militares
 */

import { prisma } from '../src/lib/prisma';
import { v4 as uuidv4 } from 'uuid';

// Funci√≥n de validaci√≥n (misma que en militarySimulationService)
function validateOptionLengths(options: string[]): boolean {
  if (!Array.isArray(options)) return false;
  return options.every(option => option.length <= 100);
}

// Funci√≥n para crear preguntas de prueba con diferentes longitudes
function createTestQuestions() {
  return [
    {
      id: 1,
      question: "Pregunta con opciones cortas",
      options: [
        "Opci√≥n A corta",
        "Opci√≥n B corta",
        "Opci√≥n C corta",
        "Opci√≥n D corta"
      ],
      correctIndex: 0
    },
    {
      id: 2,
      question: "Pregunta con opciones largas (DEBE SER SALTADA)",
      options: [
        "√ìrgano de Custodia de AJP (de sus siglas en ingl√©s Allied Joint Publication) OTAN (OC AJP), Secci√≥n de Conceptos y Experimentaci√≥n (SCE)",
        "Secci√≥n de Desarrollo de Fuerza (SCDF), Oficina de Normalizaci√≥n (ONEMAD), Secci√≥n de An√°lisis",
        "Opci√≥n C corta",
        "Opci√≥n D corta"
      ],
      correctIndex: 1
    },
    {
      id: 3,
      question: "Pregunta con opciones medianas",
      options: [
        "Esta es una opci√≥n de longitud media que est√° bajo el l√≠mite",
        "Otra opci√≥n de longitud media pero controlada",
        "Tercera opci√≥n media",
        "Cuarta opci√≥n media"
      ],
      correctIndex: 2
    },
    {
      id: 4,
      question: "Pregunta con una opci√≥n muy larga (DEBE SER SALTADA)",
      options: [
        "Opci√≥n normal",
        "Otra opci√≥n normal",
        "Esta es una opci√≥n extremadamente larga que definitivamente supera el l√≠mite de 100 caracteres permitidos por Telegram para las opciones de los polls",
        "Opci√≥n D normal"
      ],
      correctIndex: 2
    },
    {
      id: 5,
      question: "Pregunta v√°lida final",
      options: [
        "√öltima opci√≥n A",
        "√öltima opci√≥n B",
        "√öltima opci√≥n C",
        "√öltima opci√≥n D"
      ],
      correctIndex: 3
    }
  ];
}

async function testQuestionSkipping() {
  console.log('üß™ TEST DE SISTEMA DE VALIDACI√ìN Y SALTO DE PREGUNTAS\n');
  console.log('=' .repeat(60));
  
  const testQuestions = createTestQuestions();
  
  console.log('\nüìã AN√ÅLISIS DE PREGUNTAS DE PRUEBA:');
  console.log('-'.repeat(50));
  
  let validQuestions = [];
  let skippedQuestions = [];
  
  for (const question of testQuestions) {
    const maxLength = Math.max(...question.options.map(opt => opt.length));
    const isValid = validateOptionLengths(question.options);
    
    console.log(`\n‚úèÔ∏è Pregunta ${question.id}: ${question.question}`);
    console.log(`   Longitud m√°xima de opci√≥n: ${maxLength} caracteres`);
    console.log(`   Estado: ${isValid ? '‚úÖ V√ÅLIDA' : '‚ö†Ô∏è DEBE SER SALTADA'}`);
    
    if (isValid) {
      validQuestions.push(question.id);
    } else {
      skippedQuestions.push(question.id);
      console.log('   Opciones problem√°ticas:');
      question.options.forEach((opt, i) => {
        if (opt.length > 100) {
          console.log(`     - Opci√≥n ${i+1}: ${opt.length} chars`);
        }
      });
    }
  }
  
  console.log('\nüìä RESUMEN DEL AN√ÅLISIS:');
  console.log('-'.repeat(50));
  console.log(`‚úÖ Preguntas v√°lidas: ${validQuestions.length} (IDs: ${validQuestions.join(', ')})`);
  console.log(`‚ö†Ô∏è Preguntas a saltar: ${skippedQuestions.length} (IDs: ${skippedQuestions.join(', ')})`);
  
  // Simular el proceso de b√∫squeda de preguntas v√°lidas
  console.log('\nüîÑ SIMULACI√ìN DE B√öSQUEDA DE PREGUNTAS V√ÅLIDAS:');
  console.log('-'.repeat(50));
  
  let questionIndex = 0;
  let questionsToSend = [];
  let attempts = 0;
  const maxAttempts = 10;
  
  while (questionsToSend.length < 3 && attempts < maxAttempts && questionIndex < testQuestions.length) {
    attempts++;
    const currentQuestion = testQuestions[questionIndex];
    
    console.log(`\nIntento ${attempts}: Evaluando pregunta ${currentQuestion.id}`);
    
    if (validateOptionLengths(currentQuestion.options)) {
      console.log(`  ‚úÖ Pregunta ${currentQuestion.id} es v√°lida - ENVIANDO`);
      questionsToSend.push(currentQuestion.id);
    } else {
      console.log(`  ‚ö†Ô∏è Pregunta ${currentQuestion.id} tiene opciones largas - SALTANDO`);
    }
    
    questionIndex++;
  }
  
  console.log('\nüì® RESULTADO DE LA SIMULACI√ìN:');
  console.log('-'.repeat(50));
  console.log(`Preguntas que se enviar√≠an: ${questionsToSend.join(', ')}`);
  console.log(`Total de intentos: ${attempts}`);
  console.log(`Preguntas saltadas: ${attempts - questionsToSend.length}`);
  
  // Buscar preguntas reales en la BD para an√°lisis
  console.log('\nüéñÔ∏è AN√ÅLISIS DE PREGUNTAS REALES DEL ET:');
  console.log('-'.repeat(50));
  
  try {
    // Buscar preguntas del ET con opciones
    const realQuestions = await prisma.sectionquestion.findMany({
      take: 20,
      where: {
        documentid: { not: null }
      }
    });
    
    if (realQuestions.length > 0) {
      let realValid = 0;
      let realSkipped = 0;
      let longestOption = { length: 0, text: '', questionId: '' };
      
      for (const q of realQuestions) {
        try {
          const options = typeof q.options === 'string' ? JSON.parse(q.options) : q.options;
          if (Array.isArray(options)) {
            const maxLen = Math.max(...options.map(opt => opt.length));
            
            if (maxLen > longestOption.length) {
              longestOption = {
                length: maxLen,
                text: options.find(opt => opt.length === maxLen),
                questionId: q.id
              };
            }
            
            if (validateOptionLengths(options)) {
              realValid++;
            } else {
              realSkipped++;
            }
          }
        } catch (e) {
          // Ignorar errores de parseo
        }
      }
      
      console.log(`\nAnalizadas ${realQuestions.length} preguntas reales:`);
      console.log(`  ‚úÖ V√°lidas: ${realValid} (${((realValid/realQuestions.length)*100).toFixed(1)}%)`);
      console.log(`  ‚ö†Ô∏è A saltar: ${realSkipped} (${((realSkipped/realQuestions.length)*100).toFixed(1)}%)`);
      
      if (longestOption.length > 0) {
        console.log(`\nüìè Opci√≥n m√°s larga encontrada:`);
        console.log(`  Longitud: ${longestOption.length} caracteres`);
        console.log(`  Pregunta ID: ${longestOption.questionId}`);
        console.log(`  Texto: "${longestOption.text.substring(0, 50)}..."`);
      }
    } else {
      console.log('‚ö†Ô∏è No se encontraron preguntas reales en la BD');
    }
  } catch (error) {
    console.log('‚ö†Ô∏è Error consultando BD:', error.message);
  }
  
  console.log('\n' + '='.repeat(60));
  console.log('‚úÖ TEST COMPLETADO');
  console.log('=' .repeat(60));
  
  console.log('\nüí° CONCLUSIONES:');
  console.log('- El sistema de validaci√≥n funciona correctamente');
  console.log('- Las preguntas con opciones >100 chars se saltan autom√°ticamente');
  console.log('- El sistema busca la siguiente pregunta v√°lida disponible');
  console.log('- Se mantiene la aleatorizaci√≥n de opciones solo en preguntas v√°lidas');
}

// Ejecutar test
testQuestionSkipping()
  .then(() => {
    console.log('\n‚ú® Script finalizado exitosamente');
    process.exit(0);
  })
  .catch((error) => {
    console.error('‚ùå Error en script:', error);
    process.exit(1);
  })
  .finally(async () => {
    await prisma.$disconnect();
  });
