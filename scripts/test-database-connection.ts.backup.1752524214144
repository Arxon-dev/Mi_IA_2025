import { PrismaClient } from '@prisma/client';
import { config } from 'dotenv';

config();

const prisma = new PrismaClient();

async function testDatabaseConnection() {
  try {
    console.log('üîó VERIFICANDO CONEXI√ìN A BASE DE DATOS...');
    console.log('=' .repeat(50));

    // Probar conexi√≥n b√°sica
    await prisma.$connect();
    console.log('‚úÖ Conexi√≥n a base de datos exitosa');

    // Verificar tabla ExamenOficial2018
    console.log('\nüìä VERIFICANDO TABLA ExamenOficial2018...');
    const countQuestions = await prisma.examenOficial2018.count();
    console.log(`   üìù Total preguntas: ${countQuestions}`);

    // Obtener una pregunta de ejemplo
    const sampleQuestion = await prisma.examenOficial2018.findFirst();
    if (sampleQuestion) {
      console.log('   ‚úÖ Tabla accesible, pregunta ejemplo:');
      console.log(`   ID: ${sampleQuestion.id}`);
      console.log(`   N√∫mero: ${sampleQuestion.questionNumber}`);
      console.log(`   Pregunta: ${sampleQuestion.question.substring(0, 100)}...`);
      console.log(`   Opciones: ${sampleQuestion.options.length} opciones`);
      console.log(`   Respuesta correcta: ${sampleQuestion.correctAnswerIndex}`);
      console.log(`   Veces enviada: ${sampleQuestion.sendCount}`);
    }

    // Verificar tabla ScheduledQuestion
    console.log('\nüìÖ VERIFICANDO TABLA ScheduledQuestion...');
    const countScheduled = await prisma.scheduledQuestion.count();
    console.log(`   üìù Total preguntas programadas: ${countScheduled}`);

    // Verificar tabla TelegramPoll
    console.log('\nüìä VERIFICANDO TABLA TelegramPoll...');
    const countPolls = await prisma.telegramPoll.count();
    console.log(`   üìù Total polls: ${countPolls}`);

    console.log('\n‚úÖ VERIFICACI√ìN COMPLETADA - BASE DE DATOS FUNCIONAL');

  } catch (error) {
    console.error('‚ùå ERROR EN BASE DE DATOS:', error);
    
    if (error instanceof Error) {
      console.log('\nüîç DETALLES DEL ERROR:');
      console.log('   Mensaje:', error.message);
      console.log('   Stack:', error.stack?.slice(0, 500));
    }
  } finally {
    await prisma.$disconnect();
  }
}

testDatabaseConnection(); 